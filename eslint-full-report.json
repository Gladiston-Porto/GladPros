[{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\__tests__\\api\\clientes\\route.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\__tests__\\components\\clientes\\ClienteCard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\__tests__\\hooks\\useClienteOperations.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":77,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2526,2529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2526,2529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":162,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":213,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":213,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":237,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":237,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, act } from '@testing-library/react'\r\nimport { useClienteOperations } from '@/hooks/useClienteOperations'\r\nimport type { ClienteCreateInput, ClienteUpdateInput } from '@/types/cliente'\r\n\r\n// Mock fetch globally\r\nconst mockFetch = global.fetch as jest.MockedFunction<typeof fetch>\r\n\r\nconst mockCreateInput: ClienteCreateInput = {\r\n  tipo: 'PF',\r\n  nomeCompleto: 'João Silva',\r\n  email: 'joao@email.com',\r\n  telefone: '11999999999',\r\n  endereco1: 'Rua A, 123',\r\n  cidade: 'São Paulo',\r\n  estado: 'SP',\r\n  zipcode: '01310-100',\r\n  documento: '12345678901'\r\n}\r\n\r\nconst mockUpdateInput: ClienteUpdateInput = {\r\n  nomeCompleto: 'João Silva Updated',\r\n  email: 'joao.updated@email.com'\r\n}\r\n\r\ndescribe('useClienteOperations', () => {\r\n  beforeEach(() => {\r\n    mockFetch.mockClear()\r\n  })\r\n\r\n  describe('createCliente', () => {\r\n    it('successfully creates a cliente', async () => {\r\n      const mockResponse = { id: 1, ...mockCreateInput }\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockResponse,\r\n      } as Response)\r\n\r\n      const onSuccess = jest.fn()\r\n      const onError = jest.fn()\r\n      \r\n      const { result } = renderHook(() => \r\n        useClienteOperations({ onSuccess, onError })\r\n      )\r\n\r\n      await act(async () => {\r\n        await result.current.createCliente(mockCreateInput)\r\n      })\r\n\r\n      expect(mockFetch).toHaveBeenCalledWith('/api/clientes', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(mockCreateInput),\r\n      })\r\n      expect(onSuccess).toHaveBeenCalledWith('Cliente criado com sucesso!')\r\n      expect(onError).not.toHaveBeenCalled()\r\n    })\r\n\r\n    it('handles create error', async () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: false,\r\n        json: async () => ({ error: 'Erro ao criar cliente' }),\r\n      } as Response)\r\n\r\n      const onSuccess = jest.fn()\r\n      const onError = jest.fn()\r\n      \r\n      const { result } = renderHook(() => \r\n        useClienteOperations({ onSuccess, onError })\r\n      )\r\n\r\n      let error: Error | null = null\r\n      try {\r\n        await act(async () => {\r\n          await result.current.createCliente(mockCreateInput)\r\n        })\r\n      } catch (e) {\r\n        error = e as Error\r\n      }\r\n\r\n      expect(onError).toHaveBeenCalledWith('Erro ao criar cliente')\r\n      expect(onSuccess).not.toHaveBeenCalled()\r\n    })\r\n\r\n    it('sets loading state during create', async () => {\r\n      let resolveCreate: (value: any) => void\r\n      const createPromise = new Promise(resolve => {\r\n        resolveCreate = resolve\r\n      })\r\n\r\n      mockFetch.mockImplementationOnce(() => createPromise as Promise<Response>)\r\n\r\n      const { result } = renderHook(() => \r\n        useClienteOperations({ onSuccess: jest.fn(), onError: jest.fn() })\r\n      )\r\n\r\n      // Start create operation\r\n      act(() => {\r\n        result.current.createCliente(mockCreateInput)\r\n      })\r\n\r\n      // Should be loading\r\n      expect(result.current.loading).toBe(true)\r\n\r\n      // Resolve the promise\r\n      await act(async () => {\r\n        resolveCreate!({\r\n          ok: true,\r\n          json: async () => ({ id: 1, ...mockCreateInput }),\r\n        })\r\n      })\r\n\r\n      // Should not be loading anymore\r\n      expect(result.current.loading).toBe(false)\r\n    })\r\n  })\r\n\r\n  describe('updateCliente', () => {\r\n    it('successfully updates a cliente', async () => {\r\n      const mockResponse = { id: 1, ...mockUpdateInput }\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => mockResponse,\r\n      } as Response)\r\n\r\n      const onSuccess = jest.fn()\r\n      const onError = jest.fn()\r\n      \r\n      const { result } = renderHook(() => \r\n        useClienteOperations({ onSuccess, onError })\r\n      )\r\n\r\n      await act(async () => {\r\n        await result.current.updateCliente(1, mockUpdateInput)\r\n      })\r\n\r\n      expect(mockFetch).toHaveBeenCalledWith('/api/clientes/1', {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(mockUpdateInput),\r\n      })\r\n      expect(onSuccess).toHaveBeenCalledWith('Cliente atualizado com sucesso!')\r\n      expect(onError).not.toHaveBeenCalled()\r\n    })\r\n\r\n    it('handles update error', async () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: false,\r\n        json: async () => ({ error: 'Cliente não encontrado' }),\r\n      } as Response)\r\n\r\n      const onSuccess = jest.fn()\r\n      const onError = jest.fn()\r\n      \r\n      const { result } = renderHook(() => \r\n        useClienteOperations({ onSuccess, onError })\r\n      )\r\n\r\n      try {\r\n        await act(async () => {\r\n          await result.current.updateCliente(999, mockUpdateInput)\r\n        })\r\n      } catch (e) {\r\n        // Expected error\r\n      }\r\n\r\n      expect(onError).toHaveBeenCalledWith('Cliente não encontrado')\r\n      expect(onSuccess).not.toHaveBeenCalled()\r\n    })\r\n  })\r\n\r\n  describe('deleteCliente', () => {\r\n    it('successfully deletes a cliente', async () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        json: async () => ({ message: 'Cliente inativado' }),\r\n      } as Response)\r\n\r\n      const onSuccess = jest.fn()\r\n      const onError = jest.fn()\r\n      \r\n      const { result } = renderHook(() => \r\n        useClienteOperations({ onSuccess, onError })\r\n      )\r\n\r\n      await act(async () => {\r\n        await result.current.deleteCliente(1)\r\n      })\r\n\r\n      expect(mockFetch).toHaveBeenCalledWith('/api/clientes/1', {\r\n        method: 'DELETE',\r\n      })\r\n      expect(onSuccess).toHaveBeenCalledWith('Cliente inativado com sucesso!')\r\n      expect(onError).not.toHaveBeenCalled()\r\n    })\r\n\r\n    it('handles delete error', async () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: false,\r\n        json: async () => ({ error: 'Não autorizado' }),\r\n      } as Response)\r\n\r\n      const onSuccess = jest.fn()\r\n      const onError = jest.fn()\r\n      \r\n      const { result } = renderHook(() => \r\n        useClienteOperations({ onSuccess, onError })\r\n      )\r\n\r\n      try {\r\n        await act(async () => {\r\n          await result.current.deleteCliente(1)\r\n        })\r\n      } catch (e) {\r\n        // Expected error\r\n      }\r\n\r\n      expect(onError).toHaveBeenCalledWith('Não autorizado')\r\n      expect(onSuccess).not.toHaveBeenCalled()\r\n    })\r\n  })\r\n\r\n  describe('network errors', () => {\r\n    it('handles network error in create', async () => {\r\n      mockFetch.mockRejectedValueOnce(new Error('Network error'))\r\n\r\n      const onSuccess = jest.fn()\r\n      const onError = jest.fn()\r\n      \r\n      const { result } = renderHook(() => \r\n        useClienteOperations({ onSuccess, onError })\r\n      )\r\n\r\n      try {\r\n        await act(async () => {\r\n          await result.current.createCliente(mockCreateInput)\r\n        })\r\n      } catch (e) {\r\n        // Expected error\r\n      }\r\n\r\n      expect(onError).toHaveBeenCalledWith('Network error')\r\n      expect(onSuccess).not.toHaveBeenCalled()\r\n    })\r\n  })\r\n})\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\__tests__\\jest-dom.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\__tests__\\utils\\cliente-helpers-basic.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TipoCliente' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  maskDocumento,\r\n  formatTelefone,\r\n  formatZipcode,\r\n  getDocLast4,\r\n  hashDocumento\r\n} from '@/lib/helpers/cliente'\r\nimport { TipoCliente } from '@prisma/client'\r\n\r\ndescribe('Cliente Helpers - Basic Functions', () => {\r\n  describe('maskDocumento', () => {\r\n    it('should mask CPF correctly', () => {\r\n      expect(maskDocumento('12345678901', 'PF')).toBe('123.456.789-01')\r\n    })\r\n\r\n    it('should mask CNPJ correctly', () => {\r\n      expect(maskDocumento('12345678901234', 'PJ')).toBe('12.345.678/9012-34')\r\n    })\r\n\r\n    it('should handle empty document', () => {\r\n      expect(maskDocumento('', 'PF')).toBe('')\r\n    })\r\n  })\r\n\r\n  describe('formatTelefone', () => {\r\n    it('should format 11-digit phone number', () => {\r\n      expect(formatTelefone('11999999999')).toBe('(11) 99999-9999')\r\n    })\r\n\r\n    it('should format 10-digit phone number', () => {\r\n      expect(formatTelefone('1133334444')).toBe('(11) 3333-4444')\r\n    })\r\n  })\r\n\r\n  describe('formatZipcode', () => {\r\n    it('should format valid zipcode', () => {\r\n      expect(formatZipcode('01234567')).toBe('01234-567')\r\n    })\r\n  })\r\n\r\n  describe('getDocLast4', () => {\r\n    it('should return last 4 digits', () => {\r\n      expect(getDocLast4('12345678901')).toBe('8901')\r\n    })\r\n  })\r\n\r\n  describe('hashDocumento', () => {\r\n    it('should create consistent hash', () => {\r\n      const doc1 = hashDocumento('12345678901')\r\n      const doc2 = hashDocumento('12345678901')\r\n      expect(doc1).toBe(doc2)\r\n    })\r\n  })\r\n})\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\__tests__\\utils\\cliente-helpers-complete.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\__tests__\\utils\\cliente-helpers.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\(dashboard)\\dashboard\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\(dashboard)\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\(dashboard)\\usuarios\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\(dashboard)\\usuarios\\novo\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\(dashboard)\\usuarios\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\401\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\403\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\500\\preview\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\_debug\\make-token\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\auth\\first-access\\setup\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\auth\\forgot-password\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\auth\\login\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\auth\\logout\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[301,304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[301,304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[460,463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[460,463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[936,939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[936,939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":52,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1975,1978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1975,1978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const runtime = \"nodejs\"\r\n\r\nimport { NextResponse } from \"next/server\"\r\nimport { prisma } from \"@/server/db\"\r\nimport { verifyAuthJWT } from \"@/lib/jwt\"\r\nimport { hasTokenVersionColumn } from \"@/lib/db-metadata\"\r\n\r\nexport async function POST(request: Request) {\r\n  const payload: Record<string, any> = { message: 'Logout realizado com sucesso' };\r\n\r\n  try {\r\n    // Extrair cookies (Next.js Web API Request)\r\n    const cookieHeader = (request.headers as any).get?.(\"cookie\") as string | undefined;\r\n    const sessionToken = cookieHeader\r\n      ?.split(';')\r\n      .map((p) => p.trim())\r\n      .find((p) => p.startsWith('sessionToken='))\r\n      ?.split('=')[1];\r\n    const cookieAuthToken = cookieHeader\r\n      ?.split(';')\r\n      .map((p) => p.trim())\r\n      .find((p) => p.startsWith('authToken='))\r\n      ?.split('=')[1];\r\n\r\n    // Accept Authorization: Bearer <token> as alternative\r\n    const authHeader = (request.headers as any).get?.('authorization') as string | undefined;\r\n    const headerToken = authHeader?.startsWith('Bearer ') ? authHeader.slice(7) : undefined;\r\n    const authToken = cookieAuthToken ?? headerToken;\r\n\r\n    if (sessionToken) {\r\n      try {\r\n        const { SecurityService } = await import('@/lib/security');\r\n        await SecurityService.revokeSessionByToken(sessionToken);\r\n      } catch (e) {\r\n        console.warn('[Logout] Falha ao revogar sessão por token:', e);\r\n      }\r\n    }\r\n\r\n    // Invalida imediatamente JWTs existentes via incremento de tokenVersion\r\n    if (authToken) {\r\n      try {\r\n        const claims = await verifyAuthJWT(authToken);\r\n        const userId = Number(claims.sub);\r\n        const hasCol = await hasTokenVersionColumn();\r\n        if (!Number.isNaN(userId) && hasCol) {\r\n          try {\r\n            await prisma.$executeRaw`UPDATE Usuario SET tokenVersion = tokenVersion + 1 WHERE id = ${userId}`;\r\n          } catch {\r\n            // Falha transitória: ignore\r\n          }\r\n        }\r\n      } catch (e: any) {\r\n        // token inválido, ignore\r\n      }\r\n    }\r\n  } catch (e) {\r\n    console.warn('[Logout] Falha ao processar cookies:', e);\r\n  }\r\n\r\n  // Limpar cookies de autenticação e sessão\r\n  const res = NextResponse.json(payload);\r\n  res.cookies.set('authToken', '', {\r\n    httpOnly: true,\r\n    secure: process.env.NODE_ENV === 'production',\r\n    sameSite: 'lax',\r\n    path: '/',\r\n    maxAge: 0,\r\n  });\r\n  res.cookies.set('sessionToken', '', {\r\n    httpOnly: true,\r\n    secure: process.env.NODE_ENV === 'production',\r\n    sameSite: 'lax',\r\n    path: '/',\r\n    maxAge: 0,\r\n  });\r\n\r\n  return res;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\auth\\me\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\auth\\mfa\\request\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\auth\\mfa\\resend\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\auth\\mfa\\verify\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3962,3965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3962,3965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3975,3978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3975,3978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/app/api/auth/mfa/verify/route.ts\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { prisma } from \"@/server/db\";\r\nimport { hasTokenVersionColumn } from \"@/lib/db-metadata\";\r\nimport { MFAService } from \"@/lib/mfa\";\r\nimport { signAuthJWT, type Role } from \"@/lib/jwt\";\r\nimport { mfaRateLimit } from \"@/lib/rate-limit\";\r\nimport { mfaVerificationSchema } from \"@/lib/validation\";\r\nimport { SecurityService } from \"@/lib/security\";\r\n\r\nfunction getClientIP(req: NextRequest): string {\r\n  return (\r\n    req.headers.get(\"x-forwarded-for\")?.split(\",\")[0] ||\r\n    req.headers.get(\"x-real-ip\") ||\r\n    req.headers.get(\"cf-connecting-ip\") ||\r\n    \"unknown\"\r\n  );\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const raw = await req.json().catch(() => ({}));\r\n    const parsed = mfaVerificationSchema.safeParse(raw);\r\n    if (!parsed.success) {\r\n      return NextResponse.json(\r\n        { error: \"ID do usuário e código são obrigatórios\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    const { userId, code, tipoAcao = \"LOGIN\" } = parsed.data;\r\n    const tipoAcaoMapped: \"LOGIN\" | \"RESET\" | \"PRIMEIRO_ACESSO\" | \"DESBLOQUEIO\" =\r\n      tipoAcao === \"RESET_PASSWORD\" ? \"RESET\" : (tipoAcao as \"LOGIN\" | \"PRIMEIRO_ACESSO\");\r\n\r\n    // Buscar email do usuário para rate limiting\r\n    const userRows = await prisma.$queryRaw<Array<{\r\n      email: string;\r\n    }>>`\r\n      SELECT email FROM Usuario WHERE id = ${userId} LIMIT 1\r\n    `;\r\n\r\n    const userEmail = userRows[0]?.email;\r\n    if (!userEmail) {\r\n      return NextResponse.json(\r\n        { error: \"Usuário não encontrado\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Aplicar rate limiting por email\r\n    const rateLimitResult = await mfaRateLimit.checkLimit(req, `mfa:${userEmail}`);\r\n    if (!rateLimitResult.allowed) {\r\n      return NextResponse.json(\r\n        { \r\n          error: rateLimitResult.message,\r\n          retryAfter: Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000)\r\n        },\r\n        { \r\n          status: 429,\r\n          headers: {\r\n            'X-RateLimit-Limit': '3',\r\n            'X-RateLimit-Remaining': rateLimitResult.remaining.toString(),\r\n            'Retry-After': Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000).toString()\r\n          }\r\n        }\r\n      );\r\n    }\r\n\r\n    // Verificar código MFA\r\n    const mfaResult = await MFAService.verifyMFACode({\r\n      usuarioId: userId,\r\n      code,\r\n      tipoAcao: tipoAcaoMapped\r\n    });\r\n\r\n    if (!mfaResult.valid) {\r\n      return NextResponse.json(\r\n        { error: mfaResult.error || \"Código inválido\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Buscar dados completos do usuário\r\n    let fullUserRows: Array<{ id: number; email: string; nomeCompleto: string | null; primeiroAcesso: boolean; senhaProvisoria: boolean; tipo: string | null; tokenVersion: number }> = [];\r\n    if (await hasTokenVersionColumn()) {\r\n      try {\r\n        fullUserRows = await prisma.$queryRaw<Array<{\r\n          id: number;\r\n          email: string;\r\n          nomeCompleto: string | null;\r\n          primeiroAcesso: boolean;\r\n          senhaProvisoria: boolean;\r\n          tipo: string | null;\r\n          tokenVersion: number;\r\n        }>>`\r\n          SELECT id, email, nomeCompleto, primeiroAcesso, senhaProvisoria, nivel as tipo, tokenVersion\r\n          FROM Usuario \r\n          WHERE id = ${userId}\r\n          LIMIT 1\r\n        `;\r\n      } catch {\r\n        // if it fails for some other reason, fall back to without tokenVersion\r\n      }\r\n    }\r\n    if (fullUserRows.length === 0) {\r\n      const alt = await prisma.$queryRaw<Array<{\r\n        id: number; email: string; nomeCompleto: string | null; primeiroAcesso: boolean; senhaProvisoria: boolean; tipo: string | null;\r\n      }>>`\r\n        SELECT id, email, nomeCompleto, primeiroAcesso, senhaProvisoria, nivel as tipo\r\n        FROM Usuario\r\n        WHERE id = ${userId}\r\n        LIMIT 1\r\n      `;\r\n      fullUserRows = (alt as any).map((r: any) => ({ ...r, tokenVersion: 0 }));\r\n    }\r\n\r\n    const user = fullUserRows[0];\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: \"Usuário não encontrado\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n  // Gerar JWT usando jose\r\n    const role = ((user.tipo || 'USUARIO').toUpperCase() as Role);\r\n  const token = await signAuthJWT({\r\n      sub: user.id.toString(),\r\n      role,\r\n      status: 'ATIVO',\r\n      tokenVersion: user.tokenVersion ?? 0\r\n    }, \"24h\");\r\n\r\n    // Registrar tentativa bem-sucedida e atualizar último login\r\n    const reqIp = getClientIP(req);\r\n    const reqUA = req.headers.get(\"user-agent\") || undefined;\r\n    await prisma.$executeRaw`\r\n      INSERT INTO TentativaLogin (usuarioId, email, sucesso, ip, userAgent)\r\n      VALUES (${user.id}, ${user.email}, TRUE, ${reqIp}, ${reqUA})\r\n    `;\r\n    await prisma.$executeRaw`\r\n      UPDATE Usuario \r\n      SET ultimoLoginEm = NOW() \r\n      WHERE id = ${user.id}\r\n    `;\r\n\r\n    // Desbloquear usuário e manter histórico de falhas\r\n    try {\r\n      const { BlockingService } = await import(\"@/lib/blocking\");\r\n      await BlockingService.clearFailedAttempts(user.id);\r\n    } catch (e) {\r\n      console.warn(\"[MFA] Falha ao desbloquear usuário após sucesso:\", e);\r\n    }\r\n\r\n    // Se é primeiro acesso, redirecionar para configuração\r\n    if (user.primeiroAcesso) {\r\n      const response = NextResponse.json({\r\n        success: true,\r\n        requiresSetup: true,\r\n        nextStep: \"primeiro-acesso\",\r\n        redirectUrl: `/primeiro-acesso?userId=${user.id}`,\r\n        user: {\r\n          id: user.id,\r\n          email: user.email,\r\n          nomeCompleto: user.nomeCompleto,\r\n          primeiroAcesso: user.primeiroAcesso,\r\n          senhaProvisoria: user.senhaProvisoria\r\n        }\r\n      });\r\n\r\n      // Set httpOnly cookie para autenticação temporária\r\n      response.cookies.set(\"authToken\", token, {\r\n        httpOnly: true,\r\n        secure: process.env.NODE_ENV === \"production\",\r\n        sameSite: \"lax\",\r\n        maxAge: 24 * 60 * 60 // 24 hours\r\n      });\r\n\r\n      return response;\r\n    }\r\n\r\n    // Criar sessão ativa para o usuário autenticado\r\n    const ip = reqIp;\r\n    const userAgent = reqUA;\r\n    let sessionToken: string | undefined;\r\n    try {\r\n      sessionToken = await SecurityService.createSession(user.id, ip, userAgent);\r\n    } catch (e) {\r\n      // Não bloquear o login se falhar criar sessão; apenas logar para investigação\r\n      console.warn(\"[MFA] Falha ao criar sessão ativa:\", e);\r\n    }\r\n\r\n    // Login normal completo\r\n    const response = NextResponse.json({\r\n      success: true,\r\n      user: {\r\n        id: user.id,\r\n        email: user.email,\r\n        nomeCompleto: user.nomeCompleto,\r\n        tipo: user.tipo\r\n      },\r\n      token // Também retorna no body para compatibilidade\r\n    });\r\n\r\n  // Set httpOnly cookie (JWT)\r\n    response.cookies.set(\"authToken\", token, {\r\n      httpOnly: true,\r\n      secure: process.env.NODE_ENV === \"production\",\r\n      sameSite: \"lax\",\r\n      maxAge: 24 * 60 * 60 // 24 hours\r\n    });\r\n    if (sessionToken) {\r\n      response.cookies.set(\"sessionToken\", sessionToken, {\r\n        httpOnly: true,\r\n        secure: process.env.NODE_ENV === \"production\",\r\n        sameSite: \"lax\",\r\n        maxAge: 24 * 60 * 60\r\n      });\r\n    }\r\n\r\n    return response;\r\n\r\n  } catch (error) {\r\n    console.error(\"[API] MFA Verify error:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Erro interno do servidor\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\auth\\reset-password\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\auth\\unlock\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\auth\\user-status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\client\\proposta\\[token]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'prisma' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StatusProposta' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":24}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\r\nimport { prisma } from '@/lib/prisma'\r\nimport { StatusProposta } from '@/types/propostas'\r\nimport { validateTokenPublico } from '@/lib/services/proposta-token'\r\nimport { applyRBACMasking, getUserPermissions, getPropostaContext } from '@/lib/services/proposta-rbac'\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { token: string } }\r\n) {\r\n  try {\r\n    const token = params.token\r\n\r\n    if (!token) {\r\n      return NextResponse.json(\r\n        { error: 'Token não fornecido' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Validate token and get proposal\r\n    const proposta = await validateTokenPublico(token)\r\n\r\n    if (!proposta) {\r\n      return NextResponse.json(\r\n        { error: 'Proposta não encontrada ou token expirado' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n\r\n    // Apply RBAC masking for client view\r\n    const userPermissions = getUserPermissions(undefined, false); // Cliente não tem permissões especiais\r\n    const context = getPropostaContext(proposta, true, userPermissions); // isClientView = true\r\n    const maskedProposta = applyRBACMasking(proposta, context);\r\n\r\n    return NextResponse.json(maskedProposta)\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching proposal:', error)\r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\client\\proposta\\[token]\\sign\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'aceiteTermos' is assigned a value but never used.","line":22,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3276,3279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3276,3279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\r\nimport { z } from 'zod'\r\nimport { db } from '@/server/db-temp'\r\nimport { StatusProposta } from '@/types/propostas'\r\nimport { validateTokenPublico } from '@/lib/services/proposta-token'\r\nimport emailService from '@/lib/services/emailService'\r\nimport { assinaturaClienteSchema } from '@/lib/validations/proposta'\r\n\r\nexport async function POST(\r\n  request: NextRequest,\r\n  { params }: { params: { token: string } }\r\n) {\r\n  try {\r\n    const token = params.token\r\n    const body = await request.json()\r\n    \r\n    // Validate request body\r\n    const { \r\n      assinaturaTipo, \r\n      assinaturaCliente, \r\n      assinaturaImagem, \r\n      aceiteTermos, \r\n      ip, \r\n      userAgent \r\n    } = assinaturaClienteSchema.parse(body)\r\n\r\n    // Validate token and find proposal\r\n    const proposta = await validateTokenPublico(token)\r\n\r\n    if (!proposta) {\r\n      return NextResponse.json(\r\n        { error: 'Proposta não encontrada ou token expirado' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n\r\n    if (proposta.status !== StatusProposta.ENVIADA) {\r\n      return NextResponse.json(\r\n        { error: 'Proposta não está disponível para assinatura' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Get client IP if not provided\r\n    const clientIp = ip || request.headers.get('x-forwarded-for') || \r\n                     request.headers.get('x-real-ip') || 'unknown'\r\n    const clientUserAgent = userAgent || request.headers.get('user-agent') || 'unknown'\r\n\r\n    // Update proposal with signature\r\n    const updatedProposta = await db.proposta.update({\r\n      where: { id: proposta.id },\r\n      data: {\r\n        status: StatusProposta.ASSINADA,\r\n        assinaturaTipo,\r\n        assinadoEm: new Date(),\r\n        assinaturaCliente,\r\n        assinaturaImagem: assinaturaTipo === 'CANVAS' ? assinaturaImagem : null,\r\n        assinaturaIp: clientIp,\r\n        assinaturaUserAgent: clientUserAgent,\r\n        updatedAt: new Date()\r\n      }\r\n    })\r\n\r\n    // Log the action\r\n    await db.propostaLog.create({\r\n      data: {\r\n        propostaId: proposta.id,\r\n        actorId: null, // System user for client signatures\r\n        action: 'SIGNED',\r\n        newJson: {\r\n          assinaturaTipo,\r\n          assinaturaCliente,\r\n          status: 'ASSINADA' \r\n        },\r\n        ip: clientIp,\r\n        userAgent: clientUserAgent,\r\n        createdAt: new Date()\r\n      }\r\n    })\r\n\r\n    // Send email notification\r\n    try {\r\n      await emailService.sendProposalSignedNotification(updatedProposta, assinaturaCliente)\r\n    } catch (emailError) {\r\n      console.error('Error sending email notification:', emailError)\r\n      // Don't fail the main operation if email fails\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Proposta assinada com sucesso',\r\n      proposta: {\r\n        id: updatedProposta.id,\r\n        numeroProposta: updatedProposta.numeroProposta,\r\n        status: updatedProposta.status,\r\n        assinadaEm: updatedProposta.assinadoEm\r\n      }\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('Error signing proposal:', error)\r\n\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Dados inválidos',\r\n          details: error.issues.map((e: any) => e.message)\r\n        },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\clientes\\[id]\\audit\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":16,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1049,1052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1049,1052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\r\nimport { requireClientePermission } from '@/lib/rbac'\r\nimport { clienteParamsSchema } from '@/lib/validations/cliente'\r\nimport { AuditService } from '@/services/auditService'\r\nimport { ZodError } from 'zod'\r\n\r\n/**\r\n * GET /api/clientes/[id]/audit - Obter histórico de auditoria do cliente\r\n */\r\nexport async function GET(\r\n  request: NextRequest,\r\n  ctx: { params: Promise<{ id: string }> }\r\n) {\r\n  try {\r\n    // Verificar permissão de leitura (ADMIN e GERENTE para auditoria)\r\n    const user = await requireClientePermission(request, 'canUpdate')\r\n    \r\n    // Validar parâmetros\r\n  const { id } = clienteParamsSchema.parse(await ctx.params)\r\n    \r\n    // Obter parâmetros de query\r\n    const { searchParams } = new URL(request.url)\r\n    const limit = Math.min(parseInt(searchParams.get('limit') || '50'), 100)\r\n    \r\n    // Buscar histórico\r\n    const history = await AuditService.getEntityHistory('Cliente', id, limit)\r\n    \r\n    // Formatar resposta\r\n    const data = history.map((entry: any) => ({\r\n      id: entry.id,\r\n      acao: entry.acao,\r\n      diff: entry.diff ? JSON.parse(entry.diff) : null,\r\n      timestamp: entry.timestamp.toISOString(),\r\n      usuario: {\r\n        id: entry.usuario.id,\r\n        nome: entry.usuario.nomeCompleto,\r\n        email: entry.usuario.email\r\n      }\r\n    }))\r\n    \r\n    return NextResponse.json({ data })\r\n    \r\n  } catch (error) {\r\n    console.error('[API] GET /api/clientes/[id]/audit error:', error)\r\n    \r\n    if (error instanceof ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Parâmetros inválidos', details: error.issues },\r\n        { status: 400 }\r\n      )\r\n    }\r\n    \r\n    if (error instanceof Error) {\r\n      if (error.message === 'UNAUTHENTICATED') {\r\n        return NextResponse.json(\r\n          { error: 'Não autenticado' },\r\n          { status: 401 }\r\n        )\r\n      }\r\n      if (error.message === 'FORBIDDEN') {\r\n        return NextResponse.json(\r\n          { error: 'Sem permissão para ver histórico de auditoria' },\r\n          { status: 403 }\r\n        )\r\n      }\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\clientes\\[id]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'checkEmailExists' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1777,1780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1777,1780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":184,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5145,5148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5145,5148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":330,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10331,10334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10331,10334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":330,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10346,10349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10346,10349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\r\nimport { prisma } from '@/server/db'\r\nimport { requireClientePermission, ClientePermissions } from '@/lib/rbac'\r\nimport { clienteUpdateSchema, clienteParamsSchema } from '@/lib/validations/cliente'\r\nimport { \r\n  sanitizeClienteInput, \r\n  encryptClienteData, \r\n  checkDocumentoExists, \r\n  checkEmailExists,\r\n  logClienteAudit,\r\n  calculateClienteDiff,\r\n  formatTelefone,\r\n  formatZipcode,\r\n  maskDocumento\r\n} from '@/lib/helpers/cliente'\r\nimport { decryptDoc } from '@/lib/crypto'\r\nimport { ZodError } from 'zod'\r\n\r\n/**\r\n * GET /api/clientes/[id] - Obter detalhes de um cliente\r\n */\r\nexport async function GET(\r\n  request: NextRequest,\r\n  ctx: { params: Promise<{ id: string }> }\r\n) {\r\n  try {\r\n    // Verificar permissão de leitura\r\n    const user = await requireClientePermission(request, 'canRead')\r\n    \r\n    // Validar parâmetros\r\n  const { id } = clienteParamsSchema.parse(await ctx.params)\r\n    \r\n    // Buscar cliente\r\n    const cliente = await prisma.cliente.findUnique({\r\n      where: { id },\r\n      select: {\r\n        id: true,\r\n        tipo: true,\r\n        nomeCompleto: true,\r\n        razaoSocial: true,\r\n        nomeFantasia: true,\r\n        email: true,\r\n        telefone: true,\r\n        nomeChave: true,\r\n        endereco1: true,\r\n        endereco2: true,\r\n        cidade: true,\r\n        estado: true,\r\n        zipcode: true,\r\n        status: true,\r\n        documentoEnc: true,\r\n        docLast4: true,\r\n        observacoes: true,\r\n        criadoEm: true,\r\n        atualizadoEm: true\r\n      }\r\n    })\r\n    \r\n    if (!cliente) {\r\n      return NextResponse.json(\r\n        { error: 'Cliente não encontrado' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n    \r\n    // Preparar resposta base\r\n    const response: any = {\r\n      id: cliente.id,\r\n      tipo: cliente.tipo,\r\n      nomeCompleto: cliente.nomeCompleto,\r\n      razaoSocial: cliente.razaoSocial,\r\n      nomeFantasia: cliente.nomeFantasia,\r\n      email: cliente.email,\r\n      telefone: formatTelefone(cliente.telefone || ''),\r\n      endereco1: cliente.endereco1,\r\n      endereco2: cliente.endereco2,\r\n      cidade: cliente.cidade,\r\n      estado: cliente.estado,\r\n      zipcode: formatZipcode(cliente.zipcode || ''),\r\n      observacoes: cliente.observacoes,\r\n      ativo: cliente.status === 'ATIVO',\r\n      documentoMasked: maskDocumento(cliente.docLast4 || '', cliente.tipo),\r\n      criadoEm: cliente.criadoEm.toISOString(),\r\n      atualizadoEm: cliente.atualizadoEm.toISOString()\r\n    }\r\n    \r\n    // Se usuário tem permissão para ver documentos, descriptografar\r\n    if (ClientePermissions.canViewDocuments(user.role) && cliente.documentoEnc) {\r\n      try {\r\n        response.documento = await decryptDoc(cliente.documentoEnc)\r\n      } catch (error) {\r\n        console.warn('Erro ao descriptografar documento:', error)\r\n        // Não falha a operação, apenas não retorna o documento\r\n      }\r\n    }\r\n    \r\n    return NextResponse.json(response)\r\n    \r\n  } catch (error) {\r\n    console.error('[API] GET /api/clientes/[id] error:', error)\r\n    \r\n    if (error instanceof ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Parâmetros inválidos', details: error.issues },\r\n        { status: 400 }\r\n      )\r\n    }\r\n    \r\n    if (error instanceof Error) {\r\n      if (error.message === 'UNAUTHENTICATED') {\r\n        return NextResponse.json(\r\n          { error: 'Não autenticado' },\r\n          { status: 401 }\r\n        )\r\n      }\r\n      if (error.message === 'FORBIDDEN') {\r\n        return NextResponse.json(\r\n          { error: 'Sem permissão para visualizar cliente' },\r\n          { status: 403 }\r\n        )\r\n      }\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * PUT /api/clientes/[id] - Atualizar cliente\r\n */\r\nexport async function PUT(\r\n  request: NextRequest,\r\n  ctx: { params: Promise<{ id: string }> }\r\n) {\r\n  try {\r\n    // Verificar permissão de atualização\r\n    const user = await requireClientePermission(request, 'canUpdate')\r\n    \r\n    // Validar parâmetros\r\n  const { id } = clienteParamsSchema.parse(await ctx.params)\r\n    \r\n    // Obter dados do body\r\n    const body = await request.json()\r\n    \r\n    // Validar dados\r\n    const validData = clienteUpdateSchema.parse(body)\r\n    \r\n    // Sanitizar entrada\r\n    const sanitizedData = sanitizeClienteInput(validData)\r\n    \r\n    // Buscar cliente atual\r\n    const clienteAtual = await prisma.cliente.findUnique({\r\n      where: { id },\r\n      select: {\r\n        id: true,\r\n        tipo: true,\r\n        nomeCompleto: true,\r\n        razaoSocial: true,\r\n        nomeFantasia: true,\r\n        email: true,\r\n        telefone: true,\r\n        endereco1: true,\r\n        endereco2: true,\r\n        cidade: true,\r\n        estado: true,\r\n        zipcode: true,\r\n        status: true,\r\n        docHash: true,\r\n        observacoes: true\r\n      }\r\n    })\r\n    \r\n    if (!clienteAtual) {\r\n      return NextResponse.json(\r\n        { error: 'Cliente não encontrado' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n    \r\n    // Preparar dados para atualização\r\n    const updateData: any = {}\r\n    \r\n    // Campos simples\r\n    const simpleFields = [\r\n      'nomeCompleto', 'razaoSocial', 'nomeFantasia', 'email', 'telefone',\r\n      'endereco1', 'endereco2', 'cidade', 'estado', 'zipcode', 'observacoes'\r\n    ]\r\n    \r\n    for (const field of simpleFields) {\r\n      if (field in sanitizedData && sanitizedData[field] !== undefined) {\r\n        updateData[field] = sanitizedData[field]\r\n      }\r\n    }\r\n    \r\n    // Atualizar nomeChave se nome/nome fantasia mudou\r\n    if (sanitizedData.nomeCompleto || sanitizedData.razaoSocial || sanitizedData.nomeFantasia) {\r\n      updateData.nomeChave = sanitizedData.nomeCompleto || sanitizedData.nomeFantasia || sanitizedData.razaoSocial || clienteAtual.nomeCompleto || clienteAtual.razaoSocial || ''\r\n    }\r\n    \r\n    // Atualizar status se fornecido\r\n    if ('ativo' in validData && validData.ativo !== undefined) {\r\n      updateData.status = validData.ativo ? 'ATIVO' : 'INATIVO'\r\n    }\r\n    \r\n    // Verificar unicidade de email se mudou\r\n    if (sanitizedData.email && sanitizedData.email !== clienteAtual.email) {\r\n      // Checar se já existe algum cliente (exceto o atual) com o mesmo email\r\n      const conflicting = await prisma.cliente.findFirst({\r\n        where: {\r\n          email: sanitizedData.email,\r\n          id: { not: id }\r\n        },\r\n        select: { id: true, status: true }\r\n      })\r\n\r\n      if (conflicting) {\r\n        if (conflicting.status === 'INATIVO') {\r\n          // Liberar o email renomeando o registro inativo com um sufixo único\r\n          const [local, domain] = sanitizedData.email.split('@')\r\n          const archivedEmail = `${local}+inativo-${conflicting.id}@${domain}`\r\n          await prisma.cliente.update({\r\n            where: { id: conflicting.id },\r\n            data: { email: archivedEmail }\r\n          })\r\n        } else {\r\n          return NextResponse.json(\r\n            { error: 'E-mail já cadastrado no sistema' },\r\n            { status: 400 }\r\n          )\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Verificar e criptografar documento se mudou (aceita ssn/itin/ein opcionais)\r\n    let documentoAtualizado: string | undefined\r\n    if (sanitizedData.documento) {\r\n      documentoAtualizado = sanitizedData.documento\r\n    } else {\r\n      // Consolidar a partir de campos específicos, se fornecidos\r\n      if (sanitizedData.ssn) documentoAtualizado = sanitizedData.ssn\r\n      else if (sanitizedData.itin) documentoAtualizado = sanitizedData.itin\r\n      else if (sanitizedData.ein) documentoAtualizado = sanitizedData.ein\r\n    }\r\n\r\n    if (documentoAtualizado) {\r\n      const documentoExists = await checkDocumentoExists(documentoAtualizado, id)\r\n      if (documentoExists) {\r\n        return NextResponse.json(\r\n          { error: 'Documento já cadastrado no sistema' },\r\n          { status: 400 }\r\n        )\r\n      }\r\n      \r\n      // Criptografar novo documento\r\n      const { documentoEnc, docLast4, docHash } = await encryptClienteData(\r\n        documentoAtualizado,\r\n        sanitizedData.tipo || clienteAtual.tipo\r\n      )\r\n      \r\n      updateData.documentoEnc = documentoEnc\r\n      updateData.docLast4 = docLast4\r\n      updateData.docHash = docHash\r\n    }\r\n    \r\n    // Atualizar no banco\r\n    const clienteAtualizado = await prisma.cliente.update({\r\n      where: { id },\r\n      data: updateData,\r\n      select: {\r\n        id: true,\r\n        tipo: true,\r\n        nomeCompleto: true,\r\n        razaoSocial: true,\r\n        nomeFantasia: true,\r\n        email: true,\r\n        telefone: true,\r\n        cidade: true,\r\n        estado: true,\r\n        zipcode: true,\r\n        docLast4: true,\r\n        status: true,\r\n        criadoEm: true,\r\n        atualizadoEm: true\r\n      }\r\n    })\r\n    \r\n    // Calcular diff para auditoria\r\n    const diff = calculateClienteDiff(\r\n      clienteAtual,\r\n      { ...sanitizedData, status: updateData.status }\r\n    )\r\n    \r\n    // Registrar auditoria se houve mudanças\r\n    if (Object.keys(diff).length > 0) {\r\n      await logClienteAudit(\r\n        id,\r\n        'UPDATE',\r\n        diff,\r\n        Number(user.id)\r\n      )\r\n    }\r\n    \r\n    // Formatar resposta\r\n    const response = {\r\n      id: clienteAtualizado.id,\r\n      tipo: clienteAtualizado.tipo,\r\n      nomeCompletoOuRazao: clienteAtualizado.tipo === 'PF' \r\n        ? (clienteAtualizado.nomeCompleto || 'Nome não informado')\r\n        : (clienteAtualizado.nomeFantasia || clienteAtualizado.razaoSocial || 'Razão social não informada'),\r\n      email: clienteAtualizado.email,\r\n      telefone: formatTelefone(clienteAtualizado.telefone || ''),\r\n      cidade: clienteAtualizado.cidade,\r\n      estado: clienteAtualizado.estado,\r\n      zipcode: formatZipcode(clienteAtualizado.zipcode || ''),\r\n      documentoMasked: maskDocumento(clienteAtualizado.docLast4 || '', clienteAtualizado.tipo),\r\n      ativo: clienteAtualizado.status === 'ATIVO',\r\n      criadoEm: clienteAtualizado.criadoEm.toISOString(),\r\n      atualizadoEm: clienteAtualizado.atualizadoEm.toISOString()\r\n    }\r\n    \r\n    return NextResponse.json(response)\r\n    \r\n  } catch (error) {\r\n    console.error('[API] PUT /api/clientes/[id] error:', error)\r\n\r\n    // Tratar violações de unicidade (P2002) com mensagens amigáveis\r\n    const anyErr: any = error as any\r\n    if (anyErr && typeof anyErr.code === 'string' && anyErr.code === 'P2002') {\r\n      const target = anyErr.meta?.target\r\n      let message = 'Dados duplicados'\r\n      if (Array.isArray(target)) {\r\n        if (target.includes('email')) message = 'E-mail já cadastrado no sistema'\r\n        else if (target.includes('docHash')) message = 'Documento já cadastrado no sistema'\r\n        else if (target.includes('nomeChave') && target.includes('telefone')) message = 'Já existe cliente com o mesmo nome e telefone'\r\n      } else if (typeof target === 'string') {\r\n        if (target.includes('email')) message = 'E-mail já cadastrado no sistema'\r\n        else if (target.includes('docHash')) message = 'Documento já cadastrado no sistema'\r\n        else if (target.includes('nomeChave') && target.includes('telefone')) message = 'Já existe cliente com o mesmo nome e telefone'\r\n      }\r\n      return NextResponse.json({ error: message }, { status: 400 })\r\n    }\r\n    \r\n  if (error instanceof ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Dados inválidos', details: error.issues },\r\n        { status: 400 }\r\n      )\r\n    }\r\n    \r\n    if (error instanceof Error) {\r\n      if (error.message === 'UNAUTHENTICATED') {\r\n        return NextResponse.json(\r\n          { error: 'Não autenticado' },\r\n          { status: 401 }\r\n        )\r\n      }\r\n      if (error.message === 'FORBIDDEN') {\r\n        return NextResponse.json(\r\n          { error: 'Sem permissão para atualizar cliente' },\r\n          { status: 403 }\r\n        )\r\n      }\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * DELETE /api/clientes/[id] - Inativar cliente (soft delete)\r\n */\r\nexport async function DELETE(\r\n  request: NextRequest,\r\n  ctx: { params: Promise<{ id: string }> }\r\n) {\r\n  try {\r\n    // Verificar permissão de deleção\r\n    const user = await requireClientePermission(request, 'canDelete')\r\n    \r\n    // Validar parâmetros\r\n  const { id } = clienteParamsSchema.parse(await ctx.params)\r\n    \r\n    // Buscar cliente\r\n    const cliente = await prisma.cliente.findUnique({\r\n      where: { id },\r\n      select: { id: true, status: true, nomeCompleto: true, razaoSocial: true }\r\n    })\r\n    \r\n    if (!cliente) {\r\n      return NextResponse.json(\r\n        { error: 'Cliente não encontrado' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n    \r\n    if (cliente.status === 'INATIVO') {\r\n      // Tornar idempotente: já está inativo, retornar 200\r\n      await logClienteAudit(\r\n        id,\r\n        'DELETE',\r\n        { status: { old: 'INATIVO', new: 'INATIVO' } },\r\n        Number(user.id)\r\n      )\r\n      return NextResponse.json({ \r\n        message: 'Cliente já estava inativo',\r\n        id\r\n      })\r\n    }\r\n    \r\n    // Inativar cliente\r\n    await prisma.cliente.update({\r\n      where: { id },\r\n      data: { status: 'INATIVO' }\r\n    })\r\n    \r\n    // Registrar auditoria\r\n    await logClienteAudit(\r\n      id,\r\n      'DELETE',\r\n      { status: { old: 'ATIVO', new: 'INATIVO' } },\r\n      Number(user.id)\r\n    )\r\n    \r\n    return NextResponse.json({ \r\n      message: 'Cliente inativado com sucesso',\r\n      id\r\n    })\r\n    \r\n  } catch (error) {\r\n    console.error('[API] DELETE /api/clientes/[id] error:', error)\r\n    \r\n    if (error instanceof ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Parâmetros inválidos', details: error.issues },\r\n        { status: 400 }\r\n      )\r\n    }\r\n    \r\n    if (error instanceof Error) {\r\n      if (error.message === 'UNAUTHENTICATED') {\r\n        return NextResponse.json(\r\n          { error: 'Não autenticado' },\r\n          { status: 401 }\r\n        )\r\n      }\r\n      if (error.message === 'FORBIDDEN') {\r\n        return NextResponse.json(\r\n          { error: 'Sem permissão para inativar cliente' },\r\n          { status: 403 }\r\n        )\r\n      }\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * PATCH /api/clientes/[id] - Alternar status (ativar/inativar)\r\n */\r\nexport async function PATCH(\r\n  request: NextRequest,\r\n  ctx: { params: Promise<{ id: string }> }\r\n) {\r\n  try {\r\n    // Verificar permissão de atualização\r\n    const user = await requireClientePermission(request, 'canUpdate')\r\n\r\n    // Validar parâmetros\r\n    const { id } = clienteParamsSchema.parse(await ctx.params)\r\n\r\n    // Obter body\r\n    const body = await request.json().catch(() => ({}))\r\n    const ativo = typeof body?.ativo === 'boolean' ? body.ativo : undefined\r\n    if (ativo === undefined) {\r\n      return NextResponse.json(\r\n        { error: 'Parâmetro \"ativo\" é obrigatório e deve ser booleano' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Buscar cliente atual\r\n    const clienteAtual = await prisma.cliente.findUnique({\r\n      where: { id },\r\n      select: { id: true, status: true }\r\n    })\r\n    if (!clienteAtual) {\r\n      return NextResponse.json(\r\n        { error: 'Cliente não encontrado' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n\r\n    const novoStatus = ativo ? 'ATIVO' : 'INATIVO'\r\n    if (clienteAtual.status === novoStatus) {\r\n      // Idempotente\r\n      return NextResponse.json({ id, ativo, message: 'Status já estava definido' })\r\n    }\r\n\r\n    // Atualizar\r\n    const atualizado = await prisma.cliente.update({\r\n      where: { id },\r\n      data: { status: novoStatus }\r\n    })\r\n\r\n    // Auditoria\r\n    await logClienteAudit(\r\n      id,\r\n      'UPDATE',\r\n      { status: { old: clienteAtual.status, new: novoStatus } },\r\n      Number(user.id)\r\n    )\r\n\r\n    return NextResponse.json({ id: atualizado.id, ativo: atualizado.status === 'ATIVO' })\r\n  } catch (error) {\r\n    console.error('[API] PATCH /api/clientes/[id] error:', error)\r\n    if (error instanceof ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Parâmetros inválidos', details: error.issues },\r\n        { status: 400 }\r\n      )\r\n    }\r\n    if (error instanceof Error) {\r\n      if (error.message === 'UNAUTHENTICATED') {\r\n        return NextResponse.json(\r\n          { error: 'Não autenticado' },\r\n          { status: 401 }\r\n        )\r\n      }\r\n      if (error.message === 'FORBIDDEN') {\r\n        return NextResponse.json(\r\n          { error: 'Sem permissão para atualizar status de cliente' },\r\n          { status: 403 }\r\n        )\r\n      }\r\n    }\r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\clientes\\bulk\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[580,583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[580,583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[603,606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[603,606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1655,1658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1655,1658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\r\nimport { prisma } from '@/server/db'\r\nimport { requireClientePermission } from '@/lib/rbac'\r\nimport { clienteFiltersSchema } from '@/lib/validations/cliente'\r\nimport { ZodError, z } from 'zod'\r\n\r\nexport const runtime = 'nodejs'\r\n\r\nconst bulkSchema = z.object({\r\n  action: z.enum(['activate', 'deactivate', 'delete']),\r\n  scope: z.enum(['selected', 'allFiltered']),\r\n  ids: z.array(z.number().int().positive()).optional(),\r\n  filters: clienteFiltersSchema.partial().optional()\r\n})\r\n\r\nfunction buildWhereFromFilters(filters: any) {\r\n  const where: any = {}\r\n  if (filters?.q && String(filters.q).trim()) {\r\n    const q = String(filters.q).trim()\r\n    where.OR = [\r\n      { nomeCompleto: { contains: q, mode: 'insensitive' } },\r\n      { razaoSocial: { contains: q, mode: 'insensitive' } },\r\n      { nomeFantasia: { contains: q, mode: 'insensitive' } },\r\n      { email: { contains: q, mode: 'insensitive' } },\r\n      { docLast4: { contains: q } }\r\n    ]\r\n  }\r\n  if (filters?.tipo && filters.tipo !== 'all') {\r\n    where.tipo = filters.tipo\r\n  }\r\n  if (filters?.ativo !== undefined && filters.ativo !== 'all') {\r\n    where.status = filters.ativo ? 'ATIVO' : 'INATIVO'\r\n  }\r\n  return where\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json().catch(() => ({}))\r\n    const { action, scope, ids, filters } = bulkSchema.parse(body)\r\n\r\n    // Permission per action\r\n    if (action === 'delete') {\r\n      await requireClientePermission(request, 'canDelete')\r\n    } else {\r\n      await requireClientePermission(request, 'canUpdate')\r\n    }\r\n\r\n    let where: any = {}\r\n    if (scope === 'selected') {\r\n      if (!ids || ids.length === 0) {\r\n        return NextResponse.json({ error: 'Nenhum ID informado' }, { status: 400 })\r\n      }\r\n      where.id = { in: ids }\r\n    } else {\r\n      where = buildWhereFromFilters(filters || {})\r\n    }\r\n\r\n    let count = 0\r\n    if (action === 'activate' || action === 'deactivate') {\r\n      const res = await prisma.cliente.updateMany({\r\n        where,\r\n        data: { status: action === 'activate' ? 'ATIVO' : 'INATIVO' }\r\n      })\r\n      count = res.count\r\n    } else if (action === 'delete') {\r\n      const res = await prisma.cliente.deleteMany({ where })\r\n      count = res.count\r\n    }\r\n\r\n    return NextResponse.json({ processed: count })\r\n  } catch (error) {\r\n    console.error('[API] POST /api/clientes/bulk error:', error)\r\n    if (error instanceof ZodError) {\r\n      return NextResponse.json({ error: 'Dados inválidos', details: error.issues }, { status: 400 })\r\n    }\r\n    if (error instanceof Error) {\r\n      if (error.message === 'UNAUTHENTICATED') return NextResponse.json({ error: 'Não autenticado' }, { status: 401 })\r\n      if (error.message === 'FORBIDDEN') return NextResponse.json({ error: 'Sem permissão' }, { status: 403 })\r\n    }\r\n    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 })\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\clientes\\export\\csv\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[192,195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[192,195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[215,218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[215,218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1074,1077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1074,1077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2777,2780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2777,2780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\r\nimport { prisma } from '@/server/db'\r\nimport { clienteFiltersSchema } from '@/lib/validations/cliente'\r\n\r\nfunction buildWhere(filters: any) {\r\n  const where: any = {}\r\n  if (filters?.q && String(filters.q).trim()) {\r\n    const q = String(filters.q).trim()\r\n    where.OR = [\r\n      { nomeCompleto: { contains: q, mode: 'insensitive' } },\r\n      { razaoSocial: { contains: q, mode: 'insensitive' } },\r\n      { nomeFantasia: { contains: q, mode: 'insensitive' } },\r\n      { email: { contains: q, mode: 'insensitive' } },\r\n      { docLast4: { contains: q } },\r\n    ]\r\n  }\r\n  if (filters?.tipo && filters.tipo !== 'all') where.tipo = filters.tipo\r\n  if (filters?.ativo !== undefined && filters.ativo !== 'all') where.status = filters.ativo ? 'ATIVO' : 'INATIVO'\r\n  return where\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const raw = await request.json().catch(() => ({}))\r\n    const filename = typeof raw?.filename === 'string' && raw.filename.trim() ? raw.filename : 'clientes'\r\n    let rows: any[] = Array.isArray(raw?.clientes) ? raw.clientes : []\r\n\r\n    if (!rows.length && raw?.filters) {\r\n      const parsed = clienteFiltersSchema.partial().parse(raw.filters)\r\n      const where = buildWhere(parsed)\r\n      rows = await prisma.cliente.findMany({\r\n        where,\r\n        select: {\r\n          id: true,\r\n          tipo: true,\r\n          nomeCompleto: true,\r\n          razaoSocial: true,\r\n          nomeFantasia: true,\r\n          email: true,\r\n          telefone: true,\r\n          cidade: true,\r\n          estado: true,\r\n          status: true,\r\n          criadoEm: true,\r\n        },\r\n        orderBy: [{ status: 'desc' }, { atualizadoEm: 'desc' }],\r\n      })\r\n      rows = rows.map((c) => ({\r\n        id: c.id,\r\n        nomeCompletoOuRazao: c.tipo === 'PF' ? (c.nomeCompleto || '') : (c.nomeFantasia || c.razaoSocial || ''),\r\n        tipo: c.tipo,\r\n        email: c.email,\r\n        telefone: c.telefone,\r\n        cidade: c.cidade,\r\n        estado: c.estado,\r\n        ativo: c.status === 'ATIVO',\r\n        criadoEm: c.criadoEm.toISOString(),\r\n      }))\r\n    }\r\n\r\n    if (!rows.length) {\r\n      return NextResponse.json({ message: 'Nenhum cliente para exportar' }, { status: 400 })\r\n    }\r\n\r\n    const headers = ['ID', 'Nome/Empresa', 'Tipo', 'E-mail', 'Telefone', 'Cidade', 'Estado', 'Status', 'Criado Em']\r\n    const lines = [\r\n      headers.join(','),\r\n      ...rows.map((c) => [\r\n        c.id,\r\n        c.nomeCompletoOuRazao || '',\r\n        c.tipo || '',\r\n        c.email || '',\r\n        c.telefone || '',\r\n        c.cidade || '',\r\n        c.estado || '',\r\n        c.ativo ? 'Ativo' : 'Inativo',\r\n        c.criadoEm ? new Date(c.criadoEm).toLocaleDateString('pt-BR') : '',\r\n      ].map((f: any) => `\"${String(f).replace(/\"/g, '\"\"')}\"`).join(','))\r\n    ]\r\n    const csv = lines.join('\\n')\r\n\r\n    return new NextResponse(csv, {\r\n      headers: {\r\n        'Content-Type': 'text/csv;charset=utf-8',\r\n        'Content-Disposition': `attachment; filename=\"${filename}.csv\"`,\r\n      },\r\n    })\r\n  } catch (e) {\r\n    console.error('Erro ao gerar CSV de clientes:', e)\r\n    return NextResponse.json({ message: 'Erro interno do servidor' }, { status: 500 })\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\clientes\\export\\pdf\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[466,469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[466,469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[489,492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[489,492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\r\nimport jsPDF from \"jspdf\";\r\nimport { prisma } from \"@/server/db\";\r\nimport { clienteFiltersSchema } from \"@/lib/validations/cliente\";\r\n\r\ntype ClientePayload = {\r\n  id: number;\r\n  nomeCompletoOuRazao: string;\r\n  email: string;\r\n  tipo: 'PF' | 'PJ';\r\n  telefone?: string | null;\r\n  cidade?: string | null;\r\n  estado?: string | null;\r\n  ativo?: boolean;\r\n  criadoEm?: string;\r\n};\r\n\r\nfunction buildWhere(filters: any) {\r\n  const where: any = {};\r\n  if (filters?.q && String(filters.q).trim()) {\r\n    const searchTerm = String(filters.q).trim();\r\n    where.OR = [\r\n      { nomeCompleto: { contains: searchTerm, mode: 'insensitive' } },\r\n      { razaoSocial: { contains: searchTerm, mode: 'insensitive' } },\r\n      { nomeFantasia: { contains: searchTerm, mode: 'insensitive' } },\r\n      { email: { contains: searchTerm, mode: 'insensitive' } },\r\n      { docLast4: { contains: searchTerm } }\r\n    ];\r\n  }\r\n  if (filters?.tipo && filters.tipo !== 'all') where.tipo = filters.tipo;\r\n  if (filters?.ativo !== undefined && filters.ativo !== 'all') where.status = filters.ativo ? 'ATIVO' : 'INATIVO';\r\n  return where;\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const raw = await request.json().catch(() => ({}));\r\n    const filename = typeof raw?.filename === 'string' && raw.filename.trim() ? raw.filename : 'clientes';\r\n    let clientes: ClientePayload[] = Array.isArray(raw?.clientes) ? raw.clientes : [];\r\n\r\n    // If filters provided, fetch server-side\r\n    if (!clientes.length && raw?.filters) {\r\n      const parsed = clienteFiltersSchema.partial().parse(raw.filters);\r\n      const where = buildWhere(parsed);\r\n      const rows = await prisma.cliente.findMany({\r\n        where,\r\n        select: {\r\n          id: true,\r\n          tipo: true,\r\n          nomeCompleto: true,\r\n          razaoSocial: true,\r\n          nomeFantasia: true,\r\n          email: true,\r\n          telefone: true,\r\n          cidade: true,\r\n          estado: true,\r\n          status: true,\r\n          criadoEm: true\r\n        },\r\n        orderBy: [{ status: 'desc' }, { atualizadoEm: 'desc' }]\r\n      });\r\n      clientes = rows.map(r => ({\r\n        id: r.id,\r\n        nomeCompletoOuRazao: r.tipo === 'PF' ? (r.nomeCompleto || '') : (r.nomeFantasia || r.razaoSocial || ''),\r\n        email: r.email,\r\n        tipo: r.tipo,\r\n        telefone: r.telefone,\r\n        cidade: r.cidade || undefined,\r\n        estado: r.estado || undefined,\r\n        ativo: r.status === 'ATIVO',\r\n        criadoEm: r.criadoEm.toISOString()\r\n      }));\r\n    }\r\n\r\n    if (!clientes.length) return NextResponse.json({ message: 'Nenhum cliente para exportar' }, { status: 400 });\r\n\r\n    const doc = new jsPDF();\r\n    doc.setFont('helvetica');\r\n    doc.setFontSize(16);\r\n    doc.text('Relatório de Clientes', 20, 20);\r\n    doc.setFontSize(10);\r\n    doc.text(`Gerado em: ${new Date().toLocaleDateString('pt-BR')} às ${new Date().toLocaleTimeString('pt-BR')}`, 20, 30);\r\n    doc.text(`Total de clientes: ${clientes.length}`, 20, 35);\r\n\r\n    let y = 50;\r\n    const lineHeight = 6;\r\n    doc.setFontSize(8);\r\n    doc.setFont('helvetica', 'bold');\r\n    doc.text('Nome/Empresa', 20, y);\r\n    doc.text('Tipo', 80, y);\r\n    doc.text('E-mail', 100, y);\r\n    doc.text('Telefone', 150, y);\r\n    doc.text('Status', 180, y);\r\n    y += lineHeight;\r\n    doc.line(20, y, 190, y);\r\n    y += 3;\r\n\r\n    doc.setFont('helvetica', 'normal');\r\n    clientes.forEach((c) => {\r\n      if (y > 270) {\r\n        doc.addPage();\r\n        y = 20;\r\n      }\r\n      const nome = (c.nomeCompletoOuRazao || '').substring(0, 40);\r\n      const tipo = c.tipo || '';\r\n      const email = (c.email || '').substring(0, 30);\r\n      const tel = (c.telefone || '')?.substring(0, 18);\r\n      const status = c.ativo ? 'Ativo' : 'Inativo';\r\n      doc.text(nome, 20, y);\r\n      doc.text(tipo, 80, y);\r\n      doc.text(email, 100, y);\r\n      doc.text(tel, 150, y);\r\n      doc.text(status, 180, y);\r\n      y += lineHeight;\r\n    });\r\n\r\n  const pdfBuffer = Buffer.from(doc.output('arraybuffer'));\r\n    return new NextResponse(pdfBuffer, {\r\n      headers: {\r\n        'Content-Type': 'application/pdf',\r\n        'Content-Disposition': `attachment; filename=\"${filename}.pdf\"`,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Erro ao gerar PDF de clientes:', error);\r\n    return NextResponse.json({ message: 'Erro interno do servidor' }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\clientes\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'checkEmailExists' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getClienteDisplayName' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":26,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1089,1092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1089,1092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2005,2008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2005,2008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\r\nimport { prisma } from '@/server/db'\r\nimport { requireClientePermission } from '@/lib/rbac'\r\nimport { clienteFiltersSchema, clienteCreateSchema } from '@/lib/validations/cliente'\r\nimport { \r\n  sanitizeClienteInput, \r\n  encryptClienteData, \r\n  checkDocumentoExists, \r\n  checkEmailExists,\r\n  logClienteAudit,\r\n  getClienteDisplayName,\r\n  maskDocumento,\r\n  formatTelefone,\r\n  formatZipcode\r\n} from '@/lib/helpers/cliente'\r\nimport { ZodError } from 'zod'\r\n\r\nexport const runtime = \"nodejs\"\r\n\r\n/**\r\n * GET /api/clientes - Lista clientes com filtros e paginação\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Verificar permissão de leitura\r\n    const user = await requireClientePermission(request, 'canRead')\r\n    \r\n    // Obter parâmetros da URL\r\n    const { searchParams } = new URL(request.url)\r\n    const queryParams = Object.fromEntries(searchParams.entries())\r\n    \r\n    // Validar filtros\r\n    const filters = clienteFiltersSchema.parse(queryParams)\r\n    \r\n    // Construir where clause\r\n    const where: any = {}\r\n    \r\n    // Filtro por busca (nome, email, documento)\r\n    if (filters.q && filters.q.trim()) {\r\n      const searchTerm = filters.q.trim()\r\n      where.OR = [\r\n        { nomeCompleto: { contains: searchTerm, mode: 'insensitive' } },\r\n        { razaoSocial: { contains: searchTerm, mode: 'insensitive' } },\r\n        { nomeFantasia: { contains: searchTerm, mode: 'insensitive' } },\r\n        { email: { contains: searchTerm, mode: 'insensitive' } },\r\n        { docLast4: { contains: searchTerm } }\r\n      ]\r\n    }\r\n    \r\n    // Filtro por tipo\r\n    if (filters.tipo && filters.tipo !== 'all') {\r\n      where.tipo = filters.tipo\r\n    }\r\n    \r\n    // Filtro por ativo\r\n    if (filters.ativo !== 'all') {\r\n      where.status = filters.ativo ? 'ATIVO' : 'INATIVO'\r\n    }\r\n    \r\n    // Calcular offset\r\n    const offset = (filters.page - 1) * filters.pageSize\r\n    \r\n    // Ordenação dinâmica\r\n    const orderBy: any[] = []\r\n    // status first unless explicit sort by status provided\r\n    if (filters.sortKey !== 'status') {\r\n      orderBy.push({ status: 'desc' })\r\n    }\r\n    if (filters.sortKey) {\r\n      const dir = filters.sortDir === 'asc' ? 'asc' : 'desc'\r\n      switch (filters.sortKey) {\r\n        case 'nome':\r\n          // nomeChave já consolidado\r\n          orderBy.push({ nomeChave: dir })\r\n          break\r\n        case 'tipo':\r\n          orderBy.push({ tipo: dir })\r\n          break\r\n        case 'email':\r\n          orderBy.push({ email: dir })\r\n          break\r\n        case 'telefone':\r\n          orderBy.push({ telefone: dir })\r\n          break\r\n        case 'documento':\r\n          orderBy.push({ docLast4: dir })\r\n          break\r\n        case 'cidadeEstado':\r\n          // ordenar por estado depois cidade para efeito previsível\r\n          orderBy.push({ estado: dir })\r\n          orderBy.push({ cidade: dir })\r\n          break\r\n        case 'status':\r\n          orderBy.push({ status: dir })\r\n          break\r\n      }\r\n    } else {\r\n      // fallback padrão anterior\r\n      orderBy.push({ atualizadoEm: 'desc' })\r\n    }\r\n\r\n    // Executar queries em paralelo\r\n    const [clientes, total] = await Promise.all([\r\n      prisma.cliente.findMany({\r\n        where,\r\n        select: {\r\n          id: true,\r\n          tipo: true,\r\n          nomeCompleto: true,\r\n          razaoSocial: true,\r\n          nomeFantasia: true,\r\n          email: true,\r\n          telefone: true,\r\n          cidade: true,\r\n          estado: true,\r\n          zipcode: true,\r\n          docLast4: true,\r\n          status: true,\r\n          criadoEm: true,\r\n          atualizadoEm: true\r\n        },\r\n        orderBy,\r\n        take: filters.pageSize,\r\n        skip: offset\r\n      }),\r\n      prisma.cliente.count({ where })\r\n    ])\r\n    \r\n    // Formatar resposta\r\n    const data = clientes.map(cliente => ({\r\n      id: cliente.id,\r\n      tipo: cliente.tipo,\r\n      nomeCompletoOuRazao: cliente.tipo === 'PF' \r\n        ? (cliente.nomeCompleto || 'Nome não informado')\r\n        : (cliente.nomeFantasia || cliente.razaoSocial || 'Razão social não informada'),\r\n      email: cliente.email,\r\n      telefone: formatTelefone(cliente.telefone || ''),\r\n      cidade: cliente.cidade,\r\n      estado: cliente.estado,\r\n      zipcode: formatZipcode(cliente.zipcode || ''),\r\n      documentoMasked: maskDocumento(cliente.docLast4 || '', cliente.tipo),\r\n      ativo: cliente.status === 'ATIVO',\r\n      criadoEm: cliente.criadoEm.toISOString(),\r\n      atualizadoEm: cliente.atualizadoEm.toISOString()\r\n    }))\r\n    \r\n    const totalPages = Math.ceil(total / filters.pageSize)\r\n    \r\n    return NextResponse.json({\r\n      data,\r\n      page: filters.page,\r\n      pageSize: filters.pageSize,\r\n      total,\r\n      totalPages\r\n    })\r\n    \r\n  } catch (error) {\r\n    console.error('[API] GET /api/clientes error:', error)\r\n    \r\n    if (error instanceof ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Parâmetros inválidos', details: error.issues },\r\n        { status: 400 }\r\n      )\r\n    }\r\n    \r\n    if (error instanceof Error) {\r\n      if (error.message === 'UNAUTHENTICATED') {\r\n        return NextResponse.json(\r\n          { error: 'Não autenticado' },\r\n          { status: 401 }\r\n        )\r\n      }\r\n      if (error.message === 'FORBIDDEN') {\r\n        return NextResponse.json(\r\n          { error: 'Sem permissão para listar clientes' },\r\n          { status: 403 }\r\n        )\r\n      }\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/clientes - Criar novo cliente\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verificar permissão de criação\r\n    const user = await requireClientePermission(request, 'canCreate')\r\n    \r\n    // Obter dados do body\r\n    const body = await request.json()\r\n    \r\n    // Validar dados\r\n  const validData = clienteCreateSchema.parse(body)\r\n    \r\n    // Sanitizar entrada\r\n    const sanitizedData = sanitizeClienteInput(validData)\r\n\r\n    // Consolidar documento principal (opcional) a partir de ssn/itin/ein\r\n    let documentoPlano: string | null = null\r\n    if (sanitizedData.tipo === 'PF') {\r\n      if (sanitizedData.tipoDocumentoPF === 'SSN' && sanitizedData.ssn) documentoPlano = sanitizedData.ssn\r\n      if (sanitizedData.tipoDocumentoPF === 'ITIN' && sanitizedData.itin) documentoPlano = sanitizedData.itin\r\n    } else if (sanitizedData.tipo === 'PJ') {\r\n      if (sanitizedData.ein) documentoPlano = sanitizedData.ein\r\n    }\r\n    \r\n    // Verificar se documento já existe\r\n    if (documentoPlano) {\r\n      const documentoExists = await checkDocumentoExists(documentoPlano)\r\n      if (documentoExists) {\r\n        return NextResponse.json(\r\n          { error: 'Documento já cadastrado no sistema' },\r\n          { status: 400 }\r\n        )\r\n      }\r\n    }\r\n    \r\n    // Verificar se já existe cliente com mesmo email\r\n    const existingByEmail = await prisma.cliente.findFirst({\r\n      where: { email: sanitizedData.email },\r\n      select: {\r\n        id: true,\r\n        status: true,\r\n        tipo: true\r\n      }\r\n    })\r\n    \r\n    // Caso exista cliente inativo com o mesmo e-mail, reativar e atualizar dados\r\n    if (existingByEmail && existingByEmail.status === 'INATIVO') {\r\n      // Verificar documento opcional sem bloquear pelo mesmo registro\r\n      if (documentoPlano) {\r\n        const documentoExists = await checkDocumentoExists(documentoPlano, existingByEmail.id)\r\n        if (documentoExists) {\r\n          return NextResponse.json(\r\n            { error: 'Documento já cadastrado no sistema' },\r\n            { status: 400 }\r\n          )\r\n        }\r\n      }\r\n\r\n      let documentoEnc: string | null = null\r\n      let docLast4: string | null = null\r\n      let docHash: string | null = null\r\n      if (documentoPlano) {\r\n        const enc = await encryptClienteData(documentoPlano, sanitizedData.tipo)\r\n        documentoEnc = enc.documentoEnc\r\n        docLast4 = enc.docLast4\r\n        docHash = enc.docHash\r\n      }\r\n\r\n      const cliente = await prisma.cliente.update({\r\n        where: { id: existingByEmail.id },\r\n        data: {\r\n          tipo: sanitizedData.tipo,\r\n          nomeCompleto: sanitizedData.nomeCompleto,\r\n          razaoSocial: sanitizedData.razaoSocial,\r\n          nomeFantasia: sanitizedData.nomeFantasia,\r\n          telefone: sanitizedData.telefone,\r\n          nomeChave: sanitizedData.tipo === 'PF'\r\n            ? (sanitizedData.nomeCompleto || '')\r\n            : (sanitizedData.nomeFantasia || sanitizedData.razaoSocial || ''),\r\n          documentoEnc: documentoEnc ?? undefined,\r\n          docLast4: docLast4 ?? undefined,\r\n          docHash: docHash ?? undefined,\r\n          endereco1: sanitizedData.endereco1,\r\n          endereco2: sanitizedData.endereco2,\r\n          cidade: sanitizedData.cidade,\r\n          estado: sanitizedData.estado,\r\n          zipcode: sanitizedData.zipcode,\r\n          observacoes: sanitizedData.observacoes,\r\n          status: 'ATIVO'\r\n        },\r\n        select: {\r\n          id: true,\r\n          tipo: true,\r\n          nomeCompleto: true,\r\n          razaoSocial: true,\r\n          nomeFantasia: true,\r\n          email: true,\r\n          telefone: true,\r\n          cidade: true,\r\n          estado: true,\r\n          zipcode: true,\r\n          docLast4: true,\r\n          status: true,\r\n          criadoEm: true,\r\n          atualizadoEm: true\r\n        }\r\n      })\r\n\r\n      await logClienteAudit(\r\n        cliente.id,\r\n        'UPDATE',\r\n        { status: { old: 'INATIVO', new: 'ATIVO' } },\r\n        Number(user.id)\r\n      )\r\n\r\n      const response = {\r\n        id: cliente.id,\r\n        tipo: cliente.tipo,\r\n        nomeCompletoOuRazao: cliente.tipo === 'PF'\r\n          ? (cliente.nomeCompleto || 'Nome não informado')\r\n          : (cliente.nomeFantasia || cliente.razaoSocial || 'Razão social não informada'),\r\n        email: cliente.email,\r\n        telefone: formatTelefone(cliente.telefone || ''),\r\n        cidade: cliente.cidade,\r\n        estado: cliente.estado,\r\n        zipcode: formatZipcode(cliente.zipcode || ''),\r\n        documentoMasked: maskDocumento(cliente.docLast4 || '', cliente.tipo),\r\n        ativo: cliente.status === 'ATIVO',\r\n        criadoEm: cliente.criadoEm.toISOString(),\r\n        atualizadoEm: cliente.atualizadoEm.toISOString()\r\n      }\r\n      return NextResponse.json(response, { status: 200 })\r\n    }\r\n\r\n    // Se já existir e estiver ATIVO, bloquear\r\n    if (existingByEmail) {\r\n      return NextResponse.json(\r\n        { error: 'E-mail já cadastrado no sistema' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Criptografar documento para novo cliente\r\n    let documentoEnc: string | null = null\r\n    let docLast4: string | null = null\r\n    let docHash: string | null = null\r\n    if (documentoPlano) {\r\n      const enc = await encryptClienteData(documentoPlano, sanitizedData.tipo)\r\n      documentoEnc = enc.documentoEnc\r\n      docLast4 = enc.docLast4\r\n      docHash = enc.docHash\r\n    }\r\n\r\n    // Criar cliente\r\n    const cliente = await prisma.cliente.create({\r\n      data: {\r\n        tipo: sanitizedData.tipo,\r\n        nomeCompleto: sanitizedData.nomeCompleto,\r\n        razaoSocial: sanitizedData.razaoSocial,\r\n        nomeFantasia: sanitizedData.nomeFantasia,\r\n        email: sanitizedData.email,\r\n        telefone: sanitizedData.telefone,\r\n        nomeChave: sanitizedData.tipo === 'PF' \r\n          ? (sanitizedData.nomeCompleto || '')\r\n          : (sanitizedData.nomeFantasia || sanitizedData.razaoSocial || ''),\r\n        documentoEnc,\r\n        docLast4: docLast4 || undefined,\r\n        docHash: docHash || undefined,\r\n        endereco1: sanitizedData.endereco1,\r\n        endereco2: sanitizedData.endereco2,\r\n        cidade: sanitizedData.cidade,\r\n        estado: sanitizedData.estado,\r\n        zipcode: sanitizedData.zipcode,\r\n        observacoes: sanitizedData.observacoes,\r\n        status: 'ATIVO'\r\n      },\r\n      select: {\r\n        id: true,\r\n        tipo: true,\r\n        nomeCompleto: true,\r\n        razaoSocial: true,\r\n        nomeFantasia: true,\r\n        email: true,\r\n        telefone: true,\r\n        cidade: true,\r\n        estado: true,\r\n        zipcode: true,\r\n        docLast4: true,\r\n        status: true,\r\n        criadoEm: true,\r\n        atualizadoEm: true\r\n      }\r\n    })\r\n    \r\n    // Registrar auditoria\r\n    await logClienteAudit(\r\n      cliente.id,\r\n      'CREATE',\r\n      { ...sanitizedData, documento: '[DOCUMENTO]' }, // Não logar documento real\r\n      Number(user.id)\r\n    )\r\n    \r\n    // Formatar resposta\r\n    const response = {\r\n      id: cliente.id,\r\n      tipo: cliente.tipo,\r\n      nomeCompletoOuRazao: cliente.tipo === 'PF' \r\n        ? (cliente.nomeCompleto || 'Nome não informado')\r\n        : (cliente.nomeFantasia || cliente.razaoSocial || 'Razão social não informada'),\r\n      email: cliente.email,\r\n      telefone: formatTelefone(cliente.telefone || ''),\r\n      cidade: cliente.cidade,\r\n      estado: cliente.estado,\r\n      zipcode: formatZipcode(cliente.zipcode || ''),\r\n      documentoMasked: maskDocumento(cliente.docLast4 || '', cliente.tipo),\r\n      ativo: cliente.status === 'ATIVO',\r\n      criadoEm: cliente.criadoEm.toISOString(),\r\n      atualizadoEm: cliente.atualizadoEm.toISOString()\r\n    }\r\n    \r\n    return NextResponse.json(response, { status: 201 })\r\n    \r\n  } catch (error) {\r\n    console.error('[API] POST /api/clientes error:', error)\r\n    \r\n    if (error instanceof ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Dados inválidos', details: error.issues },\r\n        { status: 400 }\r\n      )\r\n    }\r\n    \r\n    if (error instanceof Error) {\r\n      if (error.message === 'UNAUTHENTICATED') {\r\n        return NextResponse.json(\r\n          { error: 'Não autenticado' },\r\n          { status: 401 }\r\n        )\r\n      }\r\n      if (error.message === 'FORBIDDEN') {\r\n        return NextResponse.json(\r\n          { error: 'Sem permissão para criar clientes' },\r\n          { status: 403 }\r\n        )\r\n      }\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\debug\\make-token\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\dev\\create-test-user\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\dev\\last-mail\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\notifications\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\notifications\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\propostas\\[id]\\assinatura\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2131,2134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2131,2134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\r\nimport { z } from 'zod'\r\nimport { db } from '@/server/db-temp'\r\n\r\nconst signatureSchema = z.object({\r\n  assinaturaTipo: z.enum(['DIGITAL_DESENHADA', 'DIGITAL_NOME']),\r\n  assinaturaNome: z.string().min(1, 'Nome da assinatura é obrigatório'),\r\n  assinaturaImagem: z.string().optional(),\r\n  observacoes: z.string().optional(),\r\n  consentimento: z.boolean(),\r\n  termosAceitos: z.boolean()\r\n})\r\n\r\n/**\r\n * API para processar assinatura digital de proposta\r\n * POST /api/propostas/[id]/assinatura\r\n */\r\nexport async function POST(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const propostaId = params.id\r\n    const body = await request.json()\r\n    \r\n    // Validar dados\r\n    const validatedData = signatureSchema.parse(body)\r\n    \r\n    if (!validatedData.consentimento) {\r\n      return NextResponse.json(\r\n        { error: 'Consentimento é obrigatório' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    if (!validatedData.termosAceitos) {\r\n      return NextResponse.json(\r\n        { error: 'Aceitação dos termos é obrigatória' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Verificar se proposta existe\r\n    const proposta = await db.proposta.findUnique({\r\n      where: { id: propostaId }\r\n    })\r\n\r\n    if (!proposta) {\r\n      return NextResponse.json(\r\n        { error: 'Proposta não encontrada' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n\r\n    // Verificar se já está assinada\r\n    if (proposta.assinadoEm) {\r\n      return NextResponse.json(\r\n        { error: 'Proposta já está assinada' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Obter informações de auditoria\r\n    const userAgent = request.headers.get('user-agent') || 'Unknown'\r\n    const forwardedFor = request.headers.get('x-forwarded-for')\r\n    const realIp = request.headers.get('x-real-ip')\r\n    const clientIp = forwardedFor || realIp || 'Unknown'\r\n\r\n    // Atualizar proposta com assinatura\r\n    const updatedProposta = await db.proposta.update({\r\n      where: { id: propostaId },\r\n      data: {\r\n        assinaturaTipo: validatedData.assinaturaTipo as any, // TipoAssinatura enum\r\n        assinaturaNome: validatedData.assinaturaNome,\r\n        assinaturaImagem: validatedData.assinaturaImagem,\r\n        assinaturaIp: clientIp,\r\n        assinaturaUserAgent: userAgent,\r\n        assinadoEm: new Date(),\r\n        status: 'AGUARDANDO_APROVACAO',\r\n        observacoesAssinatura: validatedData.observacoes\r\n      },\r\n      include: {\r\n        cliente: {\r\n          select: {\r\n            nome: true,\r\n            email: true\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    // Log da assinatura para auditoria\r\n    console.log(`[ASSINATURA] Proposta ${proposta.numeroProposta} assinada:`, {\r\n      tipo: validatedData.assinaturaTipo,\r\n      nome: validatedData.assinaturaNome,\r\n      ip: clientIp,\r\n      userAgent: userAgent,\r\n      timestamp: new Date().toISOString()\r\n    })\r\n\r\n    // Resposta de sucesso\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Assinatura processada com sucesso',\r\n      proposta: {\r\n        id: updatedProposta.id,\r\n        numeroProposta: updatedProposta.numeroProposta,\r\n        status: updatedProposta.status,\r\n        assinadoEm: updatedProposta.assinadoEm,\r\n        assinaturaTipo: updatedProposta.assinaturaTipo,\r\n        assinaturaNome: updatedProposta.assinaturaNome\r\n      }\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('[ASSINATURA] Erro:', error)\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Dados inválidos',\r\n          details: error.issues\r\n        },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\propostas\\[id]\\cancel\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1064,1067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1064,1067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\r\nimport { db } from '@/server/db-temp'\r\nimport { AcaoPropostaLog, StatusProposta } from '@/types/propostas'\r\n\r\ninterface RouteParams {\r\n  params: {\r\n    id: string\r\n  }\r\n}\r\n\r\n// POST /api/propostas/[id]/cancel - Cancel proposta\r\nexport async function POST(request: NextRequest, { params }: RouteParams) {\r\n  try {\r\n    const { id } = params\r\n    const body = await request.json()\r\n    const { motivo } = body\r\n\r\n    // Check if proposta exists and can be cancelled\r\n    const existingProposta = await db.proposta.findFirst({\r\n      where: {\r\n        id,\r\n        deletedAt: null,\r\n        status: {\r\n          in: [StatusProposta.RASCUNHO, StatusProposta.ENVIADA]\r\n        }\r\n      }\r\n    })\r\n\r\n    if (!existingProposta) {\r\n      return NextResponse.json(\r\n        { error: 'Proposta não encontrada ou não pode ser cancelada' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n\r\n    // TODO: Get user from session\r\n    const userId = 'temp-user-id'\r\n\r\n    const updatedProposta = await db.$transaction(async (tx: any) => {\r\n      // Update status to CANCELADA\r\n      const proposta = await tx.proposta.update({\r\n        where: { id },\r\n        data: {\r\n          status: StatusProposta.CANCELADA,\r\n          canceladoEm: new Date(),\r\n          canceladoMotivo: motivo || 'Cancelado pelo usuário',\r\n          updatedAt: new Date()\r\n        }\r\n      })\r\n\r\n      // Create audit log\r\n      await tx.propostaLog.create({\r\n        data: {\r\n          propostaId: id,\r\n          usuarioId: userId,\r\n          acao: AcaoPropostaLog.CANCELLED,\r\n          detalhes: `Proposta ${proposta.numero} cancelada. Motivo: ${motivo || 'Não informado'}`,\r\n          ip: request.headers.get('x-forwarded-for') || 'unknown',\r\n          userAgent: request.headers.get('user-agent') || 'unknown'\r\n        }\r\n      })\r\n\r\n      return proposta\r\n    })\r\n\r\n    return NextResponse.json({\r\n      message: 'Proposta cancelada com sucesso',\r\n      proposta: updatedProposta\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('Error cancelling proposta:', error)\r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\propostas\\[id]\\pdf\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1191,1194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1191,1194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2314,2317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2314,2317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2647,2650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2647,2650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\r\nimport { db } from '@/server/db-temp'\r\nimport { PropostaPDFService, type PDFGenerationOptions, type RBACContext } from '@/lib/services/proposta-pdf'\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const { searchParams } = new URL(request.url)\r\n    const template = searchParams.get('template') as 'client' | 'internal' || 'client'\r\n    const includeValues = searchParams.get('includeValues') !== 'false'\r\n    const includeEtapas = searchParams.get('includeEtapas') !== 'false'\r\n    const includeMateriais = searchParams.get('includeMateriais') !== 'false'\r\n\r\n    // Buscar proposta com relacionamentos\r\n    const proposta = await db.proposta.findUnique({\r\n      where: { id: parseInt(params.id) },\r\n      include: {\r\n        etapas: true,\r\n        materiais: true,\r\n        anexos: true\r\n      }\r\n    })\r\n\r\n    if (!proposta) {\r\n      return NextResponse.json(\r\n        { error: 'Proposta não encontrada' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n\r\n    // Validar se a proposta pode gerar PDF\r\n    const validation = PropostaPDFService.validateForPDF(proposta as any)\r\n    if (!validation.valid) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Proposta inválida para geração de PDF',\r\n          details: validation.errors\r\n        },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // Configurar contexto RBAC (simplificado por enquanto)\r\n    const rbacContext: RBACContext = {\r\n      userId: 1, // TODO: Pegar do JWT/session\r\n      userRole: 'admin', // TODO: Pegar do usuário logado\r\n      permissions: ['propostas.view', 'propostas.export'], // TODO: Implementar sistema real\r\n      isClientAccess: template === 'client'\r\n    }\r\n\r\n    // Configurar opções de PDF\r\n    const pdfOptions: PDFGenerationOptions = {\r\n      includeValues,\r\n      includeEtapas,\r\n      includeMateriais,\r\n      includeAnexos: false, // Por segurança, não incluir anexos por padrão\r\n      template,\r\n      watermark: template === 'client' ? 'CONFIDENCIAL' : '',\r\n      header: {\r\n        empresa: 'GladPros',\r\n        contato: 'contato@gladpros.com'\r\n      }\r\n    }\r\n\r\n    // Gerar PDF\r\n    const { buffer, filename, contentType } = await PropostaPDFService.generatePDF(\r\n      proposta as any,\r\n      rbacContext,\r\n      pdfOptions\r\n    )\r\n\r\n    // Retornar PDF como download\r\n    const headers = new Headers()\r\n    headers.set('Content-Type', contentType)\r\n    headers.set('Content-Disposition', `attachment; filename=\"${filename}\"`)\r\n    headers.set('Cache-Control', 'no-cache')\r\n\r\n    return new NextResponse(buffer as any, {\r\n      status: 200,\r\n      headers\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('Erro ao gerar PDF da proposta:', error)\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'Erro interno do servidor',\r\n        message: error instanceof Error ? error.message : 'Erro desconhecido'\r\n      },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\n// Permitir apenas GET para este endpoint\r\nexport async function POST() {\r\n  return NextResponse.json(\r\n    { error: 'Método não permitido' },\r\n    { status: 405 }\r\n  )\r\n}\r\n\r\nexport async function PUT() {\r\n  return NextResponse.json(\r\n    { error: 'Método não permitido' },\r\n    { status: 405 }\r\n  )\r\n}\r\n\r\nexport async function DELETE() {\r\n  return NextResponse.json(\r\n    { error: 'Método não permitido' },\r\n    { status: 405 }\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\propostas\\[id]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3060,3063],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3060,3063],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":211,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5307,5310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5307,5310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\r\nimport { db } from '@/server/db-temp'\r\nimport { AcaoPropostaLog, StatusProposta } from '@/types/propostas'\r\n\r\ninterface RouteParams {\r\n  params: {\r\n    id: string\r\n  }\r\n}\r\n\r\n// GET /api/propostas/[id] - Get proposta details\r\nexport async function GET(request: NextRequest, { params }: RouteParams) {\r\n  try {\r\n    const { id } = params\r\n\r\n    const proposta = await db.proposta.findFirst({\r\n      where: {\r\n        id,\r\n        deletedAt: null\r\n      },\r\n      include: {\r\n        cliente: {\r\n          select: {\r\n            id: true,\r\n            nomeCompleto: true,\r\n            razaoSocial: true,\r\n            email: true\r\n          }\r\n        },\r\n        etapas: {\r\n          orderBy: { ordem: 'asc' }\r\n        },\r\n        materiais: {\r\n          orderBy: { nome: 'asc' }\r\n        },\r\n        anexos: {\r\n          orderBy: { createdAt: 'desc' }\r\n        },\r\n        logs: {\r\n          include: {\r\n            usuario: {\r\n              select: {\r\n                id: true,\r\n                nome: true,\r\n                email: true\r\n              }\r\n            }\r\n          },\r\n          orderBy: { createdAt: 'desc' }\r\n        },\r\n        projeto: {\r\n          include: {\r\n            cliente: {\r\n              select: {\r\n                id: true,\r\n                nomeCompleto: true,\r\n                razaoSocial: true\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    if (!proposta) {\r\n      return NextResponse.json(\r\n        { error: 'Proposta não encontrada' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n\r\n    // Transform data for frontend\r\n    const response = {\r\n      ...proposta,\r\n      cliente: proposta.cliente ? {\r\n        id: proposta.cliente.id,\r\n        nome: proposta.cliente.nomeCompleto || proposta.cliente.razaoSocial || 'Cliente',\r\n        email: proposta.cliente.email\r\n      } : null\r\n    }\r\n\r\n    return NextResponse.json(response)\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching proposta:', error)\r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\n// PUT /api/propostas/[id] - Update proposta\r\nexport async function PUT(request: NextRequest, { params }: RouteParams) {\r\n  try {\r\n    const { id } = params\r\n    const body = await request.json()\r\n\r\n    // Check if proposta exists and is editable\r\n    const existingProposta = await db.proposta.findFirst({\r\n      where: {\r\n        id,\r\n        deletedAt: null\r\n      }\r\n    })\r\n\r\n    if (!existingProposta) {\r\n      return NextResponse.json(\r\n        { error: 'Proposta não encontrada' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n\r\n    if (existingProposta.status !== StatusProposta.RASCUNHO) {\r\n      return NextResponse.json(\r\n        { error: 'Proposta não pode ser editada no status atual' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // TODO: Validate body with schema\r\n    // TODO: Get user from session\r\n    const userId = 'temp-user-id'\r\n\r\n    const updatedProposta = await db.$transaction(async (tx: any) => {\r\n      // Update proposta\r\n      const proposta = await tx.proposta.update({\r\n        where: { id },\r\n        data: {\r\n          ...body,\r\n          updatedAt: new Date()\r\n        },\r\n        include: {\r\n          cliente: {\r\n            select: {\r\n              id: true,\r\n              nomeCompleto: true,\r\n              razaoSocial: true,\r\n              email: true\r\n            }\r\n          }\r\n        }\r\n      })\r\n\r\n      // Create audit log\r\n      await tx.propostaLog.create({\r\n        data: {\r\n          propostaId: id,\r\n          usuarioId: userId,\r\n          acao: AcaoPropostaLog.UPDATED,\r\n          detalhes: `Proposta ${proposta.numero} atualizada`,\r\n          ip: request.headers.get('x-forwarded-for') || 'unknown',\r\n          userAgent: request.headers.get('user-agent') || 'unknown'\r\n        }\r\n      })\r\n\r\n      return proposta\r\n    })\r\n\r\n    // Transform response\r\n    const response = {\r\n      ...updatedProposta,\r\n      cliente: {\r\n        id: updatedProposta.cliente.id,\r\n        nome: updatedProposta.cliente.nomeCompleto || updatedProposta.cliente.razaoSocial || 'Cliente',\r\n        email: updatedProposta.cliente.email\r\n      }\r\n    }\r\n\r\n    return NextResponse.json(response)\r\n\r\n  } catch (error) {\r\n    console.error('Error updating proposta:', error)\r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\n// DELETE /api/propostas/[id] - Delete proposta (soft delete)\r\nexport async function DELETE(request: NextRequest, { params }: RouteParams) {\r\n  try {\r\n    const { id } = params\r\n\r\n    // Check if proposta exists and can be deleted\r\n    const existingProposta = await db.proposta.findFirst({\r\n      where: {\r\n        id,\r\n        deletedAt: null\r\n      }\r\n    })\r\n\r\n    if (!existingProposta) {\r\n      return NextResponse.json(\r\n        { error: 'Proposta não encontrada' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n\r\n    if (existingProposta.status !== StatusProposta.RASCUNHO) {\r\n      return NextResponse.json(\r\n        { error: 'Apenas propostas em rascunho podem ser excluídas' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // TODO: Get user from session\r\n    const userId = 'temp-user-id'\r\n\r\n    await db.$transaction(async (tx: any) => {\r\n      // Soft delete proposta\r\n      await tx.proposta.update({\r\n        where: { id },\r\n        data: {\r\n          deletedAt: new Date(),\r\n          updatedAt: new Date()\r\n        }\r\n      })\r\n\r\n      // Create audit log\r\n      await tx.propostaLog.create({\r\n        data: {\r\n          propostaId: id,\r\n          usuarioId: userId,\r\n          acao: AcaoPropostaLog.CANCELLED,\r\n          detalhes: `Proposta ${existingProposta.numeroProposta} excluída`,\r\n          ip: request.headers.get('x-forwarded-for') || 'unknown',\r\n          userAgent: request.headers.get('user-agent') || 'unknown'\r\n        }\r\n      })\r\n    })\r\n\r\n    return NextResponse.json({ message: 'Proposta excluída com sucesso' })\r\n\r\n  } catch (error) {\r\n    console.error('Error deleting proposta:', error)\r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\propostas\\[id]\\send-email\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\propostas\\[id]\\send\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[931,934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[931,934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\r\nimport { db } from '@/server/db-temp'\r\nimport { AcaoPropostaLog, StatusProposta } from '@/types/propostas'\r\n\r\ninterface RouteParams {\r\n  params: {\r\n    id: string\r\n  }\r\n}\r\n\r\n// POST /api/propostas/[id]/send - Send proposta\r\nexport async function POST(request: NextRequest, { params }: RouteParams) {\r\n  try {\r\n    const { id } = params\r\n\r\n    // Check if proposta exists and can be sent\r\n    const existingProposta = await db.proposta.findFirst({\r\n      where: {\r\n        id,\r\n        deletedAt: null,\r\n        status: StatusProposta.RASCUNHO\r\n      }\r\n    })\r\n\r\n    if (!existingProposta) {\r\n      return NextResponse.json(\r\n        { error: 'Proposta não encontrada ou não pode ser enviada' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n\r\n    // TODO: Get user from session\r\n    const userId = 'temp-user-id'\r\n\r\n    const updatedProposta = await db.$transaction(async (tx: any) => {\r\n      // Update status to ENVIADA\r\n      const proposta = await tx.proposta.update({\r\n        where: { id },\r\n        data: {\r\n          status: StatusProposta.ENVIADA,\r\n          updatedAt: new Date()\r\n        }\r\n      })\r\n\r\n      // Create audit log\r\n      await tx.propostaLog.create({\r\n        data: {\r\n          propostaId: id,\r\n          usuarioId: userId,\r\n          acao: AcaoPropostaLog.SENT,\r\n          detalhes: `Proposta ${proposta.numero} enviada para o cliente`,\r\n          ip: request.headers.get('x-forwarded-for') || 'unknown',\r\n          userAgent: request.headers.get('user-agent') || 'unknown'\r\n        }\r\n      })\r\n\r\n      return proposta\r\n    })\r\n\r\n    // TODO: Send email notification to client\r\n\r\n    return NextResponse.json({\r\n      message: 'Proposta enviada com sucesso',\r\n      proposta: updatedProposta\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('Error sending proposta:', error)\r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\propostas\\export\\csv\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[403,406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[403,406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[884,887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[884,887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1485,1488],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1485,1488],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2121,2124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2121,2124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2145,2148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2145,2148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\r\nimport { prisma } from '@/server/db'\r\n\r\n/**\r\n * API para exportar propostas em CSV\r\n * POST /api/propostas/export/csv\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json()\r\n    const { filename = 'propostas', filters = {} } = body\r\n\r\n    // Build where clause based on filters\r\n    const where: any = {}\r\n    \r\n    if (filters.q) {\r\n      where.OR = [\r\n        { titulo: { contains: filters.q } },\r\n        { numeroProposta: { contains: filters.q } },\r\n        { cliente: { nome: { contains: filters.q } } }\r\n      ]\r\n    }\r\n    \r\n    if (filters.status && filters.status !== 'all') {\r\n      where.status = filters.status\r\n    }\r\n    \r\n    if (filters.clienteId) {\r\n      where.clienteId = filters.clienteId\r\n    }\r\n\r\n    // Fetch data\r\n    const propostas = await (prisma as any).proposta.findMany({\r\n      where,\r\n      include: {\r\n        cliente: {\r\n          select: {\r\n            nome: true,\r\n            email: true\r\n          }\r\n        }\r\n      },\r\n      orderBy: {\r\n        criadoEm: 'desc'\r\n      }\r\n    })\r\n\r\n    // Generate CSV\r\n    const headers = [\r\n      'Número',\r\n      'Título',\r\n      'Cliente',\r\n      'Status',\r\n      'Valor Cliente (USD)',\r\n      'Valor Estimado (USD)',\r\n      'Criado Em',\r\n      'Validade',\r\n      'Assinado Em',\r\n      'Contato',\r\n      'Email Contato',\r\n      'Endereço Execução'\r\n    ]\r\n\r\n    const rows = propostas.map((proposta: any) => [\r\n      proposta.numeroProposta,\r\n      proposta.titulo,\r\n      proposta.cliente.nome,\r\n      proposta.status,\r\n      proposta.precoPropostaCliente?.toFixed(2) || '',\r\n      proposta.valorEstimado.toFixed(2),\r\n      proposta.criadoEm.toLocaleDateString('pt-BR'),\r\n      proposta.validadeProposta ? proposta.validadeProposta.toLocaleDateString('pt-BR') : '',\r\n      proposta.assinadoEm ? proposta.assinadoEm.toLocaleDateString('pt-BR') : '',\r\n      proposta.contatoNome || '',\r\n      proposta.contatoEmail || '',\r\n      proposta.localExecucaoEndereco || ''\r\n    ])\r\n\r\n    const csvContent = [headers, ...rows]\r\n      .map((row: any) => row.map((field: any) => `\"${field}\"`).join(','))\r\n      .join('\\n')\r\n\r\n    return new NextResponse(csvContent, {\r\n      headers: {\r\n        'Content-Type': 'text/csv; charset=utf-8',\r\n        'Content-Disposition': `attachment; filename=\"${filename}.csv\"`,\r\n      },\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('[CSV Export] Erro:', error)\r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\propostas\\export\\pdf\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[403,406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[403,406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[884,887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[884,887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4040,4043],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4040,4043],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\r\nimport { prisma } from '@/server/db'\r\n\r\n/**\r\n * API para exportar propostas em PDF\r\n * POST /api/propostas/export/pdf\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json()\r\n    const { filename = 'propostas', filters = {} } = body\r\n\r\n    // Build where clause based on filters\r\n    const where: any = {}\r\n    \r\n    if (filters.q) {\r\n      where.OR = [\r\n        { titulo: { contains: filters.q } },\r\n        { numeroProposta: { contains: filters.q } },\r\n        { cliente: { nome: { contains: filters.q } } }\r\n      ]\r\n    }\r\n    \r\n    if (filters.status && filters.status !== 'all') {\r\n      where.status = filters.status\r\n    }\r\n    \r\n    if (filters.clienteId) {\r\n      where.clienteId = filters.clienteId\r\n    }\r\n\r\n    // Fetch data\r\n    const propostas = await (prisma as any).proposta.findMany({\r\n      where,\r\n      include: {\r\n        cliente: {\r\n          select: {\r\n            nome: true,\r\n            email: true\r\n          }\r\n        }\r\n      },\r\n      orderBy: {\r\n        criadoEm: 'desc'\r\n      }\r\n    })\r\n\r\n    // Generate HTML for PDF\r\n    const html = `\r\n      <!DOCTYPE html>\r\n      <html>\r\n        <head>\r\n          <title>Relatório de Propostas</title>\r\n          <style>\r\n            body { \r\n              font-family: Arial, sans-serif; \r\n              margin: 20px; \r\n              color: #333; \r\n            }\r\n            h1 { \r\n              color: #2563eb; \r\n              border-bottom: 2px solid #2563eb;\r\n              padding-bottom: 10px;\r\n            }\r\n            .summary { \r\n              background-color: #f8fafc; \r\n              padding: 15px; \r\n              border-radius: 8px; \r\n              margin: 20px 0; \r\n            }\r\n            table { \r\n              width: 100%; \r\n              border-collapse: collapse; \r\n              margin-top: 20px; \r\n              font-size: 12px;\r\n            }\r\n            th, td { \r\n              border: 1px solid #e2e8f0; \r\n              padding: 8px; \r\n              text-align: left; \r\n            }\r\n            th { \r\n              background-color: #f1f5f9; \r\n              font-weight: bold;\r\n              color: #1e293b;\r\n            }\r\n            .status { \r\n              padding: 4px 8px; \r\n              border-radius: 4px; \r\n              font-size: 11px; \r\n              font-weight: bold;\r\n            }\r\n            .status-RASCUNHO { background-color: #f3f4f6; color: #374151; }\r\n            .status-ENVIADA { background-color: #dbeafe; color: #1e40af; }\r\n            .status-ASSINADA { background-color: #fef3c7; color: #d97706; }\r\n            .status-APROVADA { background-color: #dcfce7; color: #16a34a; }\r\n            .status-CANCELADA { background-color: #fee2e2; color: #dc2626; }\r\n            .number { text-align: right; }\r\n            .truncate { \r\n              max-width: 200px; \r\n              overflow: hidden; \r\n              text-overflow: ellipsis; \r\n              white-space: nowrap; \r\n            }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <h1>Relatório de Propostas</h1>\r\n          \r\n          <div class=\"summary\">\r\n            <p><strong>Gerado em:</strong> ${new Date().toLocaleDateString('pt-BR')} às ${new Date().toLocaleTimeString('pt-BR')}</p>\r\n            <p><strong>Total de propostas:</strong> ${propostas.length}</p>\r\n            ${filters.q ? `<p><strong>Filtro de busca:</strong> ${filters.q}</p>` : ''}\r\n            ${filters.status && filters.status !== 'all' ? `<p><strong>Status filtrado:</strong> ${filters.status}</p>` : ''}\r\n          </div>\r\n          \r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Número</th>\r\n                <th>Título</th>\r\n                <th>Cliente</th>\r\n                <th>Status</th>\r\n                <th>Valor Cliente</th>\r\n                <th>Criado Em</th>\r\n                <th>Validade</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              ${propostas.map((proposta: any) => `\r\n                <tr>\r\n                  <td><strong>${proposta.numeroProposta}</strong></td>\r\n                  <td class=\"truncate\">${proposta.titulo}</td>\r\n                  <td>${proposta.cliente.nome}</td>\r\n                  <td><span class=\"status status-${proposta.status}\">${proposta.status}</span></td>\r\n                  <td class=\"number\">${proposta.precoPropostaCliente ? `USD ${proposta.precoPropostaCliente.toFixed(2)}` : 'N/A'}</td>\r\n                  <td>${proposta.criadoEm.toLocaleDateString('pt-BR')}</td>\r\n                  <td>${proposta.validadeProposta ? proposta.validadeProposta.toLocaleDateString('pt-BR') : 'N/A'}</td>\r\n                </tr>\r\n              `).join('')}\r\n            </tbody>\r\n          </table>\r\n          \r\n          ${propostas.length === 0 ? '<p style=\"text-align: center; color: #64748b; margin: 40px 0;\">Nenhuma proposta encontrada com os filtros aplicados.</p>' : ''}\r\n        </body>\r\n      </html>\r\n    `\r\n\r\n    return new NextResponse(html, {\r\n      headers: {\r\n        'Content-Type': 'text/html; charset=utf-8',\r\n        'Content-Disposition': `attachment; filename=\"${filename}.html\"`,\r\n      },\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('[PDF Export] Erro:', error)\r\n    return NextResponse.json(\r\n      { error: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\propostas\\rascunho\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\propostas\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StatusProposta' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StatusPermite' is defined but never used.","line":7,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PropostaFormData' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1270,1273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1270,1273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1393,1396],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1393,1396],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":52,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3355,3358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3355,3358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/app/api/propostas/route.ts\r\nexport const runtime = \"nodejs\";\r\n\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { z } from \"zod\";\r\nimport { db } from \"@/server/db-temp\";\r\nimport { StatusProposta, StatusPermite } from \"@/types/prisma-temp\";\r\nimport { propostaFormSchema } from \"@modules/propostas/ui/validation\";\r\nimport { adaptPropostaFormToAPI } from \"@modules/propostas/ui/adapter\";\r\nimport { PropostaFormData } from \"@modules/propostas/ui/types\";\r\nimport { requireServerUser } from \"@/lib/requireServerUser\";\r\n\r\n// Retry helper para transações DB\r\nasync function withRetry<T>(fn: () => Promise<T>, retries = 2, delayMs = 300): Promise<T> {\r\n  let lastErr: unknown;\r\n  for (let i = 0; i <= retries; i++) {\r\n    try {\r\n      return await fn();\r\n    } catch (err: unknown) {\r\n      const e = err as { code?: string; errorCode?: string; name?: string };\r\n      const code = e?.code || e?.errorCode;\r\n      const name = e?.name;\r\n      const isInit = name === \"PrismaClientInitializationError\" || code === \"P1001\";\r\n      if (!isInit || i === retries) throw err;\r\n      lastErr = err;\r\n      await new Promise((r) => setTimeout(r, delayMs));\r\n    }\r\n  }\r\n  throw lastErr;\r\n}\r\n\r\n// Helper para mapear erros do Prisma\r\nfunction mapPrismaError(error: any): { status: number; message: string; fields?: Record<string, string> } {\r\n  const e = error as { code?: string; meta?: any };\r\n  \r\n  if (e.code === 'P2002') {\r\n    const target = e.meta?.target?.[0];\r\n    if (target === 'numeroProposta') {\r\n      return { status: 409, message: 'Número da proposta já existe' };\r\n    }\r\n    return { status: 409, message: 'Violação de restrição única' };\r\n  }\r\n  \r\n  if (e.code === 'P2025') {\r\n    return { status: 404, message: 'Registro não encontrado' };\r\n  }\r\n  \r\n  return { status: 500, message: 'Erro interno do servidor' };\r\n}\r\n\r\n// GET /api/propostas - Lista com filtros e paginação por cursor\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    console.log('GET /api/propostas - iniciado');\r\n    \r\n    // TEMPORARY STUB - retorna dados mock para testar\r\n    return NextResponse.json({\r\n      items: [],\r\n      pagination: {\r\n        total: 0,\r\n        hasNext: false,\r\n        nextCursor: null,\r\n        pageSize: 10\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('GET /api/propostas error:', error);\r\n    return NextResponse.json({\r\n      error: 'INTERNAL_ERROR',\r\n      message: 'Erro interno do servidor'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST /api/propostas - Criar nova proposta\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('POST /api/propostas - iniciado');\r\n\r\n    // Verificar autenticação\r\n    const user = await requireServerUser();\r\n    if (!user) {\r\n      return NextResponse.json({\r\n        error: 'UNAUTHORIZED',\r\n        message: 'Usuário não autenticado'\r\n      }, { status: 401 });\r\n    }\r\n\r\n    // Parse do body\r\n    const body = await request.json();\r\n    console.log('Body recebido:', JSON.stringify(body, null, 2));\r\n\r\n    // Validar dados com schema do novo formulário\r\n    const validatedData = propostaFormSchema.parse(body);\r\n    \r\n  // Converter para formato da API/DB\r\n  // zod validatedData may use string literals for 'permite'; cast to any to satisfy adapter until types are aligned\r\n  const apiPayload = adaptPropostaFormToAPI(validatedData as any);\r\n    \r\n    // Criar proposta usando o temporary DB client\r\n    const novaProposta = await withRetry(async () => {\r\n      // Gerar número da proposta\r\n      const numeroProposta = await db.generatePropostaNumber();\r\n      \r\n      console.log('Criando proposta com número:', numeroProposta);\r\n      console.log('Dados adaptados:', JSON.stringify(apiPayload, null, 2));\r\n      \r\n      // Simular criação (como estamos usando db temporário)\r\n      const proposta = {\r\n        id: Math.floor(Math.random() * 10000) + 1000,\r\n        numeroProposta,\r\n        titulo: apiPayload.titulo,\r\n        descricao: apiPayload.descricao,\r\n        status: apiPayload.status,\r\n        valorEstimado: apiPayload.valorEstimado,\r\n        clienteId: apiPayload.clienteId,\r\n        usuarioId: user.id,\r\n        contatoNome: apiPayload.contatoNome,\r\n        contatoEmail: apiPayload.contatoEmail,\r\n        contatoTelefone: apiPayload.contatoTelefone,\r\n        localExecucaoEndereco: apiPayload.localExecucaoEndereco,\r\n        tempoParaAceite: apiPayload.tempoParaAceite,\r\n        validadeProposta: apiPayload.validadeProposta,\r\n        prazoExecucaoDias: apiPayload.prazoExecucaoDias,\r\n        janelaExecucao: apiPayload.janelaExecucao,\r\n        restricoesAcesso: apiPayload.restricoesAcesso,\r\n        permite: apiPayload.permite,\r\n        quaisPermites: apiPayload.quaisPermites,\r\n        normasReferencia: apiPayload.normasReferencia,\r\n        inspecoesNecessarias: apiPayload.inspecoesNecessarias,\r\n        condicoesPagamento: apiPayload.condicoesPagamento,\r\n        garantia: apiPayload.garantia,\r\n        exclusoes: apiPayload.exclusoes,\r\n        condicoesGerais: apiPayload.condicoesGerais,\r\n        observacoesCliente: apiPayload.observacoesCliente,\r\n        observacoesInternas: apiPayload.observacoesInternas,\r\n        estimativasInternas: apiPayload.estimativasInternas,\r\n        materiais: apiPayload.materiais,\r\n        etapas: apiPayload.etapas,\r\n        criadoEm: new Date(),\r\n        atualizadoEm: new Date()\r\n      };\r\n\r\n      console.log('Proposta criada (simulada):', proposta.id);\r\n      return proposta;\r\n    });\r\n\r\n    // Retornar resposta de sucesso\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Proposta criada com sucesso',\r\n      proposta: {\r\n        id: novaProposta.id,\r\n        numeroProposta: novaProposta.numeroProposta,\r\n        titulo: novaProposta.titulo,\r\n        status: novaProposta.status,\r\n        valorEstimado: novaProposta.valorEstimado,\r\n        criadoEm: novaProposta.criadoEm\r\n      }\r\n    }, { status: 201 });\r\n\r\n  } catch (error) {\r\n    console.error('POST /api/propostas error:', error);\r\n\r\n    // Tratamento de erros de validação\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json({\r\n        error: 'VALIDATION_ERROR',\r\n        message: 'Dados inválidos',\r\n        details: error.issues.map(issue => ({\r\n          field: issue.path.join('.'),\r\n          message: issue.message\r\n        }))\r\n      }, { status: 400 });\r\n    }\r\n\r\n    // Tratamento de outros erros\r\n    const mappedError = mapPrismaError(error);\r\n    return NextResponse.json({\r\n      error: 'DATABASE_ERROR',\r\n      message: mappedError.message\r\n    }, { status: mappedError.status });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\security\\reports\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\usuarios\\[id]\\auditoria\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\usuarios\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\usuarios\\[id]\\security\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\usuarios\\[id]\\sessions\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\usuarios\\[id]\\status\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\usuarios\\export\\csv\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\usuarios\\export\\pdf\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\usuarios\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\usuarios\\sessions\\[sessionId]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\api\\weather\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\clientes\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\clientes\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\clientes\\novo\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\clientes\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ClientesListPage' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/app/clientes/page.tsx\r\nimport ClientesListPage from \"@/modules/clientes/pages/ListPage\";\r\n\r\nexport { default } from '@modules/clientes/pages/ListPage'\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\dashboard\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\desbloqueio\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\esqueci-senha\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\login\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\mfa\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\not-found-content.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\p\\[token]\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1201,1204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1201,1204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1889,1892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1889,1892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1992,1995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1992,1995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { notFound } from 'next/navigation'\r\nimport ClientPropostaView from '@modules/propostas/ui/ClientPropostaView'\r\nimport { db } from '@/server/db-temp'\r\nimport { PropostaWithRelations } from '@/types/propostas'\r\n\r\ninterface Props {\r\n  params: {\r\n    token: string\r\n  }\r\n}\r\n\r\nasync function getPropostaByToken(token: string): Promise<PropostaWithRelations | null> {\r\n  try {\r\n    const proposta = await db.proposta.findFirst({\r\n      where: {\r\n        numeroProposta: token,\r\n        deletedAt: null\r\n      },\r\n      include: {\r\n        cliente: {\r\n          select: {\r\n            id: true,\r\n            nome: true,\r\n            email: true\r\n          }\r\n        },\r\n        etapas: {\r\n          orderBy: { ordem: 'asc' }\r\n        },\r\n        materiais: {\r\n          orderBy: { createdAt: 'asc' }\r\n        },\r\n        anexos: {\r\n          orderBy: { createdAt: 'asc' }\r\n        },\r\n        logs: {\r\n          include: {\r\n            usuario: {\r\n              select: {\r\n                id: true,\r\n                nome: true,\r\n                email: true\r\n              }\r\n            }\r\n          },\r\n          orderBy: { createdAt: 'desc' }\r\n        }\r\n      }\r\n    })\r\n\r\n    return proposta as any\r\n  } catch (error) {\r\n    console.error('Error fetching proposal:', error)\r\n    return null\r\n  }\r\n}\r\n\r\nexport default async function ClientPropostaPage({ params }: Props) {\r\n  const { token } = await params\r\n  const proposta = await getPropostaByToken(token)\r\n\r\n  if (!proposta) {\r\n    notFound()\r\n  }\r\n\r\n  return <ClientPropostaView proposta={proposta} token={token} />\r\n}\r\n\r\n// Generate metadata\r\nexport async function generateMetadata({ params }: Props) {\r\n  const { token } = await params\r\n  const proposta = await getPropostaByToken(token)\r\n\r\n  if (!proposta) {\r\n    return {\r\n      title: 'Proposta não encontrada'\r\n    }\r\n  }\r\n\r\n  return {\r\n    title: `Proposta ${(proposta as any).numeroProposta} - GladPros`,\r\n    description: `Visualização da proposta comercial ${(proposta as any).numeroProposta}`,\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\primeiro-acesso\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\primeiro-acesso\\resetar-senha\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\proposta-modular\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\propostas\\[id]\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'notFound' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Metadata } from 'next'\r\nimport { notFound } from 'next/navigation'\r\nimport PropostaDetails from '@/modules/propostas/components/PropostaDetails'\r\n\r\ninterface PropostaPageProps {\r\n  params: {\r\n    id: string\r\n  }\r\n}\r\n\r\nexport async function generateMetadata({ params }: PropostaPageProps): Promise<Metadata> {\r\n  return {\r\n    title: `Proposta ${params.id} - GladPros`,\r\n    description: 'Detalhes da proposta comercial',\r\n  }\r\n}\r\n\r\nexport default async function PropostaPage({ params }: PropostaPageProps) {\r\n  // TODO: Fetch proposta data and validate access\r\n  \r\n  return (\r\n    <div className=\"container mx-auto py-6\">\r\n      <PropostaDetails propostaId={params.id} />\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\propostas\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\propostas\\nova\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ReactNode' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/app/propostas/nova/page.tsx\r\nimport { ReactNode } from \"react\";\r\nimport DashboardShell, { AppUser } from \"@/components/GladPros\";\r\nimport { requireServerUser } from \"@/lib/requireServerUser\";\r\nimport PropostaForm from \"@modules/propostas/ui/PropostaForm\";\r\nimport { ClientesProvider } from \"@modules/propostas/ui/ClientesContext\";\r\n\r\nexport default async function NovaPropostaPage() {\r\n  const user = (await requireServerUser()) as unknown as AppUser;\r\n  \r\n  return (\r\n    <DashboardShell user={user}>\r\n      <ClientesProvider>\r\n        <PropostaForm />\r\n      </ClientesProvider>\r\n    </DashboardShell>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\propostas\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'propostaFormSchema' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'adaptPropostaFormToAPI' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PropostaFormData' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":26}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/app/propostas/page.tsx\r\nimport { propostaFormSchema } from \"@modules/propostas/ui/validation\";\r\nimport { adaptPropostaFormToAPI } from \"@modules/propostas/ui/adapter\";\r\nimport { PropostaFormData } from \"@modules/propostas/ui/types\";\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\reset-senha\\[token]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\app\\usuarios\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\DashboardShell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\GladPros\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ModulePages.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ThemeProvider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":27,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":36,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":15}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'t' is defined but never used.","line":15,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\r\n\r\ntype Theme = \"light\" | \"dark\";\r\n\r\ntype ThemeContextValue = {\r\n  theme: Theme;\r\n  setTheme: (t: Theme) => void;\r\n};\r\n\r\nconst ThemeContext = createContext<ThemeContextValue>({\r\n  theme: \"dark\",\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  setTheme: (t: Theme) => {},\r\n});\r\n\r\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\r\n  const [theme, setTheme] = useState<Theme>(\"dark\");\r\n\r\n  useEffect(() => {\r\n    try {\r\n      const saved = typeof window !== \"undefined\" ? localStorage.getItem(\"gp-theme\") : null;\r\n      const initial = saved === \"light\" || saved === \"dark\" ? (saved as Theme) : \"dark\";\r\n      setTheme(initial);\r\n      document.documentElement.classList.toggle(\"dark\", initial === \"dark\");\r\n    } catch (e) {\r\n      // defensive\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      if (typeof window !== \"undefined\") localStorage.setItem(\"gp-theme\", theme);\r\n      document.documentElement.classList.toggle(\"dark\", theme === \"dark\");\r\n    } catch (e) {}\r\n  }, [theme]);\r\n\r\n  return <ThemeContext.Provider value={{ theme, setTheme }}>{children}</ThemeContext.Provider>;\r\n}\r\n\r\nexport function useTheme() {\r\n  return useContext(ThemeContext);\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\clientes\\ClienteCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Cliente' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\r\nimport { Cliente, TipoCliente } from '@/types/cliente'\r\n\r\ninterface ClienteCardProps {\r\n  cliente: {\r\n    id: number\r\n    tipo: TipoCliente\r\n    nomeCompletoOuRazao: string\r\n    email: string\r\n    telefone: string\r\n    cidade: string | null\r\n    estado: string | null\r\n    documentoMasked: string\r\n    ativo: boolean\r\n    criadoEm: string\r\n    atualizadoEm: string\r\n  }\r\n  onView?: (id: number) => void\r\n  onEdit?: (id: number) => void\r\n  onDelete?: (id: number) => void\r\n}\r\n\r\nexport function ClienteCard({ cliente, onView, onEdit, onDelete }: ClienteCardProps) {\r\n  const handleView = () => onView?.(cliente.id)\r\n  const handleEdit = () => onEdit?.(cliente.id)\r\n  const handleDelete = () => onDelete?.(cliente.id)\r\n\r\n  return (\r\n    <div className={`\r\n      bg-white rounded-lg shadow-sm border border-gray-200 p-6 transition-all duration-200\r\n      hover:shadow-md hover:border-blue-200\r\n      ${!cliente.ativo ? 'opacity-60 bg-gray-50' : ''}\r\n    `}>\r\n      {/* Header */}\r\n      <div className=\"flex items-start justify-between mb-4\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <div className={`\r\n            w-10 h-10 rounded-full flex items-center justify-center text-white font-semibold text-sm\r\n            ${cliente.tipo === 'PF' ? 'bg-blue-500' : 'bg-purple-500'}\r\n          `}>\r\n            {cliente.tipo}\r\n          </div>\r\n          <div>\r\n            <h3 className=\"font-semibold text-foreground dark:text-white text-lg leading-tight\">\r\n              {cliente.nomeCompletoOuRazao}\r\n            </h3>\r\n            <p className=\"text-sm text-gray-500\">\r\n              {cliente.tipo === 'PF' ? 'Pessoa Física' : 'Pessoa Jurídica'}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Status Badge */}\r\n        <span className={`\r\n          inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\r\n          ${cliente.ativo \r\n            ? 'bg-green-100 text-green-800' \r\n            : 'bg-gray-100 text-gray-800'\r\n          }\r\n        `}>\r\n          {cliente.ativo ? 'Ativo' : 'Inativo'}\r\n        </span>\r\n      </div>\r\n\r\n      {/* Contact Info */}\r\n      <div className=\"space-y-2 mb-4\">\r\n        <div className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \r\n              d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\r\n          </svg>\r\n          <span className=\"truncate\">{cliente.email}</span>\r\n        </div>\r\n        \r\n        {cliente.telefone && (\r\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \r\n                d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\r\n            </svg>\r\n            <span>{cliente.telefone}</span>\r\n          </div>\r\n        )}\r\n        \r\n        {(cliente.cidade || cliente.estado) && (\r\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \r\n                d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \r\n                d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n            </svg>\r\n            <span>{[cliente.cidade, cliente.estado].filter(Boolean).join(', ')}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Document Info */}\r\n      <div className=\"flex items-center gap-2 text-xs text-gray-500 mb-4\">\r\n        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \r\n            d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n        </svg>\r\n        <span>{cliente.documentoMasked}</span>\r\n        <span className=\"mx-1\">•</span>\r\n        <span>Criado {new Date(cliente.criadoEm).toLocaleDateString('pt-BR')}</span>\r\n      </div>\r\n\r\n      {/* Action Buttons */}\r\n      <div className=\"flex gap-2 pt-4 border-t border-gray-100\">\r\n        {onView && (\r\n          <button\r\n            onClick={handleView}\r\n            className=\"flex-1 px-3 py-2 text-sm font-medium text-blue-700 bg-blue-50 rounded-md hover:bg-blue-100 transition-colors\"\r\n          >\r\n            Ver Detalhes\r\n          </button>\r\n        )}\r\n        {onEdit && (\r\n          <button\r\n            onClick={handleEdit}\r\n            className=\"flex-1 px-3 py-2 text-sm font-medium text-gray-700 bg-gray-50 rounded-md hover:bg-gray-100 transition-colors\"\r\n          >\r\n            Editar\r\n          </button>\r\n        )}\r\n        {onDelete && cliente.ativo && (\r\n          <button\r\n            onClick={handleDelete}\r\n            className=\"px-3 py-2 text-sm font-medium text-red-700 bg-red-50 rounded-md hover:bg-red-100 transition-colors\"\r\n          >\r\n            Inativar\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\clientes\\ClienteDetailsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\clientes\\ClienteFilters.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[605,608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[605,608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":109,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4647,4673],"text":"\r\n                Busca: &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4647,4673],"text":"\r\n                Busca: &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4647,4673],"text":"\r\n                Busca: &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4647,4673],"text":"\r\n                Busca: &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":109,"column":36,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4684,4703],"text":"&quot;\r\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4684,4703],"text":"&ldquo;\r\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4684,4703],"text":"&#34;\r\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4684,4703],"text":"&rdquo;\r\n                "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\r\nimport { ClienteFilters as ClienteFiltersInput } from '@/types/cliente'\r\n\r\ninterface ClienteFiltersProps {\r\n  filters: ClienteFiltersInput\r\n  onFiltersChange: (filters: Partial<ClienteFiltersInput>) => void\r\n  onClear: () => void\r\n}\r\n\r\nexport function ClienteFilters({ filters, onFiltersChange, onClear }: ClienteFiltersProps) {\r\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onFiltersChange({ q: e.target.value })\r\n  }\r\n\r\n  const handleTipoChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    onFiltersChange({ tipo: e.target.value as any })\r\n  }\r\n\r\n  const handleAtivoChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const value = e.target.value\r\n    onFiltersChange({ \r\n      ativo: value === 'all' ? 'all' : value === 'true' \r\n    })\r\n  }\r\n\r\n  const hasActiveFilters = filters.q || filters.tipo !== 'all' || filters.ativo !== 'all'\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6\">\r\n      <div className=\"flex flex-wrap gap-4 items-end\">\r\n        {/* Search Input */}\r\n        <div className=\"flex-1 min-w-64\">\r\n          <label htmlFor=\"search\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n            Buscar cliente\r\n          </label>\r\n          <div className=\"relative\">\r\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n              <svg className=\"h-5 w-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \r\n                  d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\r\n              </svg>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              id=\"search\"\r\n              className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white\"\r\n              placeholder=\"Nome, email, documento...\"\r\n              value={filters.q || ''}\r\n              onChange={handleSearchChange}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Type Filter */}\r\n        <div className=\"min-w-32\">\r\n          <label htmlFor=\"tipo\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n            Tipo\r\n          </label>\r\n          <select\r\n            id=\"tipo\"\r\n            className=\"block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white\"\r\n            value={filters.tipo}\r\n            onChange={handleTipoChange}\r\n          >\r\n            <option value=\"all\">Todos</option>\r\n            <option value=\"PF\">Pessoa Física</option>\r\n            <option value=\"PJ\">Pessoa Jurídica</option>\r\n          </select>\r\n        </div>\r\n\r\n        {/* Status Filter */}\r\n        <div className=\"min-w-32\">\r\n          <label htmlFor=\"ativo\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n            Status\r\n          </label>\r\n          <select\r\n            id=\"ativo\"\r\n            className=\"block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white\"\r\n            value={filters.ativo === 'all' ? 'all' : filters.ativo ? 'true' : 'false'}\r\n            onChange={handleAtivoChange}\r\n          >\r\n            <option value=\"all\">Todos</option>\r\n            <option value=\"true\">Ativo</option>\r\n            <option value=\"false\">Inativo</option>\r\n          </select>\r\n        </div>\r\n\r\n        {/* Clear Button */}\r\n        {hasActiveFilters && (\r\n          <div>\r\n            <button\r\n              onClick={onClear}\r\n              className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 border border-gray-300 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors\"\r\n            >\r\n              Limpar\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Active Filters Summary */}\r\n      {hasActiveFilters && (\r\n        <div className=\"mt-4 pt-4 border-t border-gray-100\">\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            <span className=\"text-sm text-gray-500\">Filtros ativos:</span>\r\n            \r\n            {filters.q && (\r\n              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\r\n                Busca: \"{filters.q}\"\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"ml-1 inline-flex items-center justify-center h-4 w-4 rounded-full text-blue-400 hover:bg-blue-200 hover:text-blue-500\"\r\n                  onClick={() => onFiltersChange({ q: '' })}\r\n                >\r\n                  <svg className=\"h-2 w-2\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 8 8\">\r\n                    <path strokeLinecap=\"round\" d=\"m1 1 6 6m0-6-6 6\" />\r\n                  </svg>\r\n                </button>\r\n              </span>\r\n            )}\r\n            \r\n            {filters.tipo !== 'all' && (\r\n              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\r\n                {filters.tipo === 'PF' ? 'Pessoa Física' : 'Pessoa Jurídica'}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"ml-1 inline-flex items-center justify-center h-4 w-4 rounded-full text-purple-400 hover:bg-purple-200 hover:text-purple-500\"\r\n                  onClick={() => onFiltersChange({ tipo: 'all' })}\r\n                >\r\n                  <svg className=\"h-2 w-2\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 8 8\">\r\n                    <path strokeLinecap=\"round\" d=\"m1 1 6 6m0-6-6 6\" />\r\n                  </svg>\r\n                </button>\r\n              </span>\r\n            )}\r\n            \r\n            {filters.ativo !== 'all' && (\r\n              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\r\n                filters.ativo ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'\r\n              }`}>\r\n                {filters.ativo ? 'Ativo' : 'Inativo'}\r\n                <button\r\n                  type=\"button\"\r\n                  className={`ml-1 inline-flex items-center justify-center h-4 w-4 rounded-full ${\r\n                    filters.ativo \r\n                      ? 'text-green-400 hover:bg-green-200 hover:text-green-500'\r\n                      : 'text-gray-400 hover:bg-gray-200 hover:text-gray-500'\r\n                  }`}\r\n                  onClick={() => onFiltersChange({ ativo: 'all' })}\r\n                >\r\n                  <svg className=\"h-2 w-2\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 8 8\">\r\n                    <path strokeLinecap=\"round\" d=\"m1 1 6 6m0-6-6 6\" />\r\n                  </svg>\r\n                </button>\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\clientes\\ClienteForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3707,3710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3707,3710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4610,4613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4610,4613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5129,5132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5129,5132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport React, { useState } from 'react'\r\nimport type { ClienteCreateInput, ClienteUpdateInput, TipoCliente, TipoDocumentoPF } from '@/types/cliente'\r\n\r\ntype FormData = ClienteCreateInput\r\n\r\ninterface ClienteFormProps {\r\n  cliente?: Partial<FormData> & { id?: number } | null\r\n  onSubmit: (data: ClienteCreateInput | ClienteUpdateInput) => Promise<void>\r\n  onCancel: () => void\r\n  loading?: boolean\r\n}\r\n\r\nexport function ClienteForm({ cliente, onSubmit, onCancel, loading = false }: ClienteFormProps) {\r\n  const [formData, setFormData] = useState<FormData>({\r\n    tipo: (cliente?.tipo as TipoCliente) || 'PF',\r\n    nomeCompleto: (cliente?.nomeCompleto as string) || '',\r\n    nomeFantasia: (cliente?.nomeFantasia as string) || '',\r\n    email: (cliente?.email as string) || '',\r\n    telefone: (cliente?.telefone as string) || '',\r\n    tipoDocumentoPF: (cliente?.tipoDocumentoPF as TipoDocumentoPF) || 'SSN',\r\n    ssn: (cliente?.ssn as string) || '',\r\n    itin: (cliente?.itin as string) || '',\r\n    ein: (cliente?.ein as string) || '',\r\n    endereco1: (cliente?.endereco1 as string) || '',\r\n    endereco2: (cliente?.endereco2 as string) || '',\r\n    cidade: (cliente?.cidade as string) || '',\r\n    estado: (cliente?.estado as string) || '',\r\n    zipcode: (cliente?.zipcode as string) || '',\r\n    observacoes: (cliente?.observacoes as string) || '',\r\n  })\r\n\r\n  const [errors, setErrors] = useState<Record<string, string>>({})\r\n\r\n  const handleInputChange = (field: keyof FormData, value: string) => {\r\n    setFormData((prev) => ({ ...prev, [field]: value }))\r\n    if (errors[field as string]) setErrors((e) => ({ ...e, [field as string]: '' }))\r\n  }\r\n\r\n  const formatTelefone = (value: string) => {\r\n    const digits = value.replace(/\\D/g, '')\r\n    if (digits.length <= 10) return digits.replace(/(\\d{3})(\\d{3})(\\d{4})/, '($1) $2-$3')\r\n    return digits.slice(0, 10).replace(/(\\d{3})(\\d{3})(\\d{4})/, '($1) $2-$3')\r\n  }\r\n\r\n  const formatZipCode = (value: string) => {\r\n    const digits = value.replace(/\\D/g, '').slice(0, 9)\r\n    return digits.replace(/(\\d{5})(\\d{0,4})/, (_, a, b) => (b ? `${a}-${b}` : a))\r\n  }\r\n\r\n  const formatSSN = (value: string) => {\r\n    const d = value.replace(/\\D/g, '').slice(0, 9)\r\n    return d.replace(/(\\d{3})(\\d{0,2})(\\d{0,4})/, (_, a, b, c) => [a, b && `-${b}`, c && `-${c}`].filter(Boolean).join(''))\r\n  }\r\n  const formatITIN = formatSSN\r\n  const formatEIN = (value: string) => {\r\n    const d = value.replace(/\\D/g, '').slice(0, 9)\r\n    return d.replace(/(\\d{2})(\\d{0,7})/, (_, a, b) => (b ? `${a}-${b}` : a))\r\n  }\r\n\r\n  const validate = () => {\r\n    const e: Record<string, string> = {}\r\n    if (!formData.email) e.email = 'E-mail é obrigatório'\r\n    else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) e.email = 'E-mail inválido'\r\n    if (!formData.telefone) e.telefone = 'Telefone é obrigatório'\r\n    if (formData.tipo === 'PF') {\r\n      if (!formData.nomeCompleto) e.nomeCompleto = 'Nome completo é obrigatório'\r\n      if (formData.tipoDocumentoPF === 'SSN' && formData.ssn) {\r\n        if (!/^\\d{3}-\\d{2}-\\d{4}$|^\\d{9}$/.test(formData.ssn)) e.ssn = 'SSN inválido'\r\n      }\r\n      if (formData.tipoDocumentoPF === 'ITIN' && formData.itin) {\r\n        if (!/^9\\d{2}-\\d{2}-\\d{4}$|^9\\d{8}$/.test(formData.itin)) e.itin = 'ITIN inválido'\r\n      }\r\n    } else {\r\n      if (!formData.nomeFantasia) e.nomeFantasia = 'Nome da Empresa é obrigatório'\r\n      if (formData.ein && !/^\\d{2}-\\d{7}$|^\\d{9}$/.test(formData.ein)) e.ein = 'EIN inválido'\r\n    }\r\n    return e\r\n  }\r\n\r\n  const handleSubmit = async (ev: React.FormEvent) => {\r\n    ev.preventDefault()\r\n    const e = validate()\r\n    if (Object.keys(e).length) {\r\n      setErrors(e)\r\n      return\r\n    }\r\n\r\n    const payload: any = { ...formData }\r\n    // Normalize document masks to match server regex patterns\r\n    if (payload.tipo === 'PF') {\r\n      if (payload.tipoDocumentoPF === 'SSN' && payload.ssn) {\r\n        payload.ssn = formatSSN(payload.ssn)\r\n      }\r\n      if (payload.tipoDocumentoPF === 'ITIN' && payload.itin) {\r\n        payload.itin = formatITIN(payload.itin)\r\n      }\r\n    } else if (payload.tipo === 'PJ' && payload.ein) {\r\n      payload.ein = formatEIN(payload.ein)\r\n    }\r\n  if (payload.tipo === 'PF') {\r\n      payload.ein = null\r\n      if (payload.tipoDocumentoPF === 'SSN') payload.itin = null\r\n      if (payload.tipoDocumentoPF === 'ITIN') payload.ssn = null\r\n      payload.nomeFantasia = null\r\n    } else {\r\n      payload.nomeCompleto = null\r\n      payload.tipoDocumentoPF = null\r\n      payload.ssn = null\r\n      payload.itin = null\r\n    }\r\n\r\n    try {\r\n      await onSubmit(payload)\r\n    } catch (err: any) {\r\n      // Mapear erros de validação do servidor (Zod) para campos do formulário\r\n      const fieldErrors: Record<string, string> = {}\r\n      // Suporte a erro.fieldErrors direto\r\n      if (err && typeof err === 'object' && err.fieldErrors && typeof err.fieldErrors === 'object') {\r\n        Object.assign(fieldErrors, err.fieldErrors)\r\n      }\r\n      // Suporte a err.details como issues do Zod\r\n      const issues = err?.details || err?.issues\r\n      if (Array.isArray(issues)) {\r\n        issues.forEach((issue: any) => {\r\n          const path = Array.isArray(issue.path) ? issue.path.join('.') : issue.path\r\n          if (typeof path === 'string' && path) {\r\n            fieldErrors[path] = issue.message || 'Valor inválido'\r\n          }\r\n        })\r\n      }\r\n      if (Object.keys(fieldErrors).length) {\r\n        setErrors(fieldErrors)\r\n        return\r\n      }\r\n      // Se não for erro de campo, apenas relançar para tratamento externo\r\n      throw err\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"space-y-6 max-w-4xl\">\r\n      {/* Tipo de Cliente */}\r\n      <div>\r\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Tipo de Cliente *</label>\r\n        <div className=\"flex gap-4\">\r\n          <label className=\"flex items-center\">\r\n            <input type=\"radio\" name=\"tipo\" value=\"PF\" checked={formData.tipo === 'PF'} onChange={(e) => handleInputChange('tipo', e.target.value)} className=\"mr-2\" disabled={loading} />\r\n            Pessoa Física\r\n          </label>\r\n          <label className=\"flex items-center\">\r\n            <input type=\"radio\" name=\"tipo\" value=\"PJ\" checked={formData.tipo === 'PJ'} onChange={(e) => handleInputChange('tipo', e.target.value)} className=\"mr-2\" disabled={loading} />\r\n            Pessoa Jurídica\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* Esquerda: Dados */}\r\n        <div className=\"space-y-4\">\r\n          <h3 className=\"text-lg font-medium text-foreground dark:text-white\">Dados Principais</h3>\r\n          {formData.tipo === 'PF' ? (\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Nome Completo *</label>\r\n              <input type=\"text\" value={formData.nomeCompleto || ''} onChange={(e) => handleInputChange('nomeCompleto', e.target.value)} placeholder=\"João da Silva\" disabled={loading}\r\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.nomeCompleto ? 'border-red-300' : 'border-gray-300'}`} />\r\n              {errors.nomeCompleto && <p className=\"mt-1 text-sm text-red-600\">{errors.nomeCompleto}</p>}\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Nome da Empresa *</label>\r\n              <input type=\"text\" value={formData.nomeFantasia || ''} onChange={(e) => handleInputChange('nomeFantasia', e.target.value)} placeholder=\"Tech Solutions Inc\" disabled={loading}\r\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.nomeFantasia ? 'border-red-300' : 'border-gray-300'}`} />\r\n              {errors.nomeFantasia && <p className=\"mt-1 text-sm text-red-600\">{errors.nomeFantasia}</p>}\r\n            </div>\r\n          )}\r\n\r\n          {/* Documentos (opcionais) */}\r\n          {formData.tipo === 'PF' ? (\r\n            <div className=\"pt-2\">\r\n              <h4 className=\"text-sm font-medium text-foreground dark:text-white mb-3\">Documentos (Opcional)</h4>\r\n              <div className=\"flex gap-4 mb-2\">\r\n                <label className=\"flex items-center\"><input type=\"radio\" name=\"tipoDocumentoPF\" value=\"SSN\" checked={formData.tipoDocumentoPF === 'SSN'} onChange={(e) => handleInputChange('tipoDocumentoPF', e.target.value)} className=\"mr-2\" disabled={loading} />SSN</label>\r\n                <label className=\"flex items-center\"><input type=\"radio\" name=\"tipoDocumentoPF\" value=\"ITIN\" checked={formData.tipoDocumentoPF === 'ITIN'} onChange={(e) => handleInputChange('tipoDocumentoPF', e.target.value)} className=\"mr-2\" disabled={loading} />ITIN</label>\r\n              </div>\r\n              {formData.tipoDocumentoPF === 'SSN' && (\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">SSN (Opcional)</label>\r\n                  <input type=\"text\" value={formatSSN(formData.ssn || '')} onChange={(e) => handleInputChange('ssn', e.target.value.replace(/\\D/g, ''))} placeholder=\"123-45-6789\" maxLength={11} disabled={loading}\r\n                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.ssn ? 'border-red-300' : 'border-gray-300'}`} />\r\n                  {errors.ssn && <p className=\"mt-1 text-sm text-red-600\">{errors.ssn}</p>}\r\n                </div>\r\n              )}\r\n              {formData.tipoDocumentoPF === 'ITIN' && (\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">ITIN (Opcional)</label>\r\n                  <input type=\"text\" value={formatITIN(formData.itin || '')} onChange={(e) => handleInputChange('itin', e.target.value.replace(/\\D/g, ''))} placeholder=\"9XX-XX-XXXX\" maxLength={11} disabled={loading}\r\n                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.itin ? 'border-red-300' : 'border-gray-300'}`} />\r\n                  {errors.itin && <p className=\"mt-1 text-sm text-red-600\">{errors.itin}</p>}\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"pt-2\">\r\n              <h4 className=\"text-sm font-medium text-foreground dark:text-white mb-3\">Documentos (Opcional)</h4>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">EIN (Opcional)</label>\r\n              <input type=\"text\" value={formatEIN(formData.ein || '')} onChange={(e) => handleInputChange('ein', e.target.value.replace(/\\D/g, ''))} placeholder=\"12-3456789\" maxLength={10} disabled={loading}\r\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.ein ? 'border-red-300' : 'border-gray-300'}`} />\r\n              {errors.ein && <p className=\"mt-1 text-sm text-red-600\">{errors.ein}</p>}\r\n            </div>\r\n          )}\r\n\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">E-mail *</label>\r\n            <input type=\"email\" value={formData.email} onChange={(e) => handleInputChange('email', e.target.value)} placeholder=\"email@exemplo.com\" disabled={loading}\r\n              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.email ? 'border-red-300' : 'border-gray-300'}`} />\r\n            {errors.email && <p className=\"mt-1 text-sm text-red-600\">{errors.email}</p>}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Telefone *</label>\r\n            <input type=\"tel\" value={formatTelefone(formData.telefone)} onChange={(e) => handleInputChange('telefone', e.target.value.replace(/\\D/g, ''))} placeholder=\"(555) 123-4567\" maxLength={15} disabled={loading}\r\n              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.telefone ? 'border-red-300' : 'border-gray-300'}`} />\r\n            {errors.telefone && <p className=\"mt-1 text-sm text-red-600\">{errors.telefone}</p>}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Direita: Endereço */}\r\n        <div className=\"space-y-4\">\r\n          <h3 className=\"text-lg font-medium text-foreground dark:text-white\">Endereço</h3>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Endereço 1</label>\r\n            <input type=\"text\" value={formData.endereco1} onChange={(e) => handleInputChange('endereco1', e.target.value)} placeholder=\"123 Main Street\" disabled={loading}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\" />\r\n            {errors.endereco1 && <p className=\"mt-1 text-sm text-red-600\">{errors.endereco1}</p>}\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Endereço 2</label>\r\n            <input type=\"text\" value={formData.endereco2 || ''} onChange={(e) => handleInputChange('endereco2', e.target.value)} placeholder=\"Apt 101, Suite 200, etc\" disabled={loading}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\" />\r\n          </div>\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Cidade</label>\r\n              <input type=\"text\" value={formData.cidade} onChange={(e) => handleInputChange('cidade', e.target.value)} placeholder=\"New York\" disabled={loading}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\" />\r\n              {errors.cidade && <p className=\"mt-1 text-sm text-red-600\">{errors.cidade}</p>}\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Estado</label>\r\n              <input type=\"text\" value={formData.estado} onChange={(e) => handleInputChange('estado', e.target.value.toUpperCase().slice(0,2))} placeholder=\"NY\" maxLength={2} disabled={loading}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\" />\r\n              {errors.estado && <p className=\"mt-1 text-sm text-red-600\">{errors.estado}</p>}\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">CEP</label>\r\n            <input type=\"text\" value={formatZipCode(formData.zipcode)} onChange={(e) => handleInputChange('zipcode', e.target.value.replace(/\\D/g, ''))} placeholder=\"12345-6789\" maxLength={10} disabled={loading}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\" />\r\n            {errors.zipcode && <p className=\"mt-1 text-sm text-red-600\">{errors.zipcode}</p>}\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Observações</label>\r\n            <textarea value={formData.observacoes || ''} onChange={(e) => handleInputChange('observacoes', e.target.value)} rows={4} placeholder=\"Informações adicionais...\" disabled={loading}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Ações */}\r\n      <div className=\"flex justify-end gap-2 pt-2\">\r\n        <button\r\n          type=\"submit\"\r\n          disabled={loading}\r\n          className=\"inline-flex items-center gap-2 rounded-2xl bg-[#0098DA] px-4 py-2 text-sm text-white hover:brightness-110 disabled:opacity-70\"\r\n        >\r\n          {loading && (\r\n            <span className=\"inline-block h-4 w-4 animate-spin rounded-full border-2 border-white/60 border-t-white\" aria-hidden />\r\n          )}\r\n          <span>{loading ? 'Salvando…' : 'Salvar'}</span>\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={onCancel}\r\n          disabled={loading}\r\n          className=\"rounded-2xl border border-[#0098DA] px-4 py-2 text-sm text-[#0098DA] hover:bg-[#0098DA] hover:text-white\"\r\n        >\r\n          Cancelar\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\clientes\\ClienteList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\clientes\\Pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\propostas\\PropostaFormNova.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\propostas\\sections\\IdentificacaoSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\AuthInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\AuthPassword.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\ConfirmDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\FormContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\FormError.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\Loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\LogoutButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\PDFExportButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FileText' is defined but never used.","line":7,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { useState } from 'react'\r\nimport jsPDF from 'jspdf'\r\nimport html2canvas from 'html2canvas'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Download, FileText } from 'lucide-react'\r\n\r\ninterface PDFExportButtonProps {\r\n  elementId: string\r\n  filename?: string\r\n  disabled?: boolean\r\n  className?: string\r\n  children?: React.ReactNode\r\n}\r\n\r\nexport default function PDFExportButton({ \r\n  elementId, \r\n  filename = 'documento.pdf', \r\n  disabled = false,\r\n  className = '',\r\n  children \r\n}: PDFExportButtonProps) {\r\n  const [isGenerating, setIsGenerating] = useState(false)\r\n\r\n  const generatePDF = async () => {\r\n    try {\r\n      setIsGenerating(true)\r\n      \r\n      const element = document.getElementById(elementId)\r\n      if (!element) {\r\n        throw new Error(`Elemento com ID '${elementId}' não encontrado`)\r\n      }\r\n\r\n      // Create canvas from element\r\n      const canvas = await html2canvas(element, {\r\n        scale: 2, // Higher resolution\r\n        useCORS: true,\r\n        allowTaint: true,\r\n        backgroundColor: '#ffffff',\r\n        removeContainer: true,\r\n        imageTimeout: 10000,\r\n        logging: false\r\n      })\r\n\r\n      // Calculate dimensions\r\n      const imgData = canvas.toDataURL('image/png')\r\n      const pdf = new jsPDF({\r\n        orientation: 'portrait',\r\n        unit: 'mm',\r\n        format: 'a4'\r\n      })\r\n\r\n      const pageWidth = pdf.internal.pageSize.getWidth()\r\n      const pageHeight = pdf.internal.pageSize.getHeight()\r\n      const imgWidth = pageWidth - 20 // 10mm margin on each side\r\n      const imgHeight = (canvas.height * imgWidth) / canvas.width\r\n\r\n      let heightLeft = imgHeight\r\n      let position = 10 // Top margin\r\n\r\n      // Add first page\r\n      pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight)\r\n      heightLeft -= (pageHeight - 20) // Account for margins\r\n\r\n      // Add additional pages if needed\r\n      while (heightLeft > 0) {\r\n        position = heightLeft - imgHeight + 10\r\n        pdf.addPage()\r\n        pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight)\r\n        heightLeft -= (pageHeight - 20)\r\n      }\r\n\r\n      // Save the PDF\r\n      pdf.save(filename)\r\n\r\n    } catch (error) {\r\n      console.error('Erro ao gerar PDF:', error)\r\n      alert('Erro ao gerar PDF. Tente novamente.')\r\n    } finally {\r\n      setIsGenerating(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={generatePDF}\r\n      disabled={disabled || isGenerating}\r\n      className={className}\r\n      variant=\"outline\"\r\n    >\r\n      {isGenerating ? (\r\n        <>\r\n          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2\" />\r\n          Gerando PDF...\r\n        </>\r\n      ) : (\r\n        <>\r\n          {children || (\r\n            <>\r\n              <Download className=\"h-4 w-4 mr-2\" />\r\n              Exportar PDF\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </Button>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\PasswordInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\ProposalSignaturePad.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\SignaturePad.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\SubmitButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\TextInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\Toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\Toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\hooks\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\hooks\\useClienteOperations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\api\\client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\api\\stubs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\audit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\auditoria.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\blocking.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\crypto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\db-metadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\email.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\emails\\template-base.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\emails\\welcome.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\helpers\\cliente.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Usuario' is defined but never used.","line":1,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'tipoDocumentoPF' is defined but never used.","line":9,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":84},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'tipo' is defined but never used.","line":106,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3357,3360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3357,3360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5150,5153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5150,5153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":196,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5359,5362],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5359,5362],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":196,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5373,5376],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5373,5376],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5417,5420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5417,5420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5427,5430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5427,5430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Cliente, TipoCliente, Usuario } from '@prisma/client'\r\nimport { encryptDoc, docHashHex, last4 } from '@/lib/crypto'\r\nimport { prisma } from '@/server/db'\r\nimport { AuditService } from '@/services/auditService'\r\n\r\n/**\r\n * Mascara documento para exibição (agora para mercado americano)\r\n */\r\nexport function maskDocumento(documento: string, tipo: TipoCliente, tipoDocumentoPF?: string): string {\r\n  if (!documento) return ''\r\n  const onlyDigits = documento.replace(/\\D/g, '')\r\n\r\n  // If we only have the last 4 digits (privacy-safe storage), build a masked string\r\n  if (onlyDigits.length <= 4) {\r\n    const last4 = onlyDigits.padStart(4, '*')\r\n    if (tipo === 'PF') {\r\n      // SSN/ITIN masked: ***-**-1234\r\n      return `***-**-${last4}`\r\n    }\r\n    // PJ (EIN) masked: **-***1234\r\n    return `**-***${last4}`\r\n  }\r\n\r\n  // If full document provided, normalize formatting per type\r\n  if (tipo === 'PF') {\r\n    // SSN or ITIN share same 3-2-4 formatting; ITINs always start with 9\r\n    if (onlyDigits.length === 9) {\r\n      return `${onlyDigits.slice(0, 3)}-${onlyDigits.slice(3, 5)}-${onlyDigits.slice(5)}`\r\n    }\r\n  } else {\r\n    // EIN: 2-7 formatting\r\n    if (onlyDigits.length === 9) {\r\n      return `${onlyDigits.slice(0, 2)}-${onlyDigits.slice(2)}`\r\n    }\r\n  }\r\n\r\n  // Fallback: return as-is\r\n  return documento\r\n}\r\n\r\n/**\r\n * Extrai últimos 4 dígitos do documento\r\n */\r\nexport function getDocLast4(documento: string): string {\r\n  return last4(documento)\r\n}\r\n\r\n/**\r\n * Gera hash simples do documento para indexação\r\n */\r\nexport function hashDocumento(documento: string): string {\r\n  return docHashHex(documento)\r\n}\r\n\r\n/**\r\n * Formatar telefone para exibição\r\n */\r\nexport function formatTelefone(telefone: string): string {\r\n  if (!telefone) return ''\r\n\r\n  let digits = telefone.replace(/\\D/g, '')\r\n  // Handle US numbers: optionally strip leading country code 1\r\n  if (digits.length === 11 && digits.startsWith('1')) {\r\n    digits = digits.slice(1)\r\n  }\r\n  if (digits.length === 10) {\r\n    // (AAA) BBB-CCCC\r\n    return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`\r\n  }\r\n  return telefone\r\n}\r\n\r\n/**\r\n * Formatar CEP para exibição\r\n */\r\nexport function formatZipcode(zipcode: string): string {\r\n  if (!zipcode) return ''\r\n\r\n  const digits = zipcode.replace(/\\D/g, '')\r\n  // US ZIP: 5 or 9 (ZIP+4)\r\n  if (digits.length === 9) {\r\n    return `${digits.slice(0, 5)}-${digits.slice(5)}`\r\n  }\r\n  if (digits.length === 5) {\r\n    return digits\r\n  }\r\n  return zipcode\r\n}\r\n\r\n/**\r\n * Obter nome completo ou razão social baseado no tipo\r\n */\r\nexport function getClienteDisplayName(cliente: Cliente): string {\r\n  if (cliente.tipo === 'PF') {\r\n    return cliente.nomeCompleto || 'Nome não informado'\r\n  } else {\r\n    return cliente.nomeFantasia || cliente.razaoSocial || 'Razão social não informada'\r\n  }\r\n}\r\n\r\n/**\r\n * Preparar dados do cliente para criptografia\r\n */\r\nexport async function encryptClienteData(\r\n  documento: string,\r\n  tipo: TipoCliente\r\n): Promise<{\r\n  documentoEnc: string\r\n  docLast4: string\r\n  docHash: string\r\n}> {\r\n  const documentoEnc = await encryptDoc(documento)\r\n  const docLast4 = getDocLast4(documento)\r\n  const docHash = hashDocumento(documento)\r\n  \r\n  return {\r\n    documentoEnc,\r\n    docLast4,\r\n    docHash\r\n  }\r\n}\r\n\r\n/**\r\n * Sanitizar entrada do usuário\r\n */\r\nexport function sanitizeClienteInput(data: any) {\r\n  return {\r\n    ...data,\r\n    nomeCompleto: data.nomeCompleto?.trim() || null,\r\n    razaoSocial: data.razaoSocial?.trim() || null,\r\n    nomeFantasia: data.nomeFantasia?.trim() || null,\r\n    email: data.email?.trim().toLowerCase(),\r\n    telefone: data.telefone?.replace(/\\D/g, ''),\r\n  // documentos individuais (opcionais)\r\n  tipoDocumentoPF: data.tipoDocumentoPF ?? null,\r\n  ssn: data.ssn ? String(data.ssn).replace(/\\D/g, '') : null,\r\n  itin: data.itin ? String(data.itin).replace(/\\D/g, '') : null,\r\n  ein: data.ein ? String(data.ein).replace(/\\D/g, '') : null,\r\n    endereco1: data.endereco1?.trim(),\r\n    endereco2: data.endereco2?.trim() || null,\r\n    cidade: data.cidade?.trim(),\r\n    estado: data.estado?.trim(),\r\n    zipcode: data.zipcode?.replace(/\\D/g, ''),\r\n    observacoes: data.observacoes?.trim() || null\r\n  }\r\n}\r\n\r\n/**\r\n * Validar se documento já existe\r\n */\r\nexport async function checkDocumentoExists(documento?: string | null, excludeId?: number): Promise<boolean> {\r\n  if (!documento) return false\r\n  const docHash = hashDocumento(documento)\r\n  \r\n  const existing = await prisma.cliente.findFirst({\r\n    where: {\r\n      docHash,\r\n      id: excludeId ? { not: excludeId } : undefined\r\n    },\r\n    select: { id: true }\r\n  })\r\n  \r\n  return !!existing\r\n}\r\n\r\n/**\r\n * Validar se email já existe\r\n */\r\nexport async function checkEmailExists(email: string, excludeId?: number): Promise<boolean> {\r\n  const existing = await prisma.cliente.findFirst({\r\n    where: {\r\n      email: email.toLowerCase(),\r\n      id: excludeId ? { not: excludeId } : undefined\r\n    },\r\n    select: { id: true }\r\n  })\r\n  \r\n  return !!existing\r\n}\r\n\r\n/**\r\n * Registrar mudanças para auditoria\r\n */\r\nexport async function logClienteAudit(\r\n  clienteId: number,\r\n  acao: string,\r\n  diff: Record<string, any>,\r\n  userId: number\r\n) {\r\n  return AuditService.logAction(userId, 'Cliente', clienteId, acao, diff)\r\n}\r\n\r\n/**\r\n * Calcular diff entre estados do cliente\r\n */\r\nexport function calculateClienteDiff(oldData: any, newData: any) {\r\n  const diff: Record<string, { old: any; new: any }> = {}\r\n  \r\n  const fields = [\r\n    'tipo', 'nomeCompleto', 'razaoSocial', 'nomeFantasia', 'email',\r\n    'telefone', 'endereco1', 'endereco2', 'cidade', 'estado', \r\n    'zipcode', 'observacoes', 'status'\r\n  ]\r\n  \r\n  for (const field of fields) {\r\n    const oldVal = oldData[field]\r\n    const newVal = newData[field]\r\n    \r\n    if (oldVal !== newVal) {\r\n      diff[field] = { old: oldVal, new: newVal }\r\n    }\r\n  }\r\n  \r\n  // Para documento, não logamos o valor real, apenas que mudou\r\n  if (oldData.docHash !== newData.docHash) {\r\n    diff.documento = { old: '[DOCUMENTO]', new: '[DOCUMENTO ALTERADO]' }\r\n  }\r\n  \r\n  return diff\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\jwt.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\mailer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\mfa.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\notifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\password.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\passwords.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\prisma.ts","messages":[],"suppressedMessages":[{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":7,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":7,"endColumn":42,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\rate-limit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\rbac-core.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\rbac.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\requireServerUser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\security.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":101,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":108,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":15}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/lib/security.ts\r\nimport { prisma } from \"@/server/db\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport crypto from \"crypto\";\r\n\r\n// Minimal Prisma delegate types we consume\r\ntype SessaoAtivaRow = {\r\n  id: number;\r\n  usuarioId: number;\r\n  token: string;\r\n  ip: string | null;\r\n  userAgent: string | null;\r\n  cidade: string | null;\r\n  pais: string | null;\r\n  ultimaAtividade: Date;\r\n  criadoEm: Date;\r\n};\r\n\r\ntype HistoricoSenhaRow = {\r\n  id: number;\r\n  usuarioId: number;\r\n  senhaHash: string;\r\n  criadaEm: Date;\r\n};\r\n\r\ntype TentativaLoginRow = {\r\n  id: number;\r\n  email: string;\r\n  ip: string | null;\r\n  userAgent: string | null;\r\n  sucesso: boolean;\r\n  criadaEm: Date;\r\n};\r\n\r\ninterface SessaoAtivaDelegate {\r\n  create(args: { data: { usuarioId: number; token: string; ip?: string | null; userAgent?: string | null } }): Promise<SessaoAtivaRow>;\r\n  update(args: { where: { token: string }; data: { ultimaAtividade: Date } }): Promise<SessaoAtivaRow>;\r\n  findMany(args: { where?: { usuarioId?: number; token?: string; }; include?: unknown; orderBy?: { ultimaAtividade: 'desc' | 'asc' } }): Promise<SessaoAtivaRow[]>;\r\n  delete(args: { where: { id: number } }): Promise<SessaoAtivaRow>;\r\n  deleteMany(args: { where?: { usuarioId?: number; token?: string; ultimaAtividade?: { lt?: Date } } }): Promise<{ count: number }>;\r\n}\r\n\r\ninterface HistoricoSenhaDelegate {\r\n  create(args: { data: { usuarioId: number; senhaHash: string } }): Promise<HistoricoSenhaRow>;\r\n  findMany(args: { where: { usuarioId: number }; orderBy: { criadaEm: 'desc' }; skip?: number; take?: number; select?: { id?: true; senhaHash?: true } }): Promise<HistoricoSenhaRow[]>;\r\n  deleteMany(args: { where: { id: { in: number[] } } }): Promise<{ count: number }>;\r\n}\r\n\r\ninterface TentativaLoginDelegate {\r\n  findMany(args: { where?: { sucesso?: boolean; criadaEm?: { gt?: Date } }; orderBy: { criadaEm: 'desc' }; take?: number; select: { id: true; email: true; ip: true; userAgent: true; sucesso: true; criadaEm: true } }): Promise<TentativaLoginRow[]>;\r\n}\r\n\r\nfunction sessaoAtiva(): SessaoAtivaDelegate {\r\n  return (prisma as unknown as { sessaoAtiva: SessaoAtivaDelegate }).sessaoAtiva;\r\n}\r\nfunction historicoSenha(): HistoricoSenhaDelegate {\r\n  return (prisma as unknown as { historicoSenha: HistoricoSenhaDelegate }).historicoSenha;\r\n}\r\nfunction tentativaLogin(): TentativaLoginDelegate {\r\n  return (prisma as unknown as { tentativaLogin: TentativaLoginDelegate }).tentativaLogin;\r\n}\r\n\r\nexport interface SessionInfo {\r\n  id: number;\r\n  token: string;\r\n  ip?: string;\r\n  userAgent?: string;\r\n  cidade?: string;\r\n  pais?: string;\r\n  ultimaAtividade: Date;\r\n  criadoEm: Date;\r\n}\r\n\r\nexport interface LoginAttempt {\r\n  id: number;\r\n  email: string;\r\n  ip?: string;\r\n  userAgent?: string;\r\n  sucesso: boolean;\r\n  motivoFalha?: string;\r\n  criadoEm: Date;\r\n}\r\n\r\n// Constantes de segurança\r\nconst SESSION_TIMEOUT = 24 * 60 * 60 * 1000; // 24 horas\r\nconst PASSWORD_HISTORY_LIMIT = 5;\r\n\r\nexport class SecurityService {\r\n  \r\n  // === GESTÃO DE SESSÕES ATIVAS ===\r\n  static async createSession(\r\n    usuarioId: number, \r\n    ip?: string, \r\n    userAgent?: string\r\n  ): Promise<string> {\r\n    const token = crypto.randomBytes(32).toString('hex');\r\n    \r\n    // Limpar sessões expiradas (tolerante a tabela ausente)\r\n    try {\r\n      await this.cleanExpiredSessions();\r\n    } catch (e) {\r\n      // Evitar quebra do login se a tabela SessaoAtiva ainda não existir\r\n    }\r\n\r\n    // Política de sessão única: revogar todas as sessões anteriores do usuário\r\n    try {\r\n      await this.revokeAllUserSessions(usuarioId);\r\n    } catch (e) {\r\n      // continuar mesmo se falhar\r\n    }\r\n\r\n    // Criar nova sessão usando modelo Prisma (ou fallback SQL se indisponível)\r\n    const delegate = (prisma as unknown as { sessaoAtiva?: SessaoAtivaDelegate }).sessaoAtiva;\r\n    if (delegate?.create) {\r\n      await delegate.create({\r\n        data: {\r\n          usuarioId,\r\n          token,\r\n          ip: ip || null,\r\n          userAgent: userAgent || null\r\n        }\r\n      });\r\n    } else {\r\n      await prisma.$executeRaw`\r\n        INSERT INTO SessaoAtiva (usuarioId, token, ip, userAgent, ultimaAtividade, criadoEm)\r\n        VALUES (${usuarioId}, ${token}, ${ip || null}, ${userAgent || null}, NOW(), NOW())\r\n      `;\r\n    }\r\n\r\n    return token;\r\n  }\r\n\r\n  static async updateSessionActivity(token: string) {\r\n    const delegate = (prisma as unknown as { sessaoAtiva?: SessaoAtivaDelegate }).sessaoAtiva;\r\n    if (delegate?.update) {\r\n      await delegate.update({\r\n        where: { token },\r\n        data: { ultimaAtividade: new Date() }\r\n      }).catch(() => {\r\n        // Sessão pode não existir (expirada ou revogada)\r\n      });\r\n      return;\r\n    }\r\n    // Fallback SQL\r\n    await prisma.$executeRaw`\r\n      UPDATE SessaoAtiva SET ultimaAtividade = NOW() WHERE token = ${token}\r\n    `;\r\n    // Sessão pode não existir (expirada ou revogada)\r\n  }\r\n\r\n  static async getUserSessions(usuarioId: number): Promise<SessionInfo[]> {\r\n    const delegate = (prisma as unknown as { sessaoAtiva?: SessaoAtivaDelegate }).sessaoAtiva;\r\n    let sessions: SessaoAtivaRow[];\r\n    if (delegate?.findMany) {\r\n      sessions = await delegate.findMany({\r\n        where: { usuarioId },\r\n        orderBy: { ultimaAtividade: 'desc' }\r\n      });\r\n    } else {\r\n      sessions = await prisma.$queryRaw<Array<SessaoAtivaRow>>`\r\n        SELECT id, usuarioId, token, ip, userAgent, cidade, pais, ultimaAtividade, criadoEm\r\n        FROM SessaoAtiva\r\n        WHERE usuarioId = ${usuarioId}\r\n        ORDER BY ultimaAtividade DESC\r\n      `;\r\n    }\r\n\r\n    return sessions.map(s => ({\r\n      id: s.id,\r\n      token: s.token,\r\n      ip: s.ip || undefined,\r\n      userAgent: s.userAgent || undefined,\r\n      cidade: s.cidade || undefined,\r\n      pais: s.pais || undefined,\r\n      ultimaAtividade: s.ultimaAtividade,\r\n      criadoEm: s.criadoEm\r\n    }));\r\n  }\r\n\r\n  static async revokeSession(sessionId: number) {\r\n    const delegate = (prisma as unknown as { sessaoAtiva?: SessaoAtivaDelegate }).sessaoAtiva;\r\n    if (delegate?.delete) {\r\n      await delegate.delete({\r\n        where: { id: sessionId }\r\n      }).catch(() => {\r\n        // Sessão pode já ter sido removida\r\n      });\r\n      return;\r\n    }\r\n    await prisma.$executeRaw`\r\n      DELETE FROM SessaoAtiva WHERE id = ${sessionId}\r\n    `;\r\n  }\r\n\r\n  static async revokeSessionByToken(token: string) {\r\n    const delegate = (prisma as unknown as { sessaoAtiva?: SessaoAtivaDelegate }).sessaoAtiva;\r\n    if (delegate?.deleteMany) {\r\n      await delegate.deleteMany({ where: { token } });\r\n      return;\r\n    }\r\n    await prisma.$executeRaw`\r\n      DELETE FROM SessaoAtiva WHERE token = ${token}\r\n    `;\r\n  }\r\n\r\n  static async revokeAllUserSessions(usuarioId: number) {\r\n    const delegate = (prisma as unknown as { sessaoAtiva?: SessaoAtivaDelegate }).sessaoAtiva;\r\n    if (delegate?.deleteMany) {\r\n      await delegate.deleteMany({ where: { usuarioId } });\r\n      return;\r\n    }\r\n    await prisma.$executeRaw`\r\n      DELETE FROM SessaoAtiva WHERE usuarioId = ${usuarioId}\r\n    `;\r\n  }\r\n\r\n  static async cleanExpiredSessions() {\r\n    const expiredTime = new Date(Date.now() - SESSION_TIMEOUT);\r\n    const delegate = (prisma as unknown as { sessaoAtiva?: SessaoAtivaDelegate }).sessaoAtiva;\r\n    if (delegate?.deleteMany) {\r\n      await delegate.deleteMany({ where: { ultimaAtividade: { lt: expiredTime } } });\r\n      return;\r\n    }\r\n    await prisma.$executeRaw`\r\n      DELETE FROM SessaoAtiva WHERE ultimaAtividade < ${expiredTime}\r\n    `;\r\n  }\r\n\r\n  // === GESTÃO DE HISTÓRICO DE SENHAS ===\r\n  static async addPasswordToHistory(usuarioId: number, passwordHash: string) {\r\n  await historicoSenha().create({\r\n      data: {\r\n        usuarioId,\r\n        senhaHash: passwordHash\r\n      }\r\n    });\r\n\r\n    // Limitar histórico\r\n  const oldPasswords = await historicoSenha().findMany({\r\n      where: { usuarioId },\r\n      orderBy: { criadaEm: 'desc' },\r\n      skip: PASSWORD_HISTORY_LIMIT,\r\n      select: { id: true }\r\n    });\r\n\r\n    if (oldPasswords.length > 0) {\r\n  await historicoSenha().deleteMany({\r\n        where: {\r\n          id: { in: oldPasswords.map(p => p.id) }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  static async isPasswordReused(usuarioId: number, newPassword: string): Promise<boolean> {\r\n  const recentPasswords = await historicoSenha().findMany({\r\n      where: { usuarioId },\r\n      orderBy: { criadaEm: 'desc' },\r\n      take: PASSWORD_HISTORY_LIMIT,\r\n      select: { senhaHash: true }\r\n    });\r\n\r\n    for (const old of recentPasswords) {\r\n      if (await bcrypt.compare(newPassword, old.senhaHash)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // === RELATÓRIOS DE SEGURANÇA ===\r\n  static async getLoginAttempts(limit: number = 100): Promise<LoginAttempt[]> {\r\n    const attempts = await tentativaLogin().findMany({\r\n      orderBy: { criadaEm: 'desc' },\r\n      take: limit,\r\n      select: {\r\n        id: true,\r\n        email: true,\r\n        ip: true,\r\n        userAgent: true,\r\n        sucesso: true,\r\n        criadaEm: true\r\n      }\r\n    });\r\n\r\n    return attempts.map(a => ({\r\n      id: a.id,\r\n      email: a.email,\r\n      ip: a.ip || undefined,\r\n      userAgent: a.userAgent || undefined,\r\n      sucesso: a.sucesso,\r\n      criadoEm: a.criadaEm\r\n    }));\r\n  }\r\n\r\n  static async getFailedLogins(hours: number = 24): Promise<LoginAttempt[]> {\r\n    const since = new Date(Date.now() - hours * 60 * 60 * 1000);\r\n  const attempts = await tentativaLogin().findMany({\r\n      where: {\r\n        sucesso: false,\r\n        criadaEm: { gt: since }\r\n      },\r\n      orderBy: { criadaEm: 'desc' },\r\n      select: {\r\n        id: true,\r\n        email: true,\r\n        ip: true,\r\n        userAgent: true,\r\n        sucesso: true,\r\n        criadaEm: true\r\n      }\r\n    });\r\n\r\n    return attempts.map(a => ({\r\n      id: a.id,\r\n      email: a.email,\r\n      ip: a.ip || undefined,\r\n      userAgent: a.userAgent || undefined,\r\n      sucesso: a.sucesso,\r\n      criadoEm: a.criadaEm\r\n    }));\r\n  }\r\n\r\n  // Tentativas (sucesso e falha) de um usuário específico\r\n  static async getLoginAttemptsByUser(userId: number, limit: number = 100): Promise<LoginAttempt[]> {\r\n    const rows = await prisma.$queryRaw<Array<{\r\n      id: number;\r\n      email: string;\r\n      ip: string | null;\r\n      userAgent: string | null;\r\n      sucesso: boolean;\r\n      motivo: string | null;\r\n      criadaEm: Date;\r\n    }>>`\r\n      SELECT id, email, ip, userAgent, sucesso, motivo, criadaEm\r\n      FROM TentativaLogin\r\n      WHERE usuarioId = ${userId}\r\n      ORDER BY criadaEm DESC\r\n      LIMIT ${limit}\r\n    `;\r\n\r\n    return rows.map(r => ({\r\n      id: r.id,\r\n      email: r.email,\r\n      ip: r.ip || undefined,\r\n      userAgent: r.userAgent || undefined,\r\n      sucesso: r.sucesso,\r\n      motivoFalha: r.motivo || undefined,\r\n      criadoEm: r.criadaEm\r\n    }));\r\n  }\r\n\r\n  static async getActiveSessions(): Promise<SessionInfo[]> {\r\n  const sessions = await sessaoAtiva().findMany({\r\n      include: {\r\n        usuario: {\r\n          select: {\r\n            nomeCompleto: true,\r\n            email: true\r\n          }\r\n        }\r\n      },\r\n      orderBy: { ultimaAtividade: 'desc' }\r\n    });\r\n\r\n    return sessions.map(s => ({\r\n      id: s.id,\r\n      token: s.token,\r\n      ip: s.ip || undefined,\r\n      userAgent: s.userAgent || undefined,\r\n      cidade: s.cidade || undefined,\r\n      pais: s.pais || undefined,\r\n      ultimaAtividade: s.ultimaAtividade,\r\n      criadoEm: s.criadoEm\r\n    }));\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\services\\emailService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[388,391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[388,391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1425,1428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1425,1428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3847,3850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3847,3850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Email service for sending proposal notifications\r\nimport nodemailer from 'nodemailer'\r\n\r\ninterface EmailConfig {\r\n  host: string\r\n  port: number\r\n  secure: boolean\r\n  auth: {\r\n    user: string\r\n    pass: string\r\n  }\r\n}\r\n\r\ninterface SendEmailParams {\r\n  to: string\r\n  subject: string\r\n  html: string\r\n  cc?: string[]\r\n  bcc?: string[]\r\n}\r\n\r\nclass EmailService {\r\n  private transporter: any\r\n\r\n  constructor() {\r\n    const config: EmailConfig = {\r\n      host: process.env.SMTP_HOST || 'localhost',\r\n      port: parseInt(process.env.SMTP_PORT || '587'),\r\n      secure: process.env.SMTP_SECURE === 'true',\r\n      auth: {\r\n        user: process.env.SMTP_USER || '',\r\n        pass: process.env.SMTP_PASS || ''\r\n      }\r\n    }\r\n\r\n  this.transporter = nodemailer.createTransport(config)\r\n  }\r\n\r\n  async sendEmail({ to, subject, html, cc, bcc }: SendEmailParams) {\r\n    try {\r\n      const info = await this.transporter.sendMail({\r\n        from: process.env.SMTP_FROM || process.env.SMTP_USER,\r\n        to,\r\n        cc,\r\n        bcc,\r\n        subject,\r\n        html\r\n      })\r\n\r\n      console.log('Email enviado:', info.messageId)\r\n      return { success: true, messageId: info.messageId }\r\n    } catch (error) {\r\n      console.error('Erro ao enviar email:', error)\r\n      return { success: false, error: error instanceof Error ? error.message : 'Erro desconhecido' }\r\n    }\r\n  }\r\n\r\n  async sendProposalSignedNotification(proposal: any, clientName: string) {\r\n    const subject = `Proposta ${proposal.numeroProposta} foi assinada pelo cliente`\r\n    \r\n    const html = `\r\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\r\n        <div style=\"background: #4f46e5; color: white; padding: 20px; text-align: center;\">\r\n          <h1>Proposta Assinada</h1>\r\n        </div>\r\n        \r\n        <div style=\"padding: 20px; background: #f9fafb;\">\r\n          <h2>Boa notícia!</h2>\r\n          <p>A proposta <strong>${proposal.numeroProposta}</strong> foi assinada pelo cliente.</p>\r\n          \r\n          <div style=\"background: white; padding: 15px; border-radius: 8px; margin: 20px 0;\">\r\n            <h3>Detalhes da Proposta:</h3>\r\n            <ul style=\"line-height: 1.6;\">\r\n              <li><strong>Número:</strong> ${proposal.numeroProposta}</li>\r\n              <li><strong>Cliente:</strong> ${proposal.cliente?.nome || 'N/A'}</li>\r\n              <li><strong>Valor:</strong> ${proposal.valorEstimado ? `$${proposal.valorEstimado.toLocaleString()}` : 'N/A'}</li>\r\n              <li><strong>Assinado por:</strong> ${clientName}</li>\r\n              <li><strong>Data da assinatura:</strong> ${new Date().toLocaleString('pt-BR')}</li>\r\n            </ul>\r\n          </div>\r\n          \r\n          <p>A proposta agora está no status <strong>ASSINADA</strong> e está pronta para aprovação.</p>\r\n          \r\n          <div style=\"text-align: center; margin: 30px 0;\">\r\n            <a href=\"${process.env.NEXTAUTH_URL}/propostas/${proposal.id}\" \r\n               style=\"background: #4f46e5; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;\">\r\n              Ver Proposta no Sistema\r\n            </a>\r\n          </div>\r\n        </div>\r\n        \r\n        <div style=\"padding: 20px; text-align: center; color: #6b7280; font-size: 14px;\">\r\n          <p>GladPros - Sistema de Gestão de Propostas</p>\r\n          <p>Este é um email automático, não responda a esta mensagem.</p>\r\n        </div>\r\n      </div>\r\n    `\r\n\r\n    // Send to system administrators or proposal managers\r\n    const recipients = process.env.PROPOSAL_NOTIFICATION_EMAILS?.split(',') || ['admin@gladpros.com']\r\n    \r\n    for (const recipient of recipients) {\r\n      await this.sendEmail({\r\n        to: recipient.trim(),\r\n        subject,\r\n        html\r\n      })\r\n    }\r\n  }\r\n\r\n  async sendProposalSentNotification(proposal: any, clientEmail: string) {\r\n    const subject = `Nova proposta comercial para sua análise - ${proposal.numeroProposta}`\r\n    \r\n    const proposalUrl = `${process.env.NEXTAUTH_URL}/p/${proposal.numeroProposta}`\r\n    \r\n    const html = `\r\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\r\n        <div style=\"background: #059669; color: white; padding: 20px; text-align: center;\">\r\n          <h1>Nova Proposta Comercial</h1>\r\n        </div>\r\n        \r\n        <div style=\"padding: 20px; background: #f0fdf4;\">\r\n          <h2>Olá!</h2>\r\n          <p>Você recebeu uma nova proposta comercial da GladPros.</p>\r\n          \r\n          <div style=\"background: white; padding: 15px; border-radius: 8px; margin: 20px 0;\">\r\n            <h3>Detalhes da Proposta:</h3>\r\n            <ul style=\"line-height: 1.6;\">\r\n              <li><strong>Número:</strong> ${proposal.numeroProposta}</li>\r\n              <li><strong>Descrição:</strong> ${proposal.descricao}</li>\r\n              <li><strong>Valor Estimado:</strong> ${proposal.valorEstimado ? `$${proposal.valorEstimado.toLocaleString()}` : 'A consultar'}</li>\r\n              <li><strong>Data de Criação:</strong> ${new Date(proposal.dataCriacao).toLocaleDateString('pt-BR')}</li>\r\n            </ul>\r\n          </div>\r\n          \r\n          <p>Para visualizar todos os detalhes e assinar a proposta, clique no botão abaixo:</p>\r\n          \r\n          <div style=\"text-align: center; margin: 30px 0;\">\r\n            <a href=\"${proposalUrl}\" \r\n               style=\"background: #059669; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;\">\r\n              Visualizar e Assinar Proposta\r\n            </a>\r\n          </div>\r\n          \r\n          <div style=\"background: #fef3c7; padding: 15px; border-radius: 8px; border-left: 4px solid #f59e0b;\">\r\n            <p><strong>Importante:</strong> Este link é único e pessoal. Não compartilhe com terceiros.</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div style=\"padding: 20px; text-align: center; color: #6b7280; font-size: 14px;\">\r\n          <p>GladPros - Sistema de Gestão de Propostas</p>\r\n          <p>Em caso de dúvidas, entre em contato conosco.</p>\r\n        </div>\r\n      </div>\r\n    `\r\n\r\n    return await this.sendEmail({\r\n      to: clientEmail,\r\n      subject,\r\n      html\r\n    })\r\n  }\r\n}\r\n\r\nexport const emailService = new EmailService()\r\nexport default emailService\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\services\\notificationService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NextApiRequest' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NextApiResponse' is defined but never used.","line":3,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[554,557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[554,557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Real-time notification system using WebSockets\r\nimport { Server as SocketIOServer } from 'socket.io'\r\nimport { NextApiRequest, NextApiResponse } from 'next'\r\n\r\nexport interface NotificationPayload {\r\n  type: 'proposal_signed' | 'proposal_sent' | 'proposal_approved' | 'proposal_cancelled'\r\n  data: {\r\n    proposalId: string\r\n    proposalNumber: string\r\n    clientName?: string\r\n    signedBy?: string\r\n    timestamp: string\r\n    message: string\r\n  }\r\n}\r\n\r\nclass NotificationService {\r\n  private io: SocketIOServer | null = null\r\n\r\n  initialize(server: any) {\r\n    if (!this.io) {\r\n      this.io = new SocketIOServer(server, {\r\n        cors: {\r\n          origin: \"*\",\r\n          methods: [\"GET\", \"POST\"]\r\n        }\r\n      })\r\n\r\n      this.io.on('connection', (socket) => {\r\n        console.log('Cliente conectado:', socket.id)\r\n\r\n        // Join room for user notifications\r\n        socket.on('join_user_room', (userId: string) => {\r\n          socket.join(`user_${userId}`)\r\n          console.log(`Usuario ${userId} joined room`)\r\n        })\r\n\r\n        socket.on('disconnect', () => {\r\n          console.log('Cliente desconectado:', socket.id)\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  sendNotification(payload: NotificationPayload, userId?: string) {\r\n    if (!this.io) {\r\n      console.warn('Socket.IO not initialized')\r\n      return\r\n    }\r\n\r\n    if (userId) {\r\n      // Send to specific user\r\n      this.io.to(`user_${userId}`).emit('notification', payload)\r\n    } else {\r\n      // Broadcast to all connected clients\r\n      this.io.emit('notification', payload)\r\n    }\r\n  }\r\n\r\n  sendProposalSignedNotification(proposalId: string, proposalNumber: string, clientName: string, signedBy: string) {\r\n    const payload: NotificationPayload = {\r\n      type: 'proposal_signed',\r\n      data: {\r\n        proposalId,\r\n        proposalNumber,\r\n        clientName,\r\n        signedBy,\r\n        timestamp: new Date().toISOString(),\r\n        message: `Proposta ${proposalNumber} foi assinada por ${signedBy}`\r\n      }\r\n    }\r\n\r\n    this.sendNotification(payload)\r\n  }\r\n\r\n  sendProposalSentNotification(proposalId: string, proposalNumber: string, clientName: string) {\r\n    const payload: NotificationPayload = {\r\n      type: 'proposal_sent',\r\n      data: {\r\n        proposalId,\r\n        proposalNumber,\r\n        clientName,\r\n        timestamp: new Date().toISOString(),\r\n        message: `Proposta ${proposalNumber} foi enviada para ${clientName}`\r\n      }\r\n    }\r\n\r\n    this.sendNotification(payload)\r\n  }\r\n}\r\n\r\nexport const notificationService = new NotificationService()\r\nexport default notificationService\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\services\\proposta-email.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[686,689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[686,689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[832,835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[832,835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[941,944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[941,944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2383,2386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2383,2386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2926,2929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2926,2929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":167,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4196,4199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4196,4199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5474,5477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5474,5477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":473,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":473,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15120,15123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15120,15123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":525,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":525,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17525,17528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17525,17528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as nodemailer from 'nodemailer'\r\nimport { generateTokenPublico } from './proposta-token'\r\nimport { PropostaPDFService, type PropostaWithRelations, type RBACContext } from './proposta-pdf'\r\n\r\ninterface EmailTemplate {\r\n  subject: string\r\n  html: string\r\n  text?: string\r\n}\r\n\r\ninterface PropostaEmailOptions {\r\n  /**\r\n   * Incluir PDF da proposta como anexo\r\n   */\r\n  includePDF?: boolean\r\n  \r\n  /**\r\n   * Template de email a ser usado\r\n   */\r\n  template?: 'send-proposal' | 'reminder' | 'signed' | 'approved'\r\n  \r\n  /**\r\n   * Configurações personalizadas\r\n   */\r\n  customMessage?: string\r\n  \r\n  /**\r\n   * Dados adicionais para o template\r\n   */\r\n  templateData?: Record<string, any>\r\n}\r\n\r\n/**\r\n * Serviço para envio de emails relacionados a propostas\r\n */\r\nexport class PropostaEmailService {\r\n  private static transporter: any | null = null\r\n\r\n  /**\r\n   * Configura o transporter de email\r\n   */\r\n  private static getTransporter(): any {\r\n    if (!this.transporter) {\r\n      this.transporter = nodemailer.createTransporter({\r\n        host: process.env.SMTP_HOST || 'localhost',\r\n        port: parseInt(process.env.SMTP_PORT || '587'),\r\n        secure: process.env.SMTP_SECURE === 'true',\r\n        auth: {\r\n          user: process.env.SMTP_USER,\r\n          pass: process.env.SMTP_PASS\r\n        }\r\n      })\r\n    }\r\n    \r\n    return this.transporter\r\n  }\r\n\r\n  /**\r\n   * Envia proposta para o cliente por email\r\n   */\r\n  static async sendPropostaToClient(\r\n    proposta: PropostaWithRelations,\r\n    options: PropostaEmailOptions = {}\r\n  ): Promise<{\r\n    success: boolean\r\n    messageId?: string\r\n    error?: string\r\n    tokenPublico?: string\r\n  }> {\r\n    try {\r\n      // Gerar token público se não existir\r\n      let tokenPublico = proposta.tokenPublico\r\n      if (!tokenPublico) {\r\n        const tokenResult = await generateTokenPublico()\r\n        tokenPublico = tokenResult.token\r\n        // TODO: Salvar token no banco de dados\r\n      }\r\n\r\n      // Configurar contexto RBAC para cliente\r\n      const rbacContext: RBACContext = {\r\n        isClientAccess: true,\r\n        permissions: ['propostas.view'],\r\n        userRole: 'client'\r\n      }\r\n\r\n      // Gerar template de email\r\n      const emailTemplate = this.generateEmailTemplate(\r\n        proposta,\r\n        tokenPublico,\r\n        options.template || 'send-proposal',\r\n        options\r\n      )\r\n\r\n      const attachments: any[] = []\r\n\r\n      // Incluir PDF se solicitado\r\n      if (options.includePDF) {\r\n        const { buffer, filename } = await PropostaPDFService.generatePDF(\r\n          proposta,\r\n          rbacContext,\r\n          {\r\n            template: 'client',\r\n            includeValues: true,\r\n            watermark: 'CONFIDENCIAL'\r\n          }\r\n        )\r\n\r\n        attachments.push({\r\n          filename,\r\n          content: buffer,\r\n          contentType: 'application/pdf'\r\n        })\r\n      }\r\n\r\n      // Configurar email\r\n      const mailOptions: any = {\r\n        from: process.env.SMTP_FROM || 'GladPros <noreply@gladpros.com>',\r\n        to: proposta.contatoEmail,\r\n        subject: emailTemplate.subject,\r\n        html: emailTemplate.html,\r\n        text: emailTemplate.text,\r\n        attachments\r\n      }\r\n\r\n      // Enviar email\r\n      const transporter = this.getTransporter()\r\n      const info = await transporter.sendMail(mailOptions)\r\n\r\n      return {\r\n        success: true,\r\n        messageId: info.messageId,\r\n        tokenPublico\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Erro ao enviar email da proposta:', error)\r\n      \r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Erro desconhecido'\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envia notificação de proposta assinada\r\n   */\r\n  static async notifyProposalSigned(\r\n    proposta: PropostaWithRelations,\r\n    signatureData: {\r\n      clientName: string\r\n      signedAt: Date\r\n      ip?: string\r\n      userAgent?: string\r\n    }\r\n  ): Promise<{ success: boolean; error?: string }> {\r\n    try {\r\n      const emailTemplate = this.generateEmailTemplate(\r\n        proposta,\r\n        '',\r\n        'signed',\r\n        {\r\n          templateData: signatureData\r\n        }\r\n      )\r\n\r\n      const mailOptions: any = {\r\n        from: process.env.SMTP_FROM || 'GladPros <noreply@gladpros.com>',\r\n        to: process.env.NOTIFICATION_EMAIL || 'admin@gladpros.com',\r\n        cc: process.env.SALES_EMAIL ? [process.env.SALES_EMAIL] : undefined,\r\n        subject: emailTemplate.subject,\r\n        html: emailTemplate.html,\r\n        text: emailTemplate.text\r\n      }\r\n\r\n      const transporter = this.getTransporter()\r\n      await transporter.sendMail(mailOptions)\r\n\r\n      return { success: true }\r\n\r\n    } catch (error) {\r\n      console.error('Erro ao notificar assinatura:', error)\r\n      \r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Erro desconhecido'\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envia lembrete para cliente assinar proposta\r\n   */\r\n  static async sendReminder(\r\n    proposta: PropostaWithRelations,\r\n    daysOverdue: number\r\n  ): Promise<{ success: boolean; error?: string }> {\r\n    try {\r\n      if (!proposta.tokenPublico) {\r\n        throw new Error('Proposta não possui token público')\r\n      }\r\n\r\n      const emailTemplate = this.generateEmailTemplate(\r\n        proposta,\r\n        proposta.tokenPublico,\r\n        'reminder',\r\n        {\r\n          templateData: { daysOverdue }\r\n        }\r\n      )\r\n\r\n      const mailOptions: any = {\r\n        from: process.env.SMTP_FROM || 'GladPros <noreply@gladpros.com>',\r\n        to: proposta.contatoEmail,\r\n        subject: emailTemplate.subject,\r\n        html: emailTemplate.html,\r\n        text: emailTemplate.text\r\n      }\r\n\r\n      const transporter = this.getTransporter()\r\n      await transporter.sendMail(mailOptions)\r\n\r\n      return { success: true }\r\n\r\n    } catch (error) {\r\n      console.error('Erro ao enviar lembrete:', error)\r\n      \r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Erro desconhecido'\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gera templates de email baseado no tipo\r\n   */\r\n  private static generateEmailTemplate(\r\n    proposta: PropostaWithRelations,\r\n    tokenPublico: string,\r\n    template: string,\r\n    options: PropostaEmailOptions = {}\r\n  ): EmailTemplate {\r\n    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'\r\n    const proposalUrl = `${baseUrl}/p/${tokenPublico}`\r\n    \r\n    switch (template) {\r\n      case 'send-proposal':\r\n        return {\r\n          subject: `Proposta Comercial ${proposta.numeroProposta} - GladPros`,\r\n          html: this.generateSendProposalHTML(proposta, proposalUrl, options),\r\n          text: this.generateSendProposalText(proposta, proposalUrl, options)\r\n        }\r\n\r\n      case 'reminder':\r\n        const daysOverdue = options.templateData?.daysOverdue || 0\r\n        return {\r\n          subject: `Lembrete: Proposta ${proposta.numeroProposta} aguarda sua análise`,\r\n          html: this.generateReminderHTML(proposta, proposalUrl, daysOverdue),\r\n          text: this.generateReminderText(proposta, proposalUrl, daysOverdue)\r\n        }\r\n\r\n      case 'signed':\r\n        const signatureData = options.templateData || {}\r\n        return {\r\n          subject: `✅ Proposta ${proposta.numeroProposta} foi assinada`,\r\n          html: this.generateSignedHTML(proposta, signatureData),\r\n          text: this.generateSignedText(proposta, signatureData)\r\n        }\r\n\r\n      case 'approved':\r\n        return {\r\n          subject: `🎉 Proposta ${proposta.numeroProposta} aprovada internamente`,\r\n          html: this.generateApprovedHTML(proposta),\r\n          text: this.generateApprovedText(proposta)\r\n        }\r\n\r\n      default:\r\n        throw new Error(`Template não reconhecido: ${template}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * HTML template para envio de proposta\r\n   */\r\n  private static generateSendProposalHTML(\r\n    proposta: PropostaWithRelations,\r\n    proposalUrl: string,\r\n    options: PropostaEmailOptions\r\n  ): string {\r\n    const customMessage = options.customMessage ? `\r\n      <div style=\"background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;\">\r\n        <p style=\"margin: 0; font-style: italic;\">${options.customMessage}</p>\r\n      </div>\r\n    ` : ''\r\n\r\n    return `\r\n    <!DOCTYPE html>\r\n    <html lang=\"pt-BR\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <title>Proposta Comercial</title>\r\n    </head>\r\n    <body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\r\n      <div style=\"text-align: center; margin-bottom: 30px;\">\r\n        <h1 style=\"color: #2563eb; margin-bottom: 10px;\">GladPros</h1>\r\n        <h2 style=\"color: #666; font-weight: normal;\">Proposta Comercial</h2>\r\n      </div>\r\n\r\n      <div style=\"background-color: #f0f9ff; padding: 20px; border-radius: 8px; margin-bottom: 20px;\">\r\n        <h3 style=\"margin-top: 0; color: #2563eb;\">Olá, ${proposta.contatoNome}!</h3>\r\n        \r\n        <p>Esperamos que você esteja bem. Temos o prazer de apresentar nossa proposta comercial para o projeto:</p>\r\n        \r\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0;\">\r\n          <h4 style=\"margin: 0; color: #374151;\">${proposta.titulo}</h4>\r\n          ${proposta.descricaoEscopo ? `<p style=\"margin: 10px 0 0 0; color: #6b7280;\">${proposta.descricaoEscopo}</p>` : ''}\r\n        </div>\r\n\r\n        ${customMessage}\r\n      </div>\r\n\r\n      <div style=\"text-align: center; margin: 30px 0;\">\r\n        <a href=\"${proposalUrl}\" \r\n           style=\"display: inline-block; background-color: #2563eb; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; font-size: 16px;\">\r\n          📄 Visualizar Proposta Completa\r\n        </a>\r\n      </div>\r\n\r\n      <div style=\"background-color: #fef3c7; padding: 15px; border-radius: 5px; margin: 20px 0;\">\r\n        <h4 style=\"margin-top: 0; color: #92400e;\">Informações Importantes:</h4>\r\n        <ul style=\"margin: 10px 0; padding-left: 20px; color: #92400e;\">\r\n          <li><strong>Número da Proposta:</strong> ${proposta.numeroProposta}</li>\r\n          ${proposta.validadeProposta ? `<li><strong>Válida até:</strong> ${new Date(proposta.validadeProposta).toLocaleDateString('pt-BR')}</li>` : ''}\r\n          <li>Este link é confidencial e pessoal</li>\r\n          <li>A assinatura digital é obrigatória para aprovação</li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center; color: #6b7280; font-size: 14px;\">\r\n        <p>Ficamos à disposição para esclarecer qualquer dúvida.</p>\r\n        <p><strong>GladPros</strong><br>\r\n        Email: contato@gladpros.com<br>\r\n        ${process.env.COMPANY_PHONE ? `Telefone: ${process.env.COMPANY_PHONE}` : ''}</p>\r\n      </div>\r\n    </body>\r\n    </html>\r\n    `\r\n  }\r\n\r\n  /**\r\n   * Text template para envio de proposta\r\n   */\r\n  private static generateSendProposalText(\r\n    proposta: PropostaWithRelations,\r\n    proposalUrl: string,\r\n    options: PropostaEmailOptions\r\n  ): string {\r\n    return `\r\nGladPros - Proposta Comercial\r\n\r\nOlá, ${proposta.contatoNome}!\r\n\r\nTemos o prazer de apresentar nossa proposta comercial para o projeto:\r\n${proposta.titulo}\r\n\r\n${proposta.descricaoEscopo || ''}\r\n\r\n${options.customMessage || ''}\r\n\r\nPara visualizar a proposta completa e proceder com a assinatura, acesse:\r\n${proposalUrl}\r\n\r\nInformações Importantes:\r\n- Número da Proposta: ${proposta.numeroProposta}\r\n${proposta.validadeProposta ? `- Válida até: ${new Date(proposta.validadeProposta).toLocaleDateString('pt-BR')}` : ''}\r\n- Este link é confidencial e pessoal\r\n- A assinatura digital é obrigatória para aprovação\r\n\r\nFicamos à disposição para esclarecer qualquer dúvida.\r\n\r\nGladPros\r\nEmail: contato@gladpros.com\r\n${process.env.COMPANY_PHONE ? `Telefone: ${process.env.COMPANY_PHONE}` : ''}\r\n    `.trim()\r\n  }\r\n\r\n  /**\r\n   * HTML template para lembrete\r\n   */\r\n  private static generateReminderHTML(\r\n    proposta: PropostaWithRelations,\r\n    proposalUrl: string,\r\n    daysOverdue: number\r\n  ): string {\r\n    return `\r\n    <!DOCTYPE html>\r\n    <html lang=\"pt-BR\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <title>Lembrete - Proposta Comercial</title>\r\n    </head>\r\n    <body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\r\n      <div style=\"text-align: center; margin-bottom: 30px;\">\r\n        <h1 style=\"color: #f59e0b; margin-bottom: 10px;\">⏰ Lembrete</h1>\r\n        <h2 style=\"color: #666; font-weight: normal;\">Proposta Aguarda Sua Análise</h2>\r\n      </div>\r\n\r\n      <div style=\"background-color: #fef3c7; padding: 20px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #f59e0b;\">\r\n        <h3 style=\"margin-top: 0; color: #92400e;\">Olá, ${proposta.contatoNome}!</h3>\r\n        \r\n        <p>Este é um lembrete amigável sobre a proposta <strong>${proposta.numeroProposta}</strong> que enviamos.</p>\r\n        \r\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0;\">\r\n          <h4 style=\"margin: 0; color: #374151;\">${proposta.titulo}</h4>\r\n          <p style=\"margin: 10px 0 0 0; color: #dc2626;\">\r\n            <strong>Status:</strong> Aguardando análise há ${daysOverdue} dias\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div style=\"text-align: center; margin: 30px 0;\">\r\n        <a href=\"${proposalUrl}\" \r\n           style=\"display: inline-block; background-color: #f59e0b; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; font-size: 16px;\">\r\n          📄 Revisar e Assinar Proposta\r\n        </a>\r\n      </div>\r\n\r\n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center; color: #6b7280; font-size: 14px;\">\r\n        <p>Caso tenha alguma dúvida ou precise de esclarecimentos, entre em contato conosco.</p>\r\n        <p><strong>GladPros</strong><br>Email: contato@gladpros.com</p>\r\n      </div>\r\n    </body>\r\n    </html>\r\n    `\r\n  }\r\n\r\n  /**\r\n   * Text template para lembrete\r\n   */\r\n  private static generateReminderText(\r\n    proposta: PropostaWithRelations,\r\n    proposalUrl: string,\r\n    daysOverdue: number\r\n  ): string {\r\n    return `\r\nLembrete - Proposta Aguarda Sua Análise\r\n\r\nOlá, ${proposta.contatoNome}!\r\n\r\nEste é um lembrete amigável sobre a proposta ${proposta.numeroProposta} que enviamos.\r\n\r\nProjeto: ${proposta.titulo}\r\nStatus: Aguardando análise há ${daysOverdue} dias\r\n\r\nPara revisar e assinar a proposta, acesse:\r\n${proposalUrl}\r\n\r\nCaso tenha alguma dúvida ou precise de esclarecimentos, entre em contato conosco.\r\n\r\nGladPros\r\nEmail: contato@gladpros.com\r\n    `.trim()\r\n  }\r\n\r\n  /**\r\n   * HTML template para notificação de assinatura\r\n   */\r\n  private static generateSignedHTML(\r\n    proposta: PropostaWithRelations,\r\n    signatureData: any\r\n  ): string {\r\n    return `\r\n    <!DOCTYPE html>\r\n    <html lang=\"pt-BR\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <title>Proposta Assinada</title>\r\n    </head>\r\n    <body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\r\n      <div style=\"text-align: center; margin-bottom: 30px;\">\r\n        <h1 style=\"color: #059669; margin-bottom: 10px;\">✅ Proposta Assinada!</h1>\r\n        <h2 style=\"color: #666; font-weight: normal;\">Nova Assinatura Recebida</h2>\r\n      </div>\r\n\r\n      <div style=\"background-color: #ecfdf5; padding: 20px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #059669;\">\r\n        <h3 style=\"margin-top: 0; color: #065f46;\">A proposta ${proposta.numeroProposta} foi assinada!</h3>\r\n        \r\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0;\">\r\n          <h4 style=\"margin: 0; color: #374151;\">${proposta.titulo}</h4>\r\n          <p style=\"margin: 10px 0 0 0; color: #6b7280;\">Cliente: ${proposta.contatoNome} (${proposta.contatoEmail})</p>\r\n        </div>\r\n\r\n        <div style=\"background-color: #f9fafb; padding: 15px; border-radius: 5px;\">\r\n          <h4 style=\"margin-top: 0;\">Dados da Assinatura:</h4>\r\n          <ul style=\"margin: 0; padding-left: 20px;\">\r\n            <li><strong>Assinado por:</strong> ${signatureData.clientName}</li>\r\n            <li><strong>Data/Hora:</strong> ${new Date(signatureData.signedAt).toLocaleString('pt-BR')}</li>\r\n            ${signatureData.ip ? `<li><strong>IP:</strong> ${signatureData.ip}</li>` : ''}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div style=\"text-align: center; margin: 30px 0;\">\r\n        <p style=\"color: #059669; font-weight: bold; font-size: 18px;\">🎉 Próximos passos:</p>\r\n        <p>Revisar proposta e iniciar processo de aprovação interna</p>\r\n      </div>\r\n\r\n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center; color: #6b7280; font-size: 14px;\">\r\n        <p>Esta é uma notificação automática do sistema GladPros.</p>\r\n      </div>\r\n    </body>\r\n    </html>\r\n    `\r\n  }\r\n\r\n  /**\r\n   * Text template para notificação de assinatura\r\n   */\r\n  private static generateSignedText(\r\n    proposta: PropostaWithRelations,\r\n    signatureData: any\r\n  ): string {\r\n    return `\r\nProposta Assinada!\r\n\r\nA proposta ${proposta.numeroProposta} foi assinada!\r\n\r\nProjeto: ${proposta.titulo}\r\nCliente: ${proposta.contatoNome} (${proposta.contatoEmail})\r\n\r\nDados da Assinatura:\r\n- Assinado por: ${signatureData.clientName}\r\n- Data/Hora: ${new Date(signatureData.signedAt).toLocaleString('pt-BR')}\r\n${signatureData.ip ? `- IP: ${signatureData.ip}` : ''}\r\n\r\nPróximos passos:\r\nRevisar proposta e iniciar processo de aprovação interna.\r\n\r\nEsta é uma notificação automática do sistema GladPros.\r\n    `.trim()\r\n  }\r\n\r\n  /**\r\n   * HTML template para aprovação interna\r\n   */\r\n  private static generateApprovedHTML(proposta: PropostaWithRelations): string {\r\n    return `\r\n    <!DOCTYPE html>\r\n    <html lang=\"pt-BR\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <title>Proposta Aprovada</title>\r\n    </head>\r\n    <body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\r\n      <div style=\"text-align: center; margin-bottom: 30px;\">\r\n        <h1 style=\"color: #7c3aed; margin-bottom: 10px;\">🎉 Proposta Aprovada!</h1>\r\n        <h2 style=\"color: #666; font-weight: normal;\">Aprovação Interna Concluída</h2>\r\n      </div>\r\n\r\n      <div style=\"background-color: #f3e8ff; padding: 20px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #7c3aed;\">\r\n        <h3 style=\"margin-top: 0; color: #581c87;\">A proposta ${proposta.numeroProposta} foi aprovada internamente!</h3>\r\n        \r\n        <div style=\"background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0;\">\r\n          <h4 style=\"margin: 0; color: #374151;\">${proposta.titulo}</h4>\r\n          <p style=\"margin: 10px 0 0 0; color: #6b7280;\">Cliente: ${proposta.contatoNome}</p>\r\n          <p style=\"margin: 5px 0 0 0; color: #059669; font-weight: bold;\">\r\n            Valor: ${proposta.precoPropostaCliente ? `USD ${proposta.precoPropostaCliente.toFixed(2)}` : 'A definir'}\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div style=\"text-align: center; margin: 30px 0;\">\r\n        <p style=\"color: #7c3aed; font-weight: bold; font-size: 18px;\">🚀 Próximo passo:</p>\r\n        <p>Converter em projeto e iniciar planejamento de execução</p>\r\n      </div>\r\n\r\n      <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center; color: #6b7280; font-size: 14px;\">\r\n        <p>Esta é uma notificação automática do sistema GladPros.</p>\r\n      </div>\r\n    </body>\r\n    </html>\r\n    `\r\n  }\r\n\r\n  /**\r\n   * Text template para aprovação interna\r\n   */\r\n  private static generateApprovedText(proposta: PropostaWithRelations): string {\r\n    return `\r\nProposta Aprovada!\r\n\r\nA proposta ${proposta.numeroProposta} foi aprovada internamente!\r\n\r\nProjeto: ${proposta.titulo}\r\nCliente: ${proposta.contatoNome}\r\nValor: ${proposta.precoPropostaCliente ? `USD ${proposta.precoPropostaCliente.toFixed(2)}` : 'A definir'}\r\n\r\nPróximo passo:\r\nConverter em projeto e iniciar planejamento de execução.\r\n\r\nEsta é uma notificação automática do sistema GladPros.\r\n    `.trim()\r\n  }\r\n\r\n  /**\r\n   * Testa configuração de email\r\n   */\r\n  static async testEmailConfiguration(): Promise<{ success: boolean; error?: string }> {\r\n    try {\r\n      const transporter = this.getTransporter()\r\n      await transporter.verify()\r\n      \r\n      return { success: true }\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Erro desconhecido'\r\n      }\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\services\\proposta-numbering.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\services\\proposta-pdf.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[346,349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[346,349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":12,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1712,1715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1712,1715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1870,1873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1870,1873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1960,1963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1960,1963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2162,2165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2162,2165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3320,3323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3320,3323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":154,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4354,4357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4354,4357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// import { applyRBACMasking, type RBACContext } from './proposta-rbac'\r\n\r\n// Context para RBAC (definido aqui temporariamente)\r\nexport interface RBACContext {\r\n  userId?: number\r\n  userRole?: string\r\n  permissions: string[]\r\n  isClientAccess: boolean\r\n}\r\n\r\n// Função placeholder para mascaramento RBAC\r\nconst applyRBACMasking = async (proposta: any, context: RBACContext) => {\r\n  // TODO: Implementar lógica real de mascaramento\r\n  return proposta\r\n}\r\n\r\n// Tipos de enum como strings para simplicidade\r\ntype StatusProposta = 'RASCUNHO' | 'ENVIADA' | 'ASSINADA' | 'CANCELADA' | 'APROVADA'\r\ntype StatusPermite = 'SIM' | 'NAO'\r\ntype TipoAssinatura = 'CANVAS' | 'CHECKBOX'\r\ntype GatilhoFaturamento = 'NA_APROVACAO' | 'POR_MARCOS' | 'NA_ENTREGA' | 'CUSTOMIZADO'\r\ntype FormaPagamento = 'TRANSFERENCIA' | 'CARTAO' | 'PIX' | 'BOLETO' | 'DINHEIRO'\r\n\r\n// Interface baseada no schema Prisma\r\nexport interface PropostaWithRelations {\r\n  id: number\r\n  numeroProposta: string\r\n  clienteId: number\r\n  dataCriacao: Date\r\n  \r\n  // Informações de contato e execução\r\n  contatoNome: string\r\n  contatoEmail: string\r\n  contatoTelefone?: string | null\r\n  localExecucaoEndereco: string\r\n  \r\n  // Título e escopo\r\n  titulo: string\r\n  descricaoEscopo: string\r\n  tipoServico: string\r\n  \r\n  // Prazos e validade\r\n  tempoParaAceite?: number | null\r\n  validadeProposta?: Date | null\r\n  prazoExecucaoEstimadoDias?: number | null\r\n  janelaExecucaoPreferencial?: string | null\r\n  restricoesDeAcesso?: string | null\r\n  \r\n  // Permissões e conformidades\r\n  permite: StatusPermite\r\n  quaisPermites?: string | null\r\n  normasReferencias?: string | null\r\n  inspecoesNecessarias?: string | null\r\n  \r\n  // Condições comerciais\r\n  condicoesPagamento?: any\r\n  garantia?: string | null\r\n  exclusoes?: string | null\r\n  condicoesGerais?: string | null\r\n  descontosOfertados?: number | null\r\n  opcoesAlternativas?: any\r\n  \r\n  // Estimativas internas\r\n  valorEstimado?: number | null\r\n  internalEstimate?: any\r\n  precoPropostaCliente?: number | null\r\n  moeda: string\r\n  \r\n  // Condições de faturamento\r\n  gatilhoFaturamento?: GatilhoFaturamento | null\r\n  percentualSinal?: number | null\r\n  marcosPagamento?: any\r\n  formaPagamentoPreferida?: FormaPagamento | null\r\n  instrucoesPagamento?: string | null\r\n  multaAtraso?: string | null\r\n  descontosCondicionais?: string | null\r\n  \r\n  // Status e fluxo\r\n  status: StatusProposta\r\n  enviadaParaOCliente?: Date | null\r\n  tokenPublico?: string | null\r\n  tokenExpiresAt?: Date | null\r\n  \r\n  // Assinaturas e aprovação\r\n  assinaturaTipo?: TipoAssinatura | null\r\n  assinaturaCliente?: string | null\r\n  assinaturaImagem?: string | null\r\n  assinaturaIp?: string | null\r\n  assinaturaUserAgent?: string | null\r\n  assinadaEm?: Date | null\r\n  \r\n  assinaturaResponsavel?: string | null\r\n  aprovacaoInternaTecnica?: boolean | null\r\n  aprovacaoInternaFinanceira?: boolean | null\r\n  aprovadaEm?: Date | null\r\n  motivo_cancelamento?: string | null\r\n  \r\n  // Observações e riscos\r\n  observacoesInternas?: string | null\r\n  observacoesParaCliente?: string | null\r\n  riscosIdentificados?: string | null\r\n  \r\n  // Conversão em projeto\r\n  projetoId?: number | null\r\n  dataConversao?: Date | null\r\n  responsavelConversao?: number | null\r\n  \r\n  // Auditoria\r\n  criadoPor?: number | null\r\n  atualizadoPor?: number | null\r\n  historicoAlteracoes?: any\r\n  deletedAt?: Date | null\r\n  deletedBy?: number | null\r\n  criadoEm: Date\r\n  atualizadoEm: Date\r\n\r\n  // Relacionamentos\r\n  etapas: PropostaEtapa[]\r\n  materiais: PropostaMaterial[]\r\n  anexos: AnexoProposta[]\r\n}\r\n\r\nexport interface PropostaEtapa {\r\n  id: number\r\n  propostaId: number\r\n  titulo: string\r\n  descricao?: string | null\r\n  ordem: number\r\n  valorEstimado?: number | null\r\n  duracaoEstimadaHoras?: number | null\r\n  custoMaoObraEstimado?: number | null\r\n  dependencias?: string | null\r\n  status: string\r\n  dataInicioEstimada?: Date | null\r\n  dataFimEstimada?: Date | null\r\n  dataInicioReal?: Date | null\r\n  dataFimReal?: Date | null\r\n  observacoes?: string | null\r\n  criadoEm: Date\r\n  atualizadoEm: Date\r\n}\r\n\r\nexport interface PropostaMaterial {\r\n  id: number\r\n  propostaId: number\r\n  nome: string\r\n  descricao?: string | null\r\n  quantidade: number\r\n  unidade: string\r\n  valorUnitario?: number | null\r\n  fornecedor?: string | null\r\n  fornecedorPreferencial?: string | null\r\n  observacoes?: string | null\r\n  especificacoes?: any\r\n  status: string\r\n  criadoEm: Date\r\n  atualizadoEm: Date\r\n}\r\n\r\nexport interface AnexoProposta {\r\n  id: number\r\n  propostaId: number\r\n  nome: string\r\n  tipo: string\r\n  tamanho?: number | null\r\n  url: string\r\n  privado?: boolean | null\r\n  descricao?: string | null\r\n  uploadedBy?: number | null\r\n  criadoEm: Date\r\n}\r\n\r\nexport interface PDFGenerationOptions {\r\n  /**\r\n   * Incluir valores financeiros no PDF\r\n   */\r\n  includeValues?: boolean\r\n  \r\n  /**\r\n   * Incluir etapas detalhadas\r\n   */\r\n  includeEtapas?: boolean\r\n  \r\n  /**\r\n   * Incluir materiais detalhados\r\n   */\r\n  includeMateriais?: boolean\r\n  \r\n  /**\r\n   * Incluir anexos públicos como links\r\n   */\r\n  includeAnexos?: boolean\r\n  \r\n  /**\r\n   * Template do PDF (client = para cliente, internal = uso interno)\r\n   */\r\n  template?: 'client' | 'internal'\r\n  \r\n  /**\r\n   * Adicionar marcas d'água\r\n   */\r\n  watermark?: string\r\n  \r\n  /**\r\n   * Customizar cabeçalho/rodapé\r\n   */\r\n  header?: {\r\n    logoUrl?: string\r\n    empresa?: string\r\n    contato?: string\r\n  }\r\n}\r\n\r\n/**\r\n * Serviço para geração de PDFs de propostas com controle RBAC\r\n */\r\nexport class PropostaPDFService {\r\n  /**\r\n   * Gera PDF da proposta com mascaramento baseado em permissões\r\n   */\r\n  static async generatePDF(\r\n    proposta: PropostaWithRelations,\r\n    rbacContext: RBACContext,\r\n    options: PDFGenerationOptions = {}\r\n  ): Promise<{\r\n    buffer: Buffer\r\n    filename: string\r\n    contentType: string\r\n  }> {\r\n    // Aplicar mascaramento RBAC nos dados\r\n    const maskedProposta = await applyRBACMasking(proposta, rbacContext)\r\n    \r\n    const defaultOptions: Required<PDFGenerationOptions> = {\r\n      includeValues: true,\r\n      includeEtapas: true,\r\n      includeMateriais: true,\r\n      includeAnexos: false,\r\n      template: rbacContext.isClientAccess ? 'client' : 'internal',\r\n      watermark: rbacContext.isClientAccess ? 'CONFIDENCIAL' : '',\r\n      header: {\r\n        empresa: 'GladPros',\r\n        contato: 'contato@gladpros.com'\r\n      }\r\n    }\r\n    \r\n    const finalOptions = { ...defaultOptions, ...options }\r\n    \r\n    // Gerar o PDF usando a biblioteca de sua escolha (puppeteer, jsPDF, etc.)\r\n    const pdfBuffer = await this.renderPDF(maskedProposta, finalOptions)\r\n    \r\n    const filename = this.generateFilename(proposta, finalOptions.template)\r\n    \r\n    return {\r\n      buffer: pdfBuffer,\r\n      filename,\r\n      contentType: 'application/pdf'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gera HTML template para o PDF\r\n   */\r\n  private static generateHTML(\r\n    proposta: PropostaWithRelations,\r\n    options: Required<PDFGenerationOptions>\r\n  ): string {\r\n    const isClient = options.template === 'client'\r\n    \r\n    return `\r\n    <!DOCTYPE html>\r\n    <html lang=\"pt-BR\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <title>Proposta ${proposta.numeroProposta}</title>\r\n      <style>\r\n        ${this.getPDFStyles(options)}\r\n      </style>\r\n    </head>\r\n    <body>\r\n      ${options.watermark ? `<div class=\"watermark\">${options.watermark}</div>` : ''}\r\n      \r\n      <!-- Cabeçalho -->\r\n      <header>\r\n        <div class=\"header-content\">\r\n          <div class=\"company-info\">\r\n            <h1>${options.header.empresa}</h1>\r\n            ${options.header.contato ? `<p>${options.header.contato}</p>` : ''}\r\n          </div>\r\n          <div class=\"proposal-info\">\r\n            <h2>PROPOSTA COMERCIAL</h2>\r\n            <p><strong>Nº:</strong> ${proposta.numeroProposta}</p>\r\n            <p><strong>Data:</strong> ${proposta.enviadaParaOCliente ? new Date(proposta.enviadaParaOCliente).toLocaleDateString('pt-BR') : 'Não enviada'}</p>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <!-- Informações do Cliente -->\r\n      <section class=\"client-info\">\r\n        <h3>Dados do Cliente</h3>\r\n        <div class=\"info-grid\">\r\n          <div>\r\n            <p><strong>Nome:</strong> ${proposta.contatoNome || 'N/A'}</p>\r\n            <p><strong>Email:</strong> ${proposta.contatoEmail || 'N/A'}</p>\r\n          </div>\r\n          ${proposta.localExecucaoEndereco ? `\r\n          <div>\r\n            <p><strong>Local de Execução:</strong></p>\r\n            <p>${proposta.localExecucaoEndereco}</p>\r\n          </div>\r\n          ` : ''}\r\n        </div>\r\n      </section>\r\n\r\n      <!-- Escopo do Trabalho -->\r\n      <section class=\"scope\">\r\n        <h3>Escopo do Trabalho</h3>\r\n        ${proposta.titulo ? `<h4>${proposta.titulo}</h4>` : ''}\r\n        ${proposta.descricaoEscopo ? `<p>${proposta.descricaoEscopo}</p>` : ''}\r\n      </section>\r\n\r\n      ${options.includeEtapas && proposta.etapas.length > 0 ? `\r\n      <!-- Etapas -->\r\n      <section class=\"etapas\">\r\n        <h3>Etapas do Trabalho</h3>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Etapa</th>\r\n              <th>Descrição</th>\r\n              ${options.includeValues ? '<th>Valor Estimado</th>' : ''}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            ${proposta.etapas.map((etapa, index) => `\r\n            <tr>\r\n              <td>${index + 1}. ${etapa.titulo}</td>\r\n              <td>${etapa.descricao || '-'}</td>\r\n              ${options.includeValues ? `<td>USD ${etapa.valorEstimado?.toFixed(2) || '0.00'}</td>` : ''}\r\n            </tr>\r\n            `).join('')}\r\n          </tbody>\r\n        </table>\r\n      </section>\r\n      ` : ''}\r\n\r\n      ${options.includeMateriais && proposta.materiais.length > 0 ? `\r\n      <!-- Materiais -->\r\n      <section class=\"materiais\">\r\n        <h3>Materiais</h3>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Material</th>\r\n              <th>Qtd</th>\r\n              <th>Unidade</th>\r\n              ${options.includeValues ? '<th>Valor Unit.</th>' : ''}\r\n              ${options.includeValues ? '<th>Total</th>' : ''}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            ${proposta.materiais.map(material => `\r\n            <tr>\r\n              <td>\r\n                <strong>${material.nome}</strong>\r\n                ${material.descricao ? `<br><small>${material.descricao}</small>` : ''}\r\n              </td>\r\n              <td>${material.quantidade}</td>\r\n              <td>${material.unidade}</td>\r\n              ${options.includeValues ? `<td>USD ${material.valorUnitario?.toFixed(2) || '0.00'}</td>` : ''}\r\n              ${options.includeValues ? `<td>USD ${((material.valorUnitario || 0) * material.quantidade).toFixed(2)}</td>` : ''}\r\n            </tr>\r\n            `).join('')}\r\n          </tbody>\r\n        </table>\r\n      </section>\r\n      ` : ''}\r\n\r\n      <!-- Condições Comerciais -->\r\n      ${options.includeValues ? `\r\n      <section class=\"commercial\">\r\n        <h3>Condições Comerciais</h3>\r\n        <div class=\"commercial-info\">\r\n          ${proposta.valorEstimado ? `<p><strong>Valor Total:</strong> USD ${proposta.valorEstimado.toFixed(2)}</p>` : ''}\r\n          ${proposta.precoPropostaCliente ? `<p><strong>Preço Final:</strong> USD ${proposta.precoPropostaCliente.toFixed(2)}</p>` : ''}\r\n          ${proposta.descontosOfertados ? `<p><strong>Desconto:</strong> ${proposta.descontosOfertados}%</p>` : ''}\r\n          ${proposta.garantia ? `<p><strong>Garantia:</strong> ${proposta.garantia}</p>` : ''}\r\n          ${proposta.validadeProposta ? `<p><strong>Validade:</strong> ${new Date(proposta.validadeProposta).toLocaleDateString('pt-BR')}</p>` : ''}\r\n        </div>\r\n        ${proposta.condicoesGerais ? `\r\n        <div class=\"terms\">\r\n          <h4>Condições Gerais</h4>\r\n          <p>${proposta.condicoesGerais}</p>\r\n        </div>\r\n        ` : ''}\r\n        ${proposta.exclusoes ? `\r\n        <div class=\"exclusions\">\r\n          <h4>Exclusões</h4>\r\n          <p>${proposta.exclusoes}</p>\r\n        </div>\r\n        ` : ''}\r\n      </section>\r\n      ` : ''}\r\n\r\n      <!-- Observações -->\r\n      ${proposta.observacoesParaCliente ? `\r\n      <section class=\"observations\">\r\n        <h3>Observações</h3>\r\n        <p>${proposta.observacoesParaCliente}</p>\r\n      </section>\r\n      ` : ''}\r\n\r\n      <!-- Rodapé -->\r\n      <footer>\r\n        <div class=\"signature-area\">\r\n          <div class=\"signature-box\">\r\n            <p><strong>Assinatura do Cliente</strong></p>\r\n            <div class=\"signature-line\"></div>\r\n            <p>Data: ___/___/______</p>\r\n          </div>\r\n          <div class=\"signature-box\">\r\n            <p><strong>Responsável Técnico</strong></p>\r\n            <div class=\"signature-line\"></div>\r\n            <p>${options.header.empresa}</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"footer-info\">\r\n          <p>Esta proposta é válida até ${proposta.validadeProposta ? new Date(proposta.validadeProposta).toLocaleDateString('pt-BR') : '30 dias a partir da data de emissão'}</p>\r\n          ${isClient ? '<p><em>Documento gerado automaticamente - Confidencial</em></p>' : ''}\r\n        </div>\r\n      </footer>\r\n    </body>\r\n    </html>\r\n    `\r\n  }\r\n\r\n  /**\r\n   * Estilos CSS para o PDF\r\n   */\r\n  private static getPDFStyles(options: Required<PDFGenerationOptions>): string {\r\n    return `\r\n      * {\r\n        margin: 0;\r\n        padding: 0;\r\n        box-sizing: border-box;\r\n      }\r\n      \r\n      body {\r\n        font-family: 'Arial', sans-serif;\r\n        font-size: 12px;\r\n        line-height: 1.4;\r\n        color: #333;\r\n        background-color: white;\r\n      }\r\n      \r\n      ${options.watermark ? `\r\n      .watermark {\r\n        position: fixed;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%) rotate(-45deg);\r\n        font-size: 80px;\r\n        color: rgba(0, 0, 0, 0.1);\r\n        font-weight: bold;\r\n        z-index: -1;\r\n        pointer-events: none;\r\n      }\r\n      ` : ''}\r\n      \r\n      header {\r\n        border-bottom: 3px solid #2563eb;\r\n        margin-bottom: 30px;\r\n        padding-bottom: 20px;\r\n      }\r\n      \r\n      .header-content {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: flex-start;\r\n      }\r\n      \r\n      .company-info h1 {\r\n        font-size: 24px;\r\n        color: #2563eb;\r\n        margin-bottom: 5px;\r\n      }\r\n      \r\n      .proposal-info {\r\n        text-align: right;\r\n      }\r\n      \r\n      .proposal-info h2 {\r\n        font-size: 20px;\r\n        color: #1f2937;\r\n        margin-bottom: 10px;\r\n      }\r\n      \r\n      section {\r\n        margin-bottom: 30px;\r\n      }\r\n      \r\n      h3 {\r\n        font-size: 16px;\r\n        color: #2563eb;\r\n        margin-bottom: 15px;\r\n        border-bottom: 1px solid #e5e7eb;\r\n        padding-bottom: 5px;\r\n      }\r\n      \r\n      h4 {\r\n        font-size: 14px;\r\n        color: #374151;\r\n        margin-bottom: 10px;\r\n      }\r\n      \r\n      .info-grid {\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr;\r\n        gap: 20px;\r\n      }\r\n      \r\n      table {\r\n        width: 100%;\r\n        border-collapse: collapse;\r\n        margin-top: 10px;\r\n      }\r\n      \r\n      th, td {\r\n        border: 1px solid #d1d5db;\r\n        padding: 8px;\r\n        text-align: left;\r\n      }\r\n      \r\n      th {\r\n        background-color: #f9fafb;\r\n        font-weight: bold;\r\n        color: #374151;\r\n      }\r\n      \r\n      tr:nth-child(even) {\r\n        background-color: #f9fafb;\r\n      }\r\n      \r\n      .commercial-info {\r\n        background-color: #f0f9ff;\r\n        padding: 15px;\r\n        border-radius: 5px;\r\n        margin-bottom: 15px;\r\n      }\r\n      \r\n      .terms, .exclusions {\r\n        background-color: #fef3c7;\r\n        padding: 15px;\r\n        border-radius: 5px;\r\n        margin-bottom: 15px;\r\n      }\r\n      \r\n      .signature-area {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin: 50px 0 20px 0;\r\n      }\r\n      \r\n      .signature-box {\r\n        text-align: center;\r\n        width: 45%;\r\n      }\r\n      \r\n      .signature-line {\r\n        border-bottom: 1px solid #000;\r\n        margin: 20px 0;\r\n        height: 40px;\r\n      }\r\n      \r\n      footer {\r\n        border-top: 1px solid #e5e7eb;\r\n        padding-top: 20px;\r\n        margin-top: 50px;\r\n      }\r\n      \r\n      .footer-info {\r\n        text-align: center;\r\n        font-size: 10px;\r\n        color: #6b7280;\r\n      }\r\n      \r\n      @media print {\r\n        body {\r\n          background: white;\r\n        }\r\n        \r\n        .watermark {\r\n          print-color-adjust: exact;\r\n        }\r\n      }\r\n      \r\n      @page {\r\n        margin: 2cm;\r\n        size: A4;\r\n      }\r\n    `\r\n  }\r\n\r\n  /**\r\n   * Renderiza o PDF usando um fallback simples para agora\r\n   * TODO: Implementar com Puppeteer ou jsPDF posteriormente\r\n   */\r\n  private static async renderPDF(\r\n    proposta: PropostaWithRelations,\r\n    options: Required<PDFGenerationOptions>\r\n  ): Promise<Buffer> {\r\n    // Por enquanto, retornamos um HTML simples como string\r\n    // Posteriormente, implementar conversão real para PDF\r\n    const html = this.generateHTML(proposta, options)\r\n    \r\n    // Placeholder - retorna HTML como buffer para desenvolvimento\r\n    return Buffer.from(html, 'utf-8')\r\n    \r\n    /* TODO: Implementar conversão real para PDF\r\n    try {\r\n      const puppeteer = await import('puppeteer')\r\n      \r\n      const browser = await puppeteer.launch({\r\n        headless: true,\r\n        args: ['--no-sandbox', '--disable-setuid-sandbox']\r\n      })\r\n      \r\n      const page = await browser.newPage()\r\n      \r\n      await page.setContent(html, {\r\n        waitUntil: 'networkidle0'\r\n      })\r\n      \r\n      const pdfBuffer = await page.pdf({\r\n        format: 'A4',\r\n        margin: {\r\n          top: '2cm',\r\n          right: '2cm',\r\n          bottom: '2cm',\r\n          left: '2cm'\r\n        },\r\n        printBackground: true,\r\n        preferCSSPageSize: true\r\n      })\r\n      \r\n      await browser.close()\r\n      \r\n      return Buffer.from(pdfBuffer)\r\n      \r\n    } catch (error) {\r\n      console.error('Erro ao gerar PDF:', error)\r\n      return this.generateFallbackPDF(proposta, options)\r\n    }\r\n    */\r\n  }\r\n\r\n  /**\r\n   * Fallback para gerar PDF sem Puppeteer\r\n   */\r\n  private static generateFallbackPDF(\r\n    proposta: PropostaWithRelations,\r\n    options: Required<PDFGenerationOptions>\r\n  ): Buffer {\r\n    // Aqui você pode implementar um fallback usando jsPDF ou PDFKit\r\n    // Por simplicidade, retornamos um placeholder\r\n    const placeholder = `\r\n      Proposta ${proposta.numeroProposta}\r\n      \r\n      Cliente: ${proposta.contatoNome || 'N/A'}\r\n      Email: ${proposta.contatoEmail || 'N/A'}\r\n      \r\n      Escopo: ${proposta.descricaoEscopo || 'N/A'}\r\n      \r\n      ${options.includeValues && proposta.precoPropostaCliente ? \r\n        `Valor: USD ${proposta.precoPropostaCliente.toFixed(2)}` : ''\r\n      }\r\n      \r\n      Documento gerado em ${new Date().toLocaleDateString('pt-BR')}\r\n    `\r\n    \r\n    return Buffer.from(placeholder, 'utf-8')\r\n  }\r\n\r\n  /**\r\n   * Gera nome do arquivo PDF\r\n   */\r\n  private static generateFilename(\r\n    proposta: PropostaWithRelations,\r\n    template: 'client' | 'internal'\r\n  ): string {\r\n    const date = new Date().toISOString().split('T')[0]\r\n    const prefix = template === 'client' ? 'proposta' : 'proposta-internal'\r\n    \r\n    return `${prefix}-${proposta.numeroProposta}-${date}.pdf`\r\n  }\r\n\r\n  /**\r\n   * Valida se a proposta pode gerar PDF\r\n   */\r\n  static validateForPDF(proposta: PropostaWithRelations): {\r\n    valid: boolean\r\n    errors: string[]\r\n  } {\r\n    const errors: string[] = []\r\n    \r\n    if (!proposta.numeroProposta) {\r\n      errors.push('Número da proposta é obrigatório')\r\n    }\r\n    \r\n    if (!proposta.contatoNome) {\r\n      errors.push('Nome do contato é obrigatório')\r\n    }\r\n    \r\n    if (!proposta.descricaoEscopo) {\r\n      errors.push('Descrição do escopo é obrigatória')\r\n    }\r\n    \r\n    return {\r\n      valid: errors.length === 0,\r\n      errors\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\services\\proposta-rbac.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PropostaResponse' is defined but never used.","line":2,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MASKED_VALUE' is assigned a value but never used.","line":19,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1229,1232],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1229,1232],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2649,2652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2649,2652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2681,2684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2681,2684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2861,2864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2861,2864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2998,3001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2998,3001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3030,3033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3030,3033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3202,3205],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3202,3205],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3316,3319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3316,3319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3467,3470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3467,3470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3499,3502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3499,3502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":154,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4489,4492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4489,4492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4619,4622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4619,4622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4790,4793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4790,4793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5222,5225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5222,5225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":179,"column":4,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":7,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5269,5272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5269,5272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":193,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5645,5648],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5645,5648],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6075,6078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6075,6078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":231,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6461,6464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6461,6464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/lib/services/proposta-rbac.ts\r\nimport type { PropostaResponse } from \"@/lib/validations/proposta\";\r\n\r\nexport interface UserPermissions {\r\n  canViewInternalValues: boolean;\r\n  canEdit: boolean;\r\n  canApprove: boolean;\r\n  canViewAllPropostas: boolean;\r\n  isAdmin: boolean;\r\n  userId?: number;\r\n}\r\n\r\nexport interface PropostaContext {\r\n  isClientView: boolean; // Visualização pelo cliente (token público)\r\n  isAfterSignature: boolean; // Após assinatura (valores devem ser mascarados)\r\n  userPermissions: UserPermissions;\r\n}\r\n\r\nconst MASKED_VALUE = \"****\";\r\nconst MASKED_NUMBER = \"***.**\";\r\n\r\n/**\r\n * Determina permissões do usuário baseado no contexto\r\n * TODO: Integrar com sistema de RBAC real\r\n */\r\nexport function getUserPermissions(userId?: number, isAdmin: boolean = false): UserPermissions {\r\n  // Por enquanto, lógica simples - pode ser expandida\r\n  return {\r\n    canViewInternalValues: isAdmin || false, // Por padrão, apenas admins veem valores internos\r\n    canEdit: isAdmin || false,\r\n    canApprove: isAdmin || false,\r\n    canViewAllPropostas: isAdmin || false,\r\n    isAdmin,\r\n    userId\r\n  };\r\n}\r\n\r\n/**\r\n * Determina contexto da visualização da proposta\r\n */\r\nexport function getPropostaContext(\r\n  proposta: any,\r\n  isClientView: boolean,\r\n  userPermissions: UserPermissions\r\n): PropostaContext {\r\n  const isAfterSignature = proposta.status === 'ASSINADA' || proposta.status === 'APROVADA';\r\n  \r\n  return {\r\n    isClientView,\r\n    isAfterSignature,\r\n    userPermissions\r\n  };\r\n}\r\n\r\n/**\r\n * Determina se um valor deve ser mascarado\r\n */\r\nfunction shouldMaskValue(context: PropostaContext): boolean {\r\n  // Cliente sempre tem valores mascarados após assinatura\r\n  if (context.isClientView && context.isAfterSignature) {\r\n    return true;\r\n  }\r\n  \r\n  // Cliente nunca vê valores internos\r\n  if (context.isClientView) {\r\n    return false; // Durante assinatura, cliente vê valores\r\n  }\r\n  \r\n  // Usuários internos: apenas mascarar se não tiver permissão\r\n  return !context.userPermissions.canViewInternalValues;\r\n}\r\n\r\n/**\r\n * Determina se valores internos devem ser incluídos\r\n */\r\nfunction shouldIncludeInternalValues(context: PropostaContext): boolean {\r\n  if (context.isClientView) {\r\n    return false; // Cliente nunca vê valores internos\r\n  }\r\n  \r\n  return context.userPermissions.canViewInternalValues;\r\n}\r\n\r\n/**\r\n * Mascara um valor numérico\r\n */\r\nfunction maskNumericValue(value: number | null | undefined): string | number | null | undefined {\r\n  if (value === null || value === undefined) {\r\n    return value;\r\n  }\r\n  return MASKED_NUMBER;\r\n}\r\n\r\n/**\r\n * Mascara uma etapa conforme contexto\r\n */\r\nfunction maskEtapa(etapa: any, context: PropostaContext): any {\r\n  const shouldMask = shouldMaskValue(context);\r\n  \r\n  return {\r\n    ...etapa,\r\n    custoMaoObraEstimado: shouldMask \r\n      ? maskNumericValue(etapa.custoMaoObraEstimado as any)\r\n      : etapa.custoMaoObraEstimado\r\n  };\r\n}\r\n\r\n/**\r\n * Mascara um material conforme contexto\r\n */\r\nfunction maskMaterial(material: any, context: PropostaContext): any {\r\n  const shouldMask = shouldMaskValue(context);\r\n  \r\n  return {\r\n    ...material,\r\n    precoUnitario: shouldMask \r\n      ? maskNumericValue(material.precoUnitario as any)\r\n      : material.precoUnitario,\r\n    totalItem: shouldMask \r\n      ? maskNumericValue(material.totalItem as any)\r\n      : material.totalItem\r\n  };\r\n}\r\n\r\n/**\r\n * Aplica mascaramento RBAC a uma proposta completa\r\n */\r\nexport function applyRBACMasking(proposta: any, context: PropostaContext): any {\r\n  const shouldMask = shouldMaskValue(context);\r\n  const includeInternal = shouldIncludeInternalValues(context);\r\n  \r\n  const masked = {\r\n    ...proposta,\r\n    \r\n    // Valores principais\r\n    valorEstimado: shouldMask \r\n      ? maskNumericValue(proposta.valorEstimado)\r\n      : proposta.valorEstimado,\r\n    precoPropostaCliente: shouldMask \r\n      ? maskNumericValue(proposta.precoPropostaCliente)\r\n      : proposta.precoPropostaCliente,\r\n    \r\n    // Estimativas internas - remover completamente se não tiver permissão\r\n    internalEstimate: includeInternal ? proposta.internalEstimate : undefined,\r\n    \r\n    // Observações internas\r\n    observacoesInternas: includeInternal ? proposta.observacoesInternas : undefined,\r\n    \r\n    // Campos de auditoria interna\r\n    criadoPor: includeInternal ? proposta.criadoPor : undefined,\r\n    atualizadoPor: includeInternal ? proposta.atualizadoPor : undefined,\r\n    \r\n    // Etapas com mascaramento\r\n    etapas: proposta.etapas?.map((etapa: any) => maskEtapa(etapa, context)),\r\n    \r\n    // Materiais com mascaramento  \r\n    materiais: proposta.materiais?.map((material: any) => maskMaterial(material, context)),\r\n    \r\n    // Anexos - filtrar privados para cliente\r\n    anexos: context.isClientView \r\n      ? proposta.anexos?.filter((anexo: any) => !anexo.privado)\r\n      : proposta.anexos,\r\n    \r\n    // Metadados de permissão para a UI\r\n    canViewInternalValues: context.userPermissions.canViewInternalValues,\r\n    canEdit: context.userPermissions.canEdit,\r\n    canApprove: context.userPermissions.canApprove,\r\n  };\r\n  \r\n  return masked;\r\n}\r\n\r\n/**\r\n * Filtra lista de propostas por permissões do usuário\r\n */\r\nexport function filterPropostasByPermissions(\r\n  propostas: any[],\r\n  userPermissions: UserPermissions\r\n): any[] {\r\n  if (userPermissions.canViewAllPropostas) {\r\n    return propostas;\r\n  }\r\n  \r\n  // Filtrar apenas propostas do usuário (se implementado)\r\n  // Por enquanto, retorna todas - implementar filtro por criador/responsável depois\r\n  return propostas;\r\n}\r\n\r\n/**\r\n * Valida se usuário pode acessar uma proposta específica\r\n */\r\nexport function canAccessProposta(\r\n  proposta: any,\r\n  userPermissions: UserPermissions\r\n): boolean {\r\n  if (userPermissions.canViewAllPropostas) {\r\n    return true;\r\n  }\r\n  \r\n  // Implementar lógica específica:\r\n  // - Criador pode ver\r\n  // - Responsável pode ver  \r\n  // - Proposta do cliente do usuário pode ver\r\n  \r\n  return true; // Por enquanto, permite acesso\r\n}\r\n\r\n/**\r\n * Valida se usuário pode editar uma proposta\r\n */\r\nexport function canEditProposta(\r\n  proposta: any,\r\n  userPermissions: UserPermissions\r\n): boolean {\r\n  if (!userPermissions.canEdit) {\r\n    return false;\r\n  }\r\n  \r\n  // Não pode editar se já foi assinada/aprovada\r\n  if (['ASSINADA', 'APROVADA'].includes(proposta.status)) {\r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n}\r\n\r\n/**\r\n * Valida se usuário pode aprovar uma proposta\r\n */\r\nexport function canApproveProposta(\r\n  proposta: any,\r\n  userPermissions: UserPermissions\r\n): boolean {\r\n  if (!userPermissions.canApprove) {\r\n    return false;\r\n  }\r\n  \r\n  // Só pode aprovar se estiver assinada\r\n  return proposta.status === 'ASSINADA';\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\services\\proposta-token.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Proposta' is defined but never used.","line":4,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/lib/services/proposta-token.ts\r\nimport { randomBytes } from 'crypto';\r\nimport { db } from \"@/server/db-temp\";\r\nimport type { Proposta } from \"@/types/prisma-temp\";\r\n\r\nexport interface TokenPublico {\r\n  token: string;\r\n  expiresAt: Date;\r\n}\r\n\r\n/**\r\n * Gera um token público único para visualização de proposta pelo cliente\r\n * @param diasExpiracao Dias até expiração (padrão: 30)\r\n * @returns Token e data de expiração\r\n */\r\nexport async function generateTokenPublico(diasExpiracao: number = 30): Promise<TokenPublico> {\r\n  let token: string;\r\n  let tentativas = 0;\r\n  const maxTentativas = 5;\r\n\r\n  do {\r\n    // Gerar token seguro (32 bytes = 64 chars hex)\r\n    token = randomBytes(32).toString('hex');\r\n    \r\n    // Verificar se token já existe\r\n        const existingToken = await db.proposta.findFirst({\r\n      where: { \r\n        tokenPublico: token,\r\n        tokenExpiresAt: {\r\n          gt: new Date() // Ainda não expirado\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!existingToken) {\r\n      break;\r\n    }\r\n\r\n    tentativas++;\r\n  } while (tentativas < maxTentativas);\r\n\r\n  if (tentativas >= maxTentativas) {\r\n    throw new Error('Não foi possível gerar token único após várias tentativas');\r\n  }\r\n\r\n  const expiresAt = new Date();\r\n  expiresAt.setDate(expiresAt.getDate() + diasExpiracao);\r\n\r\n  return {\r\n    token,\r\n    expiresAt\r\n  };\r\n}\r\n\r\n/**\r\n * Valida se um token público é válido e não expirado\r\n * @param token Token para validar\r\n * @returns Proposta se token válido, null se inválido/expirado\r\n */\r\nexport async function validateTokenPublico(token: string) {\r\n  if (!token || token.length !== 64) {\r\n    return null;\r\n  }\r\n\r\n  const proposta = await db.proposta.findFirst({\r\n    where: {\r\n      tokenPublico: token,\r\n      tokenExpiresAt: {\r\n        gt: new Date() // Ainda não expirado\r\n      },\r\n      deletedAt: null,\r\n      status: {\r\n        in: ['ENVIADA', 'ASSINADA'] // Apenas propostas enviadas ou já assinadas\r\n      }\r\n    },\r\n    include: {\r\n      cliente: {\r\n        select: {\r\n          id: true,\r\n          nomeCompleto: true,\r\n          razaoSocial: true,\r\n          email: true\r\n        }\r\n      },\r\n      etapas: {\r\n        orderBy: { ordem: 'asc' }\r\n      },\r\n      materiais: {\r\n        orderBy: { nome: 'asc' }\r\n      },\r\n      anexos: {\r\n        where: {\r\n          privado: false // Apenas anexos públicos para o cliente\r\n        },\r\n        orderBy: { criadoEm: 'asc' }\r\n      }\r\n    }\r\n  });\r\n\r\n  return proposta;\r\n}\r\n\r\n/**\r\n * Invalida um token público (marca como expirado)\r\n * @param propostaId ID da proposta\r\n */\r\nexport async function invalidateTokenPublico(propostaId: number) {\r\n  await db.proposta.update({\r\n    where: { id: propostaId },\r\n    data: {\r\n      tokenExpiresAt: new Date() // Marca como expirado\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Limpa tokens expirados (job de limpeza)\r\n * @returns Número de tokens removidos\r\n */\r\nexport async function cleanExpiredTokens(): Promise<number> {\r\n  const result = await db.proposta.updateMany({\r\n    where: {\r\n      tokenExpiresAt: {\r\n        lt: new Date()\r\n      },\r\n      tokenPublico: {\r\n        not: null\r\n      }\r\n    },\r\n    data: {\r\n      tokenPublico: null,\r\n      tokenExpiresAt: null\r\n    }\r\n  });\r\n\r\n  return result.count;\r\n}\r\n\r\n/**\r\n * Renova um token público existente\r\n * @param propostaId ID da proposta\r\n * @param diasExpiracao Novos dias até expiração\r\n * @returns Novo token e data de expiração\r\n */\r\nexport async function renewTokenPublico(propostaId: number, diasExpiracao: number = 30): Promise<TokenPublico> {\r\n  const { token, expiresAt } = await generateTokenPublico(diasExpiracao);\r\n\r\n  await db.proposta.update({\r\n    where: { id: propostaId },\r\n    data: {\r\n      tokenPublico: token,\r\n      tokenExpiresAt: expiresAt\r\n    }\r\n  });\r\n\r\n  return { token, expiresAt };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\session.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\tokens.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\validations\\cliente.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\lib\\validations\\proposta.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\client\\bulkService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\client\\clientesApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\client\\createCliente.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\client\\exportService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1162,1165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1162,1165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ClienteDTO } from '@/types/cliente';\r\n\r\nexport const exportToCSV = (clientes: ClienteDTO[], filename: string = 'clientes') => {\r\n  const headers = [\r\n    'ID',\r\n    'Nome/Empresa',\r\n    'Tipo',\r\n    'E-mail',\r\n    'Telefone',\r\n    'Cidade',\r\n    'Estado',\r\n    'Status',\r\n    'Criado Em',\r\n  ];\r\n\r\n  const rows = clientes.map((c) => [\r\n    c.id,\r\n    c.nomeCompletoOuRazao || '',\r\n    c.tipo || '',\r\n    c.email || '',\r\n    c.telefone || '',\r\n    c.cidade || '',\r\n    c.estado || '',\r\n    c.ativo ? 'Ativo' : 'Inativo',\r\n    c.criadoEm ? new Date(c.criadoEm).toLocaleDateString('pt-BR') : '',\r\n  ]);\r\n\r\n  const csv = [\r\n    headers.join(','),\r\n    ...rows.map((r) => r.map((f) => `\"${String(f).replace(/\"/g, '\"\"')}\"`).join(',')),\r\n  ].join('\\n');\r\n\r\n  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.download = `${filename}.csv`;\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  link.remove();\r\n  URL.revokeObjectURL(url);\r\n};\r\n\r\nexport const exportToCSVServer = async (opts: { filename?: string; filters?: any; clientes?: ClienteDTO[] }) => {\r\n  const res = await fetch('/api/clientes/export/csv', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(opts),\r\n  });\r\n  if (!res.ok) {\r\n    const err = await res.json().catch(() => ({}));\r\n    throw err?.message ? new Error(err.message) : new Error('Falha ao gerar CSV');\r\n  }\r\n  const blob = await res.blob();\r\n  const url = URL.createObjectURL(blob);\r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = `${opts.filename || 'clientes'}.csv`;\r\n  a.click();\r\n  URL.revokeObjectURL(url);\r\n};\r\n\r\nexport const exportToPDF = async (clientes: ClienteDTO[], filename: string = 'clientes') => {\r\n  try {\r\n    const res = await fetch('/api/clientes/export/pdf', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ clientes, filename }),\r\n    });\r\n    if (!res.ok) {\r\n      const err = await res.json().catch(() => ({}));\r\n      throw err?.message ? new Error(err.message) : new Error('Falha ao gerar PDF');\r\n    }\r\n    const blob = await res.blob();\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = `${filename}.pdf`;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    link.remove();\r\n    window.URL.revokeObjectURL(url);\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\client\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\components\\ClientesTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\components\\Toolbar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Plus' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/modules/clientes/components/Toolbar.tsx\r\n\"use client\";\r\nimport { Search, Download, ChevronDown } from \"lucide-react\";\r\nimport { Plus } from \"lucide-react\";\r\nimport { Loader2 } from \"lucide-react\";\r\nimport Link from \"next/link\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport { ClienteDTO } from '@/types/cliente';\r\nimport { exportToCSV, exportToPDF, exportToCSVServer } from \"../services/exportService\";\r\nimport { needsExportWarning } from \"../services/bulkService\";\r\nimport { useToast } from \"@/components/ui/Toaster\";\r\n\r\ninterface ToolbarProps {\r\n  q: string;\r\n  onQ: (value: string) => void;\r\n  tipo: string;\r\n  onTipo: (value: string) => void;\r\n  status: string;\r\n  onStatus: (value: string) => void;\r\n  total: number;\r\n  showNew?: boolean;\r\n  clientes: ClienteDTO[];\r\n  scope?: 'selected' | 'allFiltered';\r\n  selectedCount?: number;\r\n  onScopeChange?: (s: 'selected' | 'allFiltered') => void;\r\n  loading?: boolean;\r\n}\r\n\r\nexport default function Toolbar({\r\n  q,\r\n  onQ,\r\n  tipo,\r\n  onTipo,\r\n  status,\r\n  onStatus,\r\n  total,\r\n  showNew = true,\r\n  clientes,\r\n  scope = 'allFiltered',\r\n  selectedCount = 0,\r\n  onScopeChange,\r\n  loading = false\r\n}: ToolbarProps) {\r\n  const [showExportMenu, setShowExportMenu] = useState(false);\r\n  const [exporting, setExporting] = useState(false);\r\n  const exportRef = useRef<HTMLDivElement>(null);\r\n  const [tipoMenuOpen, setTipoMenuOpen] = useState(false);\r\n  const [statusMenuOpen, setStatusMenuOpen] = useState(false);\r\n  const [scopeMenuOpen, setScopeMenuOpen] = useState(false);\r\n  const tipoRef = useRef<HTMLDivElement>(null);\r\n  const statusRef = useRef<HTMLDivElement>(null);\r\n  const scopeRef = useRef<HTMLDivElement>(null);\r\n  const { showToast } = useToast();\r\n\r\n  const handleExport = async (format: 'csv' | 'pdf') => {\r\n    setShowExportMenu(false);\r\n    setExporting(true);\r\n\r\n    // Determine scope\r\n  const currentScope = scope || 'allFiltered';\r\n  const count = currentScope === 'selected' ? (selectedCount || 0) : total;\r\n    if (count === 0) {\r\n      showToast({ title: 'Aviso', message: 'Nenhum cliente para exportar', type: 'info' });\r\n      return;\r\n    }\r\n    if (needsExportWarning(count)) {\r\n      const proceed = window.confirm(`Você está prestes a exportar ${count} registros. Isso pode demorar. Deseja continuar?`);\r\n      if (!proceed) return;\r\n    }\r\n\r\n    try {\r\n      if (format === 'csv') {\r\n        if (currentScope === 'selected') {\r\n          exportToCSV(clientes);\r\n        } else {\r\n          await exportToCSVServer({ filename: 'clientes', filters: { q, tipo: (tipo === '' ? 'all' : tipo), ativo: status === 'ATIVO' ? true : status === 'INATIVO' ? false : 'all' } });\r\n        }\r\n        showToast({ title: 'Exportado', message: 'CSV gerado com sucesso', type: 'success' });\r\n      } else {\r\n        if (currentScope === 'selected') {\r\n          await exportToPDF(clientes);\r\n        } else {\r\n          // Server-side fetch by filters\r\n          await fetch('/api/clientes/export/pdf', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ filename: 'clientes', filters: { q, tipo: (tipo === '' ? 'all' : tipo), ativo: status === 'ATIVO' ? true : status === 'INATIVO' ? false : 'all' } })\r\n          }).then(async (resp) => {\r\n            if (!resp.ok) throw new Error('Falha ao exportar PDF');\r\n            const blob = await resp.blob();\r\n            const url = URL.createObjectURL(blob);\r\n            const a = document.createElement('a');\r\n            a.href = url;\r\n            a.download = 'clientes.pdf';\r\n            a.click();\r\n            URL.revokeObjectURL(url);\r\n          });\r\n        }\r\n        showToast({ title: 'Exportado', message: 'PDF gerado com sucesso', type: 'success' });\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro na exportação:', error);\r\n      showToast({ title: 'Erro', message: `Erro ao exportar ${format.toUpperCase()}`, type: 'error' });\r\n    } finally {\r\n      setExporting(false);\r\n    }\r\n  };\r\n\r\n  // Fechar menu ao clicar fora\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (exportRef.current && !exportRef.current.contains(event.target as Node)) {\r\n        setShowExportMenu(false);\r\n      }\r\n      if (tipoRef.current && !tipoRef.current.contains(event.target as Node)) {\r\n        setTipoMenuOpen(false);\r\n      }\r\n      if (statusRef.current && !statusRef.current.contains(event.target as Node)) {\r\n        setStatusMenuOpen(false);\r\n      }\r\n      if (scopeRef.current && !scopeRef.current.contains(event.target as Node)) {\r\n        setScopeMenuOpen(false);\r\n      }\r\n    };\r\n\r\n    if (showExportMenu || tipoMenuOpen || statusMenuOpen || scopeMenuOpen) {\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n      return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }\r\n  }, [showExportMenu, tipoMenuOpen, statusMenuOpen, scopeMenuOpen]);\r\n\r\n  // Export helpers moved to service\r\n\r\n  return (\r\n    <div className=\"mb-4 flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between\">\r\n      <div className=\"flex items-center gap-2\">\r\n        <div className=\"relative\">\r\n          <Search className=\"pointer-events-none absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-neutral-400\" />\r\n          <input\r\n            value={q}\r\n            onChange={(e) => onQ(e.target.value)}\r\n            placeholder=\"Buscar por nome ou e-mail\"\r\n            className=\"w-[260px] rounded-xl border border-black/10 bg-white px-9 py-2 text-sm outline-none placeholder:text-neutral-400 focus:border-[#0098DA] dark:border-white/10 dark:bg-white/5 text-foreground\"\r\n          />\r\n        </div>\r\n\r\n        {/* Tipo (custom menu to respect dark background when open) */}\r\n  <div className=\"relative\" data-slot=\"tipo-menu\" ref={tipoRef}>\r\n          <button\r\n            onClick={() => setTipoMenuOpen(v => !v)}\r\n            className=\"rounded-xl border border-black/10 bg-white px-3 py-2 text-sm dark:border-white/10 dark:bg-white/5 text-foreground\"\r\n            aria-haspopup=\"menu\"\r\n            aria-expanded={tipoMenuOpen}\r\n          >\r\n            {tipo === '' ? 'Todos os Tipos' : tipo}\r\n            <span className=\"ml-2\">▾</span>\r\n          </button>\r\n          {tipoMenuOpen && (\r\n            <div className=\"absolute left-0 top-full mt-1 w-44 rounded-lg border border-black/10 bg-white shadow-lg dark:border-white/10 dark:bg-gray-800 z-20\">\r\n              <button className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100 dark:hover:bg-gray-700\" onClick={() => { onTipo(''); setTipoMenuOpen(false); }}>Todos os Tipos</button>\r\n              <button className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100 dark:hover:bg-gray-700\" onClick={() => { onTipo('PF'); setTipoMenuOpen(false); }}>Pessoa Física</button>\r\n              <button className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100 dark:hover:bg-gray-700\" onClick={() => { onTipo('PJ'); setTipoMenuOpen(false); }}>Pessoa Jurídica</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Status (custom menu) */}\r\n  <div className=\"relative\" data-slot=\"status-menu\" ref={statusRef}>\r\n          <button\r\n            onClick={() => setStatusMenuOpen(v => !v)}\r\n            className=\"rounded-xl border border-black/10 bg-white px-3 py-2 text-sm dark:border-white/10 dark:bg-white/5 text-foreground\"\r\n            aria-haspopup=\"menu\"\r\n            aria-expanded={statusMenuOpen}\r\n          >\r\n            {status === '' ? 'Todos' : status === 'ATIVO' ? 'Status' : 'Inativos'}\r\n            <span className=\"ml-2\">▾</span>\r\n          </button>\r\n          {statusMenuOpen && (\r\n            <div className=\"absolute left-0 top-full mt-1 w-40 rounded-lg border border-black/10 bg-white shadow-lg dark:border-white/10 dark:bg-gray-800 z-20\">\r\n              <button className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100 dark:hover:bg-gray-700\" onClick={() => { onStatus(''); setStatusMenuOpen(false); }}>Todos</button>\r\n              <button className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100 dark:hover:bg-gray-700\" onClick={() => { onStatus('ATIVO'); setStatusMenuOpen(false); }}>Ativos</button>\r\n              <button className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100 dark:hover:bg-gray-700\" onClick={() => { onStatus('INATIVO'); setStatusMenuOpen(false); }}>Inativos</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex items-center gap-2\">\r\n        {onScopeChange && (\r\n          <div className=\"relative\" ref={scopeRef}>\r\n            <button\r\n              onClick={() => setScopeMenuOpen(v => !v)}\r\n              className=\"rounded-2xl border border-black/10 bg-white px-3 py-2 text-sm dark:border-white/10 dark:bg-white/5 text-foreground\"\r\n              aria-haspopup=\"menu\"\r\n              aria-expanded={scopeMenuOpen}\r\n            >\r\n              {'Selecionados'}\r\n              <span className=\"ml-2\">▾</span>\r\n            </button>\r\n            {scopeMenuOpen && (\r\n              <div className=\"absolute left-0 top-full mt-1 w-44 rounded-lg border border-black/10 bg-white shadow-lg dark:border-white/10 dark:bg-gray-800 z-20\">\r\n                <button className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100 dark:hover:bg-gray-700\" onClick={() => { onScopeChange('selected'); setScopeMenuOpen(false); }}>Selecionados</button>\r\n                <button className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100 dark:hover:bg-gray-700\" onClick={() => { onScopeChange('allFiltered'); setScopeMenuOpen(false); }}>Todos os filtrados</button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n        <div className=\"relative\" ref={exportRef}>\r\n          <button \r\n            onClick={() => !exporting && setShowExportMenu(!showExportMenu)}\r\n            className=\"rounded-2xl border border-black/10 bg-white px-3 py-2 text-sm hover:bg-black/5 dark:border-white/10 dark:bg-white/5 flex items-center gap-1 disabled:opacity-50\"\r\n            disabled={loading || exporting}\r\n            aria-busy={exporting}\r\n          >\r\n            {exporting ? (\r\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n            ) : (\r\n              <Download className=\"h-4 w-4\" />\r\n            )}\r\n            {exporting ? 'Exportando' : 'Exportar'}\r\n            {!exporting && <ChevronDown className=\"h-3 w-3\" />}\r\n          </button>\r\n          \r\n          {showExportMenu && (\r\n            <div className=\"absolute right-0 top-full mt-1 w-40 rounded-lg border border-black/10 bg-white shadow-lg dark:border-white/10 dark:bg-gray-800 z-10\">\r\n              <button\r\n                onClick={() => handleExport('csv')}\r\n                className=\"w-full px-4 py-3 text-left text-sm hover:bg-gray-100 dark:hover:bg-gray-700 rounded-t-lg flex items-center gap-2\"\r\n              >\r\n                <span>📊</span>\r\n                <span>Exportar CSV</span>\r\n              </button>\r\n              <button\r\n                onClick={() => handleExport('pdf')}\r\n                className=\"w-full px-4 py-3 text-left text-sm hover:bg-gray-100 dark:hover:bg-gray-700 rounded-b-lg flex items-center gap-2\"\r\n              >\r\n                <span>📄</span>\r\n                <span>Exportar PDF</span>\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {showNew && (\r\n          <Link href=\"/clientes/novo\" className=\"rounded-2xl bg-[#0098DA] px-4 py-2 text-sm text-white hover:brightness-110 inline-flex items-center gap-1\">\r\n            Novo Cliente\r\n          </Link>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"flex items-center gap-3\">\r\n        {loading && <div className=\"text-xs opacity-70\">Carregando…</div>}\r\n        <div className=\"text-xs opacity-60\">{total.toLocaleString(\"pt-BR\")} resultado(s)</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\components\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\hooks\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\hooks\\useClienteOperations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\pages\\DetailPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[599,602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[599,602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[618,621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[618,621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":127,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":130,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[648,651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[648,651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[764,767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[764,767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1264,1267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1264,1267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'router' and 'showToast'. Either include them or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [id, router, showToast]","fix":{"range":[1655,1659],"text":"[id, router, showToast]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2488,2491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2488,2491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3119,3122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3119,3122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { ClienteForm } from \"@/modules/clientes/ui/ClienteForm\";\r\nimport { ClienteCreateInput, ClienteUpdateInput } from \"@/types/cliente\";\r\nimport { Panel } from \"@/components/GladPros\";\r\nimport { useToast } from \"@/components/ui/Toaster\";\r\n\r\ninterface EditClientePageProps {\r\n  params: { id: string } | Promise<{ id: string }>;\r\n}\r\n\r\nexport default function DetailPage({ params }: EditClientePageProps) {\r\n  const { id } = (params && typeof params === 'object' && 'id' in (params as any)) ? (params as any).id : React.use(params as any);\r\n  const router = useRouter();\r\n  const { showToast } = useToast();\r\n  const [cliente, setCliente] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [operationLoading, setOperationLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    const fetchCliente = async () => {\r\n      try {\r\n        const response = await fetch(`/api/clientes/${id}`);\r\n        if (!response.ok) {\r\n          throw new Error('Cliente não encontrado');\r\n        }\r\n        const data = await response.json();\r\n        if (!cancelled) setCliente(data);\r\n      } catch (error: any) {\r\n        if (cancelled) return;\r\n        console.error('Erro ao carregar cliente:', error);\r\n        showToast({ title: 'Erro', message: error.message || 'Erro ao carregar cliente', type: 'error' });\r\n        router.push('/clientes');\r\n      } finally {\r\n        if (!cancelled) setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCliente();\r\n    return () => { cancelled = true };\r\n  }, [id]);\r\n\r\n  const handleSubmit = async (data: ClienteCreateInput | ClienteUpdateInput) => {\r\n    setOperationLoading(true);\r\n    try {\r\n      const response = await fetch(`/api/clientes/${id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        if (error?.details) {\r\n          throw { message: error.error || error.message || 'Dados inválidos', details: error.details };\r\n        }\r\n        const msg: string = error?.error || error?.message || '';\r\n        const fieldErrors: Record<string, string> = {};\r\n        if (/e-mail.*cadastrado|E-mail.*cadastrado/i.test(msg)) fieldErrors.email = msg;\r\n        if (/Documento.*cadastrado/i.test(msg)) {\r\n          const d: any = data;\r\n          if (d?.tipo === 'PJ' && d?.ein) fieldErrors.ein = msg;\r\n          if (d?.tipo === 'PF') {\r\n            if (d?.tipoDocumentoPF === 'SSN' && d?.ssn) fieldErrors.ssn = msg;\r\n            if (d?.tipoDocumentoPF === 'ITIN' && d?.itin) fieldErrors.itin = msg;\r\n          }\r\n        }\r\n        if (Object.keys(fieldErrors).length) throw { message: msg || 'Dados inválidos', fieldErrors };\r\n        throw new Error(msg || 'Erro ao atualizar cliente');\r\n      }\r\n\r\n      showToast({ title: 'Sucesso', message: 'Cliente atualizado com sucesso', type: 'success' });\r\n      router.push('/clientes');\r\n    } catch (error: any) {\r\n      if (error?.details) throw error;\r\n      showToast({ title: 'Erro', message: error.message || 'Erro ao atualizar cliente', type: 'error' });\r\n    } finally {\r\n      setOperationLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => router.push('/clientes');\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <h2 className=\"font-title text-xl\">Editar Cliente</h2>\r\n        </div>\r\n        <Panel title=\"Carregando...\">\r\n          <div className=\"p-6 text-center text-gray-500\">Carregando dados do cliente...</div>\r\n        </Panel>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h2 className=\"font-title text-xl\">Editar Cliente</h2>\r\n      </div>\r\n\r\n      <Panel title=\"Editar Cliente\">\r\n        <ClienteForm cliente={cliente} onSubmit={handleSubmit} onCancel={handleCancel} loading={operationLoading} />\r\n      </Panel>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\pages\\ListPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'needsExportWarning' is defined but never used.","line":9,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1972,1975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1972,1975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2220,2223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2220,2223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":166,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":166,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":181,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":181,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":196,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":196,"endColumn":29}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/modules/clientes/pages/ListPage.tsx\r\n\"use client\";\r\nimport { useEffect, useMemo, useState, useCallback } from \"react\";\r\nimport Link from \"next/link\";\r\nimport { Pagination } from \"@/modules/clientes/ui/Pagination\";\r\nimport Toolbar from \"../components/Toolbar\";\r\nimport ClientesTable from \"../components/ClientesTable\";\r\nimport { getClientes, deleteCliente, toggleClienteStatus } from \"../services/clientesApi\";\r\nimport { runBulkAction, needsExportWarning } from \"../services/bulkService\";\r\nimport { useConfirm } from \"@/components/ui/ConfirmDialog\";\r\nimport type { ClienteDTO } from \"@/types/cliente\";\r\nimport { Panel } from \"@/components/GladPros\";\r\nimport { useToast } from \"@/components/ui/Toaster\";\r\n\r\nexport default function ClientesListPage() {\r\n  const { confirm, Dialog } = useConfirm();\r\n  const { showToast } = useToast();\r\n  const [q, setQ] = useState(\"\");\r\n  const [tipo, setTipo] = useState(\"\");\r\n  // Mostrar apenas ativos por padrão\r\n  const [status, setStatus] = useState(\"ATIVO\");\r\n  const [page, setPage] = useState(1);\r\n  const [pageSize, setPageSize] = useState(10);\r\n  const [total, setTotal] = useState(0);\r\n  const [data, setData] = useState<ClienteDTO[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedIds, setSelectedIds] = useState<number[]>([]);\r\n  const [exportScope, setExportScope] = useState<'selected' | 'allFiltered'>('allFiltered');\r\n  const [sortKey, setSortKey] = useState<'nome' | 'tipo' | 'email' | 'telefone' | 'documento' | 'cidadeEstado' | 'status'>('nome');\r\n  const [sortDir, setSortDir] = useState<'asc' | 'desc'>('asc');\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  // debounce\r\n  useEffect(() => {\r\n    const t = setTimeout(() => setQ(searchTerm), 350);\r\n    return () => clearTimeout(t);\r\n  }, [searchTerm]);\r\n\r\n  const load = useCallback(async (signal?: AbortSignal) => {\r\n    setLoading(true);\r\n    try {\r\n      const res = await getClientes({ \r\n        q, \r\n        tipo: tipo as any, \r\n        ativo: status === 'ATIVO' ? true : status === 'INATIVO' ? false : 'all',\r\n        page, \r\n        pageSize,\r\n        sortKey,\r\n        sortDir\r\n      }, signal);\r\n      setData(res.data);\r\n      setTotal(res.total);\r\n    } catch (e: any) {\r\n      if (e?.name !== 'AbortError') {\r\n        console.error(e);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [q, tipo, status, page, pageSize, sortKey, sortDir]);\r\n\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n    load(controller.signal);\r\n    return () => controller.abort();\r\n  }, [load]);\r\n\r\n  async function onDelete(id: number) {\r\n    const ok = await confirm({ \r\n      title: \"Excluir cliente\", \r\n      message: \"Tem certeza que deseja excluir este cliente?\", \r\n      confirmText: \"Excluir\", \r\n      tone: \"danger\" \r\n    });\r\n    if (!ok) return;\r\n    try {\r\n      await deleteCliente(String(id));\r\n      showToast({ title: 'Excluído', message: 'Cliente excluído com sucesso', type: 'success' });\r\n      load();\r\n    } catch (error) {\r\n      console.error(error);\r\n      showToast({ title: 'Erro', message: 'Falha ao excluir cliente', type: 'error' });\r\n    }\r\n  }\r\n\r\n  async function onToggleStatus(id: number, currentStatus: boolean) {\r\n    const action = currentStatus ? \"desativar\" : \"ativar\";\r\n    const ok = await confirm({ \r\n      title: `${action.charAt(0).toUpperCase() + action.slice(1)} cliente`, \r\n      message: `Tem certeza que deseja ${action} este cliente?`, \r\n      confirmText: action.charAt(0).toUpperCase() + action.slice(1),\r\n      tone: currentStatus ? \"danger\" : \"default\"\r\n    });\r\n    if (!ok) return;\r\n    \r\n    try {\r\n      await toggleClienteStatus(String(id), !currentStatus);\r\n      showToast({ title: 'Sucesso', message: 'Status atualizado', type: 'success' });\r\n      load(); // Recarregar lista\r\n    } catch (error) {\r\n      console.error(error);\r\n      showToast({ title: 'Erro', message: 'Erro ao alterar status do cliente', type: 'error' });\r\n    }\r\n  }\r\n\r\n  const totalPages = useMemo(() => Math.max(1, Math.ceil(total / pageSize)), [total, pageSize]);\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h2 className=\"font-title text-xl\">Clientes</h2>\r\n        <Link href=\"/clientes/novo\" className=\"rounded-2xl bg-[#0098DA] px-4 py-2 text-sm text-white hover:brightness-110\">Novo Cliente</Link>\r\n      </div>\r\n\r\n      <Toolbar \r\n        q={searchTerm} \r\n        onQ={setSearchTerm}\r\n        tipo={tipo}\r\n        onTipo={setTipo}\r\n        status={status}\r\n        onStatus={setStatus}\r\n        total={total}\r\n        showNew={false}\r\n        clientes={data}\r\n        scope={exportScope}\r\n        selectedCount={selectedIds.length}\r\n        onScopeChange={(s) => setExportScope(s)}\r\n        loading={loading}\r\n      />\r\n\r\n      <Panel title=\"Lista de Clientes\">\r\n        {loading ? (\r\n          <div className=\"p-6 text-sm opacity-60\">Carregando…</div>\r\n        ) : (\r\n          <ClientesTable \r\n            data={data} \r\n            onEdit={(id: number) => (location.href = `/clientes/${id}`)} \r\n            onDelete={onDelete} \r\n            onToggleStatus={onToggleStatus}\r\n            sortKey={sortKey}\r\n            sortDir={sortDir}\r\n            onSortChange={(key, dir) => {\r\n              setSortKey(key);\r\n              setSortDir(dir);\r\n              setPage(1);\r\n            }}\r\n            onSelectedChange={setSelectedIds}\r\n          />\r\n        )}\r\n      </Panel>\r\n      <Dialog />\r\n\r\n      <div className=\"flex items-center justify-between text-sm\">\r\n        <div className=\"opacity-60\">Página {page} de {totalPages}</div>\r\n        <div className=\"flex items-center gap-2\">\r\n          {selectedIds.length > 0 && (\r\n            <>\r\n              <button\r\n                onClick={async () => {\r\n                  const ok = await confirm({ title: 'Ativar selecionados', message: `Ativar ${selectedIds.length} cliente(s)?`, confirmText: 'Ativar' });\r\n                  if (!ok) return;\r\n                  try {\r\n                    await runBulkAction({ action: 'activate', scope: 'selected', ids: selectedIds });\r\n                    showToast({ title: 'Sucesso', message: 'Clientes ativados', type: 'success' });\r\n                    setSelectedIds([]);\r\n                    load();\r\n                  } catch (e) {\r\n                    showToast({ title: 'Erro', message: 'Falha ao ativar selecionados', type: 'error' });\r\n                  }\r\n                }}\r\n                className=\"rounded-lg border px-3 py-1\"\r\n              >Ativar Selecionados</button>\r\n              <button\r\n                onClick={async () => {\r\n                  const ok = await confirm({ title: 'Desativar selecionados', message: `Desativar ${selectedIds.length} cliente(s)?`, confirmText: 'Desativar', tone: 'danger' });\r\n                  if (!ok) return;\r\n                  try {\r\n                    await runBulkAction({ action: 'deactivate', scope: 'selected', ids: selectedIds });\r\n                    showToast({ title: 'Sucesso', message: 'Clientes desativados', type: 'success' });\r\n                    setSelectedIds([]);\r\n                    load();\r\n                  } catch (e) {\r\n                    showToast({ title: 'Erro', message: 'Falha ao desativar selecionados', type: 'error' });\r\n                  }\r\n                }}\r\n                className=\"rounded-lg border px-3 py-1\"\r\n              >Desativar Selecionados</button>\r\n              <button\r\n                onClick={async () => {\r\n                  const ok = await confirm({ title: 'Excluir selecionados', message: `Excluir ${selectedIds.length} cliente(s)? Essa ação não pode ser desfeita.`, confirmText: 'Excluir', tone: 'danger' });\r\n                  if (!ok) return;\r\n                  try {\r\n                    await runBulkAction({ action: 'delete', scope: 'selected', ids: selectedIds });\r\n                    showToast({ title: 'Sucesso', message: 'Clientes excluídos', type: 'success' });\r\n                    setSelectedIds([]);\r\n                    load();\r\n                  } catch (e) {\r\n                    showToast({ title: 'Erro', message: 'Falha ao excluir selecionados', type: 'error' });\r\n                  }\r\n                }}\r\n                className=\"rounded-lg border px-3 py-1 text-red-600\"\r\n              >Excluir Selecionados</button>\r\n            </>\r\n          )}\r\n\r\n          {/* Anterior / Próximo buttons like Users module */}\r\n          <button disabled={page <= 1} onClick={() => setPage((p) => Math.max(1, p - 1))} className=\"rounded-lg border px-3 py-1 disabled:opacity-50\">Anterior</button>\r\n          <button disabled={page >= totalPages} onClick={() => setPage((p) => Math.min(totalPages, p + 1))} className=\"rounded-lg border px-3 py-1 disabled:opacity-50\">Próximo</button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mt-4\">\r\n        <Pagination\r\n          currentPage={page}\r\n          totalPages={totalPages}\r\n          pageSize={pageSize}\r\n          total={total}\r\n          onPageChange={(p) => setPage(p)}\r\n          onPageSizeChange={(s) => { setPageSize(s); setPage(1); }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\pages\\NewPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1351,1354],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1351,1354],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1974,1977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1974,1977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport { useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { ClienteForm } from \"@/modules/clientes/ui/ClienteForm\";\r\nimport { ClienteCreateInput, ClienteUpdateInput } from \"@/types/cliente\";\r\nimport { Panel } from \"@/components/GladPros\";\r\nimport { useToast } from \"@/components/ui/Toaster\";\r\n\r\nexport default function NewPage() {\r\n  const router = useRouter();\r\n  const { showToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleSubmit = async (data: ClienteCreateInput | ClienteUpdateInput) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch('/api/clientes', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        if (error?.details) {\r\n          throw { message: error.error || error.message || 'Dados inválidos', details: error.details };\r\n        }\r\n        const msg: string = error?.error || error?.message || '';\r\n        const fieldErrors: Record<string, string> = {};\r\n        if (/e-mail.*cadastrado|E-mail.*cadastrado/i.test(msg)) {\r\n          fieldErrors.email = msg;\r\n        }\r\n        if (/Documento.*cadastrado/i.test(msg)) {\r\n          const d: any = data;\r\n          if (d?.tipo === 'PJ' && d?.ein) fieldErrors.ein = msg;\r\n          if (d?.tipo === 'PF') {\r\n            if (d?.tipoDocumentoPF === 'SSN' && d?.ssn) fieldErrors.ssn = msg;\r\n            if (d?.tipoDocumentoPF === 'ITIN' && d?.itin) fieldErrors.itin = msg;\r\n          }\r\n        }\r\n        if (Object.keys(fieldErrors).length) throw { message: msg || 'Dados inválidos', fieldErrors };\r\n        throw new Error(msg || 'Erro ao criar cliente');\r\n      }\r\n\r\n      showToast({ title: 'Sucesso', message: 'Cliente criado com sucesso', type: 'success' });\r\n      router.push('/clientes');\r\n    } catch (error: any) {\r\n      console.error('Erro ao criar cliente:', error);\r\n      if (error?.details) throw error;\r\n      showToast({ title: 'Erro', message: error.message || 'Erro ao criar cliente', type: 'error' });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    router.push('/clientes');\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <Panel title=\"Novo Cliente\">\r\n        <ClienteForm\r\n          onSubmit={handleSubmit}\r\n          onCancel={handleCancel}\r\n          loading={loading}\r\n        />\r\n      </Panel>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\server\\create-cliente.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\services\\bulkService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\services\\clientesApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\services\\createCliente.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\services\\exportService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1213,1216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1213,1216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/modules/clientes/services/exportService.ts\r\nimport type { ClienteDTO } from \"@/types/cliente\";\r\n\r\nexport const exportToCSV = (clientes: ClienteDTO[], filename: string = 'clientes') => {\r\n  const headers = [\r\n    'ID',\r\n    'Nome/Empresa',\r\n    'Tipo',\r\n    'E-mail',\r\n    'Telefone',\r\n    'Cidade',\r\n    'Estado',\r\n    'Status',\r\n    'Criado Em',\r\n  ];\r\n\r\n  const rows = clientes.map((c) => [\r\n    c.id,\r\n    c.nomeCompletoOuRazao || '',\r\n    c.tipo || '',\r\n    c.email || '',\r\n    c.telefone || '',\r\n    c.cidade || '',\r\n    c.estado || '',\r\n    c.ativo ? 'Ativo' : 'Inativo',\r\n    c.criadoEm ? new Date(c.criadoEm).toLocaleDateString('pt-BR') : '',\r\n  ]);\r\n\r\n  const csv = [\r\n    headers.join(','),\r\n    ...rows.map((r) => r.map((f) => `\"${String(f).replace(/\"/g, '\"\"')}\"`).join(',')),\r\n  ].join('\\n');\r\n\r\n  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.download = `${filename}.csv`;\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  link.remove();\r\n  URL.revokeObjectURL(url);\r\n};\r\n\r\nexport const exportToCSVServer = async (opts: { filename?: string; filters?: any; clientes?: ClienteDTO[] }) => {\r\n  const res = await fetch('/api/clientes/export/csv', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(opts),\r\n  });\r\n  if (!res.ok) {\r\n    const err = await res.json().catch(() => ({}));\r\n    throw err?.message ? new Error(err.message) : new Error('Falha ao gerar CSV');\r\n  }\r\n  const blob = await res.blob();\r\n  const url = URL.createObjectURL(blob);\r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = `${opts.filename || 'clientes'}.csv`;\r\n  a.click();\r\n  URL.revokeObjectURL(url);\r\n};\r\n\r\nexport const exportToPDF = async (clientes: ClienteDTO[], filename: string = 'clientes') => {\r\n  try {\r\n    const res = await fetch('/api/clientes/export/pdf', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ clientes, filename }),\r\n    });\r\n    if (!res.ok) {\r\n      const err = await res.json().catch(() => ({}));\r\n      throw err?.message ? new Error(err.message) : new Error('Falha ao gerar PDF');\r\n    }\r\n    const blob = await res.blob();\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = `${filename}.pdf`;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    link.remove();\r\n    window.URL.revokeObjectURL(url);\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\services\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\ui\\ClienteCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Cliente' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\r\nimport { Cliente, TipoCliente } from '@/types/cliente'\r\n\r\ninterface ClienteCardProps {\r\n  cliente: {\r\n    id: number\r\n    tipo: TipoCliente\r\n    nomeCompletoOuRazao: string\r\n    email: string\r\n    telefone: string\r\n    cidade: string | null\r\n    estado: string | null\r\n    documentoMasked: string\r\n    ativo: boolean\r\n    criadoEm: string\r\n    atualizadoEm: string\r\n  }\r\n  onView?: (id: number) => void\r\n  onEdit?: (id: number) => void\r\n  onDelete?: (id: number) => void\r\n}\r\n\r\nexport function ClienteCard({ cliente, onView, onEdit, onDelete }: ClienteCardProps) {\r\n  const handleView = () => onView?.(cliente.id)\r\n  const handleEdit = () => onEdit?.(cliente.id)\r\n  const handleDelete = () => onDelete?.(cliente.id)\r\n\r\n  return (\r\n    <div className={`\r\n      bg-white rounded-lg shadow-sm border border-gray-200 p-6 transition-all duration-200\r\n      hover:shadow-md hover:border-blue-200\r\n      ${!cliente.ativo ? 'opacity-60 bg-gray-50' : ''}\r\n    `}>\r\n      {/* Header */}\r\n      <div className=\"flex items-start justify-between mb-4\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <div className={`\r\n            w-10 h-10 rounded-full flex items-center justify-center text-white font-semibold text-sm\r\n            ${cliente.tipo === 'PF' ? 'bg-blue-500' : 'bg-purple-500'}\r\n          `}>\r\n            {cliente.tipo}\r\n          </div>\r\n          <div>\r\n            <h3 className=\"font-semibold text-foreground dark:text-white text-lg leading-tight\">\r\n              {cliente.nomeCompletoOuRazao}\r\n            </h3>\r\n            <p className=\"text-sm text-gray-500\">\r\n              {cliente.tipo === 'PF' ? 'Pessoa Física' : 'Pessoa Jurídica'}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Status Badge */}\r\n        <span className={`\r\n          inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\r\n          ${cliente.ativo \r\n            ? 'bg-green-100 text-green-800' \r\n            : 'bg-gray-100 text-gray-800'\r\n          }\r\n        `}>\r\n          {cliente.ativo ? 'Ativo' : 'Inativo'}\r\n        </span>\r\n      </div>\r\n\r\n      {/* Contact Info */}\r\n      <div className=\"space-y-2 mb-4\">\r\n        <div className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \r\n              d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\r\n          </svg>\r\n          <span className=\"truncate\">{cliente.email}</span>\r\n        </div>\r\n        \r\n        {cliente.telefone && (\r\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \r\n                d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\r\n            </svg>\r\n            <span>{cliente.telefone}</span>\r\n          </div>\r\n        )}\r\n        \r\n        {(cliente.cidade || cliente.estado) && (\r\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \r\n                d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \r\n                d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n            </svg>\r\n            <span>{[cliente.cidade, cliente.estado].filter(Boolean).join(', ')}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Document Info */}\r\n      <div className=\"flex items-center gap-2 text-xs text-gray-500 mb-4\">\r\n        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \r\n            d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n        </svg>\r\n        <span>{cliente.documentoMasked}</span>\r\n        <span className=\"mx-1\">•</span>\r\n        <span>Criado {new Date(cliente.criadoEm).toLocaleDateString('pt-BR')}</span>\r\n      </div>\r\n\r\n      {/* Action Buttons */}\r\n      <div className=\"flex gap-2 pt-4 border-t border-gray-100\">\r\n        {onView && (\r\n          <button\r\n            onClick={handleView}\r\n            className=\"flex-1 px-3 py-2 text-sm font-medium text-blue-700 bg-blue-50 rounded-md hover:bg-blue-100 transition-colors\"\r\n          >\r\n            Ver Detalhes\r\n          </button>\r\n        )}\r\n        {onEdit && (\r\n          <button\r\n            onClick={handleEdit}\r\n            className=\"flex-1 px-3 py-2 text-sm font-medium text-gray-700 bg-gray-50 rounded-md hover:bg-gray-100 transition-colors\"\r\n          >\r\n            Editar\r\n          </button>\r\n        )}\r\n        {onDelete && cliente.ativo && (\r\n          <button\r\n            onClick={handleDelete}\r\n            className=\"px-3 py-2 text-sm font-medium text-red-700 bg-red-50 rounded-md hover:bg-red-100 transition-colors\"\r\n          >\r\n            Inativar\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\ui\\ClienteDetailsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\ui\\ClienteFilters.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[605,608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[605,608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":109,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4647,4673],"text":"\r\n                Busca: &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4647,4673],"text":"\r\n                Busca: &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4647,4673],"text":"\r\n                Busca: &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4647,4673],"text":"\r\n                Busca: &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":109,"column":36,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4684,4703],"text":"&quot;\r\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4684,4703],"text":"&ldquo;\r\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4684,4703],"text":"&#34;\r\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4684,4703],"text":"&rdquo;\r\n                "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\r\nimport { ClienteFilters as ClienteFiltersInput } from '@/types/cliente'\r\n\r\ninterface ClienteFiltersProps {\r\n  filters: ClienteFiltersInput\r\n  onFiltersChange: (filters: Partial<ClienteFiltersInput>) => void\r\n  onClear: () => void\r\n}\r\n\r\nexport function ClienteFilters({ filters, onFiltersChange, onClear }: ClienteFiltersProps) {\r\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    onFiltersChange({ q: e.target.value })\r\n  }\r\n\r\n  const handleTipoChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    onFiltersChange({ tipo: e.target.value as any })\r\n  }\r\n\r\n  const handleAtivoChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const value = e.target.value\r\n    onFiltersChange({ \r\n      ativo: value === 'all' ? 'all' : value === 'true' \r\n    })\r\n  }\r\n\r\n  const hasActiveFilters = filters.q || filters.tipo !== 'all' || filters.ativo !== 'all'\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6\">\r\n      <div className=\"flex flex-wrap gap-4 items-end\">\r\n        {/* Search Input */}\r\n        <div className=\"flex-1 min-w-64\">\r\n          <label htmlFor=\"search\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n            Buscar cliente\r\n          </label>\r\n          <div className=\"relative\">\r\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n              <svg className=\"h-5 w-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \r\n                  d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\r\n              </svg>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              id=\"search\"\r\n              className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white\"\r\n              placeholder=\"Nome, email, documento...\"\r\n              value={filters.q || ''}\r\n              onChange={handleSearchChange}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Type Filter */}\r\n        <div className=\"min-w-32\">\r\n          <label htmlFor=\"tipo\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n            Tipo\r\n          </label>\r\n          <select\r\n            id=\"tipo\"\r\n            className=\"block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white\"\r\n            value={filters.tipo}\r\n            onChange={handleTipoChange}\r\n          >\r\n            <option value=\"all\">Todos</option>\r\n            <option value=\"PF\">Pessoa Física</option>\r\n            <option value=\"PJ\">Pessoa Jurídica</option>\r\n          </select>\r\n        </div>\r\n\r\n        {/* Status Filter */}\r\n        <div className=\"min-w-32\">\r\n          <label htmlFor=\"ativo\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n            Status\r\n          </label>\r\n          <select\r\n            id=\"ativo\"\r\n            className=\"block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white\"\r\n            value={filters.ativo === 'all' ? 'all' : filters.ativo ? 'true' : 'false'}\r\n            onChange={handleAtivoChange}\r\n          >\r\n            <option value=\"all\">Todos</option>\r\n            <option value=\"true\">Ativo</option>\r\n            <option value=\"false\">Inativo</option>\r\n          </select>\r\n        </div>\r\n\r\n        {/* Clear Button */}\r\n        {hasActiveFilters && (\r\n          <div>\r\n            <button\r\n              onClick={onClear}\r\n              className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 border border-gray-300 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors\"\r\n            >\r\n              Limpar\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Active Filters Summary */}\r\n      {hasActiveFilters && (\r\n        <div className=\"mt-4 pt-4 border-t border-gray-100\">\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            <span className=\"text-sm text-gray-500\">Filtros ativos:</span>\r\n            \r\n            {filters.q && (\r\n              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\r\n                Busca: \"{filters.q}\"\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"ml-1 inline-flex items-center justify-center h-4 w-4 rounded-full text-blue-400 hover:bg-blue-200 hover:text-blue-500\"\r\n                  onClick={() => onFiltersChange({ q: '' })}\r\n                >\r\n                  <svg className=\"h-2 w-2\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 8 8\">\r\n                    <path strokeLinecap=\"round\" d=\"m1 1 6 6m0-6-6 6\" />\r\n                  </svg>\r\n                </button>\r\n              </span>\r\n            )}\r\n            \r\n            {filters.tipo !== 'all' && (\r\n              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\r\n                {filters.tipo === 'PF' ? 'Pessoa Física' : 'Pessoa Jurídica'}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"ml-1 inline-flex items-center justify-center h-4 w-4 rounded-full text-purple-400 hover:bg-purple-200 hover:text-purple-500\"\r\n                  onClick={() => onFiltersChange({ tipo: 'all' })}\r\n                >\r\n                  <svg className=\"h-2 w-2\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 8 8\">\r\n                    <path strokeLinecap=\"round\" d=\"m1 1 6 6m0-6-6 6\" />\r\n                  </svg>\r\n                </button>\r\n              </span>\r\n            )}\r\n            \r\n            {filters.ativo !== 'all' && (\r\n              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\r\n                filters.ativo ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'\r\n              }`}>\r\n                {filters.ativo ? 'Ativo' : 'Inativo'}\r\n                <button\r\n                  type=\"button\"\r\n                  className={`ml-1 inline-flex items-center justify-center h-4 w-4 rounded-full ${\r\n                    filters.ativo \r\n                      ? 'text-green-400 hover:bg-green-200 hover:text-green-500'\r\n                      : 'text-gray-400 hover:bg-gray-200 hover:text-gray-500'\r\n                  }`}\r\n                  onClick={() => onFiltersChange({ ativo: 'all' })}\r\n                >\r\n                  <svg className=\"h-2 w-2\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 8 8\">\r\n                    <path strokeLinecap=\"round\" d=\"m1 1 6 6m0-6-6 6\" />\r\n                  </svg>\r\n                </button>\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\ui\\ClienteForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3707,3710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3707,3710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4610,4613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4610,4613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5129,5132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5129,5132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport React, { useState } from 'react'\r\nimport type { ClienteCreateInput, ClienteUpdateInput, TipoCliente, TipoDocumentoPF } from '@/types/cliente'\r\n\r\ntype FormData = ClienteCreateInput\r\n\r\ninterface ClienteFormProps {\r\n  cliente?: Partial<FormData> & { id?: number } | null\r\n  onSubmit: (data: ClienteCreateInput | ClienteUpdateInput) => Promise<void>\r\n  onCancel: () => void\r\n  loading?: boolean\r\n}\r\n\r\nexport function ClienteForm({ cliente, onSubmit, onCancel, loading = false }: ClienteFormProps) {\r\n  const [formData, setFormData] = useState<FormData>({\r\n    tipo: (cliente?.tipo as TipoCliente) || 'PF',\r\n    nomeCompleto: (cliente?.nomeCompleto as string) || '',\r\n    nomeFantasia: (cliente?.nomeFantasia as string) || '',\r\n    email: (cliente?.email as string) || '',\r\n    telefone: (cliente?.telefone as string) || '',\r\n    tipoDocumentoPF: (cliente?.tipoDocumentoPF as TipoDocumentoPF) || 'SSN',\r\n    ssn: (cliente?.ssn as string) || '',\r\n    itin: (cliente?.itin as string) || '',\r\n    ein: (cliente?.ein as string) || '',\r\n    endereco1: (cliente?.endereco1 as string) || '',\r\n    endereco2: (cliente?.endereco2 as string) || '',\r\n    cidade: (cliente?.cidade as string) || '',\r\n    estado: (cliente?.estado as string) || '',\r\n    zipcode: (cliente?.zipcode as string) || '',\r\n    observacoes: (cliente?.observacoes as string) || '',\r\n  })\r\n\r\n  const [errors, setErrors] = useState<Record<string, string>>({})\r\n\r\n  const handleInputChange = (field: keyof FormData, value: string) => {\r\n    setFormData((prev) => ({ ...prev, [field]: value }))\r\n    if (errors[field as string]) setErrors((e) => ({ ...e, [field as string]: '' }))\r\n  }\r\n\r\n  const formatTelefone = (value: string) => {\r\n    const digits = value.replace(/\\D/g, '')\r\n    if (digits.length <= 10) return digits.replace(/(\\d{3})(\\d{3})(\\d{4})/, '($1) $2-$3')\r\n    return digits.slice(0, 10).replace(/(\\d{3})(\\d{3})(\\d{4})/, '($1) $2-$3')\r\n  }\r\n\r\n  const formatZipCode = (value: string) => {\r\n    const digits = value.replace(/\\D/g, '').slice(0, 9)\r\n    return digits.replace(/(\\d{5})(\\d{0,4})/, (_, a, b) => (b ? `${a}-${b}` : a))\r\n  }\r\n\r\n  const formatSSN = (value: string) => {\r\n    const d = value.replace(/\\D/g, '').slice(0, 9)\r\n    return d.replace(/(\\d{3})(\\d{0,2})(\\d{0,4})/, (_, a, b, c) => [a, b && `-${b}`, c && `-${c}`].filter(Boolean).join(''))\r\n  }\r\n  const formatITIN = formatSSN\r\n  const formatEIN = (value: string) => {\r\n    const d = value.replace(/\\D/g, '').slice(0, 9)\r\n    return d.replace(/(\\d{2})(\\d{0,7})/, (_, a, b) => (b ? `${a}-${b}` : a))\r\n  }\r\n\r\n  const validate = () => {\r\n    const e: Record<string, string> = {}\r\n    if (!formData.email) e.email = 'E-mail é obrigatório'\r\n    else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) e.email = 'E-mail inválido'\r\n    if (!formData.telefone) e.telefone = 'Telefone é obrigatório'\r\n    if (formData.tipo === 'PF') {\r\n      if (!formData.nomeCompleto) e.nomeCompleto = 'Nome completo é obrigatório'\r\n      if (formData.tipoDocumentoPF === 'SSN' && formData.ssn) {\r\n        if (!/^\\d{3}-\\d{2}-\\d{4}$|^\\d{9}$/.test(formData.ssn)) e.ssn = 'SSN inválido'\r\n      }\r\n      if (formData.tipoDocumentoPF === 'ITIN' && formData.itin) {\r\n        if (!/^9\\d{2}-\\d{2}-\\d{4}$|^9\\d{8}$/.test(formData.itin)) e.itin = 'ITIN inválido'\r\n      }\r\n    } else {\r\n      if (!formData.nomeFantasia) e.nomeFantasia = 'Nome da Empresa é obrigatório'\r\n      if (formData.ein && !/^\\d{2}-\\d{7}$|^\\d{9}$/.test(formData.ein)) e.ein = 'EIN inválido'\r\n    }\r\n    return e\r\n  }\r\n\r\n  const handleSubmit = async (ev: React.FormEvent) => {\r\n    ev.preventDefault()\r\n    const e = validate()\r\n    if (Object.keys(e).length) {\r\n      setErrors(e)\r\n      return\r\n    }\r\n\r\n    const payload: any = { ...formData }\r\n    // Normalize document masks to match server regex patterns\r\n    if (payload.tipo === 'PF') {\r\n      if (payload.tipoDocumentoPF === 'SSN' && payload.ssn) {\r\n        payload.ssn = formatSSN(payload.ssn)\r\n      }\r\n      if (payload.tipoDocumentoPF === 'ITIN' && payload.itin) {\r\n        payload.itin = formatITIN(payload.itin)\r\n      }\r\n    } else if (payload.tipo === 'PJ' && payload.ein) {\r\n      payload.ein = formatEIN(payload.ein)\r\n    }\r\n  if (payload.tipo === 'PF') {\r\n      payload.ein = null\r\n      if (payload.tipoDocumentoPF === 'SSN') payload.itin = null\r\n      if (payload.tipoDocumentoPF === 'ITIN') payload.ssn = null\r\n      payload.nomeFantasia = null\r\n    } else {\r\n      payload.nomeCompleto = null\r\n      payload.tipoDocumentoPF = null\r\n      payload.ssn = null\r\n      payload.itin = null\r\n    }\r\n\r\n    try {\r\n      await onSubmit(payload)\r\n    } catch (err: any) {\r\n      // Mapear erros de validação do servidor (Zod) para campos do formulário\r\n      const fieldErrors: Record<string, string> = {}\r\n      // Suporte a erro.fieldErrors direto\r\n      if (err && typeof err === 'object' && err.fieldErrors && typeof err.fieldErrors === 'object') {\r\n        Object.assign(fieldErrors, err.fieldErrors)\r\n      }\r\n      // Suporte a err.details como issues do Zod\r\n      const issues = err?.details || err?.issues\r\n      if (Array.isArray(issues)) {\r\n        issues.forEach((issue: any) => {\r\n          const path = Array.isArray(issue.path) ? issue.path.join('.') : issue.path\r\n          if (typeof path === 'string' && path) {\r\n            fieldErrors[path] = issue.message || 'Valor inválido'\r\n          }\r\n        })\r\n      }\r\n      if (Object.keys(fieldErrors).length) {\r\n        setErrors(fieldErrors)\r\n        return\r\n      }\r\n      // Se não for erro de campo, apenas relançar para tratamento externo\r\n      throw err\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"space-y-6 max-w-4xl\">\r\n      {/* Tipo de Cliente */}\r\n      <div>\r\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Tipo de Cliente *</label>\r\n        <div className=\"flex gap-4\">\r\n          <label className=\"flex items-center\">\r\n            <input type=\"radio\" name=\"tipo\" value=\"PF\" checked={formData.tipo === 'PF'} onChange={(e) => handleInputChange('tipo', e.target.value)} className=\"mr-2\" disabled={loading} />\r\n            Pessoa Física\r\n          </label>\r\n          <label className=\"flex items-center\">\r\n            <input type=\"radio\" name=\"tipo\" value=\"PJ\" checked={formData.tipo === 'PJ'} onChange={(e) => handleInputChange('tipo', e.target.value)} className=\"mr-2\" disabled={loading} />\r\n            Pessoa Jurídica\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* Esquerda: Dados */}\r\n        <div className=\"space-y-4\">\r\n          <h3 className=\"text-lg font-medium text-foreground dark:text-white\">Dados Principais</h3>\r\n          {formData.tipo === 'PF' ? (\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Nome Completo *</label>\r\n              <input type=\"text\" value={formData.nomeCompleto || ''} onChange={(e) => handleInputChange('nomeCompleto', e.target.value)} placeholder=\"João da Silva\" disabled={loading}\r\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.nomeCompleto ? 'border-red-300' : 'border-gray-300'}`} />\r\n              {errors.nomeCompleto && <p className=\"mt-1 text-sm text-red-600\">{errors.nomeCompleto}</p>}\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Nome da Empresa *</label>\r\n              <input type=\"text\" value={formData.nomeFantasia || ''} onChange={(e) => handleInputChange('nomeFantasia', e.target.value)} placeholder=\"Tech Solutions Inc\" disabled={loading}\r\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.nomeFantasia ? 'border-red-300' : 'border-gray-300'}`} />\r\n              {errors.nomeFantasia && <p className=\"mt-1 text-sm text-red-600\">{errors.nomeFantasia}</p>}\r\n            </div>\r\n          )}\r\n\r\n          {/* Documentos (opcionais) */}\r\n          {formData.tipo === 'PF' ? (\r\n            <div className=\"pt-2\">\r\n              <h4 className=\"text-sm font-medium text-foreground dark:text-white mb-3\">Documentos (Opcional)</h4>\r\n              <div className=\"flex gap-4 mb-2\">\r\n                <label className=\"flex items-center\"><input type=\"radio\" name=\"tipoDocumentoPF\" value=\"SSN\" checked={formData.tipoDocumentoPF === 'SSN'} onChange={(e) => handleInputChange('tipoDocumentoPF', e.target.value)} className=\"mr-2\" disabled={loading} />SSN</label>\r\n                <label className=\"flex items-center\"><input type=\"radio\" name=\"tipoDocumentoPF\" value=\"ITIN\" checked={formData.tipoDocumentoPF === 'ITIN'} onChange={(e) => handleInputChange('tipoDocumentoPF', e.target.value)} className=\"mr-2\" disabled={loading} />ITIN</label>\r\n              </div>\r\n              {formData.tipoDocumentoPF === 'SSN' && (\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">SSN (Opcional)</label>\r\n                  <input type=\"text\" value={formatSSN(formData.ssn || '')} onChange={(e) => handleInputChange('ssn', e.target.value.replace(/\\D/g, ''))} placeholder=\"123-45-6789\" maxLength={11} disabled={loading}\r\n                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.ssn ? 'border-red-300' : 'border-gray-300'}`} />\r\n                  {errors.ssn && <p className=\"mt-1 text-sm text-red-600\">{errors.ssn}</p>}\r\n                </div>\r\n              )}\r\n              {formData.tipoDocumentoPF === 'ITIN' && (\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">ITIN (Opcional)</label>\r\n                  <input type=\"text\" value={formatITIN(formData.itin || '')} onChange={(e) => handleInputChange('itin', e.target.value.replace(/\\D/g, ''))} placeholder=\"9XX-XX-XXXX\" maxLength={11} disabled={loading}\r\n                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.itin ? 'border-red-300' : 'border-gray-300'}`} />\r\n                  {errors.itin && <p className=\"mt-1 text-sm text-red-600\">{errors.itin}</p>}\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"pt-2\">\r\n              <h4 className=\"text-sm font-medium text-foreground dark:text-white mb-3\">Documentos (Opcional)</h4>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">EIN (Opcional)</label>\r\n              <input type=\"text\" value={formatEIN(formData.ein || '')} onChange={(e) => handleInputChange('ein', e.target.value.replace(/\\D/g, ''))} placeholder=\"12-3456789\" maxLength={10} disabled={loading}\r\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.ein ? 'border-red-300' : 'border-gray-300'}`} />\r\n              {errors.ein && <p className=\"mt-1 text-sm text-red-600\">{errors.ein}</p>}\r\n            </div>\r\n          )}\r\n\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">E-mail *</label>\r\n            <input type=\"email\" value={formData.email} onChange={(e) => handleInputChange('email', e.target.value)} placeholder=\"email@exemplo.com\" disabled={loading}\r\n              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.email ? 'border-red-300' : 'border-gray-300'}`} />\r\n            {errors.email && <p className=\"mt-1 text-sm text-red-600\">{errors.email}</p>}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Telefone *</label>\r\n            <input type=\"tel\" value={formatTelefone(formData.telefone)} onChange={(e) => handleInputChange('telefone', e.target.value.replace(/\\D/g, ''))} placeholder=\"(555) 123-4567\" maxLength={15} disabled={loading}\r\n              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.telefone ? 'border-red-300' : 'border-gray-300'}`} />\r\n            {errors.telefone && <p className=\"mt-1 text-sm text-red-600\">{errors.telefone}</p>}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Direita: Endereço */}\r\n        <div className=\"space-y-4\">\r\n          <h3 className=\"text-lg font-medium text-foreground dark:text-white\">Endereço</h3>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Endereço 1</label>\r\n            <input type=\"text\" value={formData.endereco1} onChange={(e) => handleInputChange('endereco1', e.target.value)} placeholder=\"123 Main Street\" disabled={loading}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\" />\r\n            {errors.endereco1 && <p className=\"mt-1 text-sm text-red-600\">{errors.endereco1}</p>}\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Endereço 2</label>\r\n            <input type=\"text\" value={formData.endereco2 || ''} onChange={(e) => handleInputChange('endereco2', e.target.value)} placeholder=\"Apt 101, Suite 200, etc\" disabled={loading}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\" />\r\n          </div>\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Cidade</label>\r\n              <input type=\"text\" value={formData.cidade} onChange={(e) => handleInputChange('cidade', e.target.value)} placeholder=\"New York\" disabled={loading}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\" />\r\n              {errors.cidade && <p className=\"mt-1 text-sm text-red-600\">{errors.cidade}</p>}\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Estado</label>\r\n              <input type=\"text\" value={formData.estado} onChange={(e) => handleInputChange('estado', e.target.value.toUpperCase().slice(0,2))} placeholder=\"NY\" maxLength={2} disabled={loading}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\" />\r\n              {errors.estado && <p className=\"mt-1 text-sm text-red-600\">{errors.estado}</p>}\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">CEP</label>\r\n            <input type=\"text\" value={formatZipCode(formData.zipcode)} onChange={(e) => handleInputChange('zipcode', e.target.value.replace(/\\D/g, ''))} placeholder=\"12345-6789\" maxLength={10} disabled={loading}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\" />\r\n            {errors.zipcode && <p className=\"mt-1 text-sm text-red-600\">{errors.zipcode}</p>}\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Observações</label>\r\n            <textarea value={formData.observacoes || ''} onChange={(e) => handleInputChange('observacoes', e.target.value)} rows={4} placeholder=\"Informações adicionais...\" disabled={loading}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Ações */}\r\n      <div className=\"flex justify-end gap-2 pt-2\">\r\n        <button\r\n          type=\"submit\"\r\n          disabled={loading}\r\n          className=\"inline-flex items-center gap-2 rounded-2xl bg-[#0098DA] px-4 py-2 text-sm text-white hover:brightness-110 disabled:opacity-70\"\r\n        >\r\n          {loading && (\r\n            <span className=\"inline-block h-4 w-4 animate-spin rounded-full border-2 border-white/60 border-t-white\" aria-hidden />\r\n          )}\r\n          <span>{loading ? 'Salvando…' : 'Salvar'}</span>\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={onCancel}\r\n          disabled={loading}\r\n          className=\"rounded-2xl border border-[#0098DA] px-4 py-2 text-sm text-[#0098DA] hover:bg-[#0098DA] hover:text-white\"\r\n        >\r\n          Cancelar\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\ui\\ClienteList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\ui\\Pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\clientes\\ui\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\dashboard\\components\\Alerts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\dashboard\\components\\CitySearchModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\dashboard\\components\\DashboardCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\dashboard\\components\\WeatherBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\dashboard\\hooks\\useDashboardData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\dashboard\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\dashboard\\pages\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\dashboard\\services\\dashboardService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\components\\PropostaDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":95,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":127,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":159,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":159,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProposta'. Either include it or remove the dependency array.","line":172,"column":6,"nodeType":"ArrayExpression","endLine":172,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [loadProposta, propostaId]","fix":{"range":[3878,3890],"text":"[loadProposta, propostaId]"}}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/navigation'\r\nimport { \r\n  Card, \r\n  CardContent, \r\n  CardHeader, \r\n  CardTitle \r\n} from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { \r\n  Table, \r\n  TableBody, \r\n  TableCell, \r\n  TableHead, \r\n  TableHeader, \r\n  TableRow \r\n} from '@/components/ui/table'\r\nimport { \r\n  Tabs,\r\n  TabsContent,\r\n  TabsList,\r\n  TabsTrigger,\r\n} from '@/components/ui/tabs'\r\nimport { \r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from '@/components/ui/alert-dialog'\r\nimport { useToast } from '@/hooks/use-toast'\r\nimport { \r\n  ArrowLeft,\r\n  Edit,\r\n  Send,\r\n  FileText,\r\n  CheckCircle,\r\n  XCircle,\r\n  Clock,\r\n  User,\r\n  Calendar,\r\n  DollarSign,\r\n  Package,\r\n  FileX\r\n} from 'lucide-react'\r\nimport { \r\n  PropostaWithDetails, \r\n  StatusProposta, \r\n  STATUS_COLORS,\r\n  STATUS_LABELS \r\n} from '@/types/propostas'\r\nimport Link from 'next/link'\r\nimport { formatCurrency } from '@/lib/utils'\r\n\r\ninterface PropostaDetailsProps {\r\n  propostaId: string\r\n}\r\n\r\nexport default function PropostaDetails({ propostaId }: PropostaDetailsProps) {\r\n  const [proposta, setProposta] = useState<PropostaWithDetails | null>(null)\r\n  const [loading, setLoading] = useState(true)\r\n  const [actionLoading, setActionLoading] = useState(false)\r\n  const router = useRouter()\r\n  const { toast } = useToast()\r\n\r\n  // Load proposta details\r\n  const loadProposta = async () => {\r\n    try {\r\n      setLoading(true)\r\n      const response = await fetch(`/api/propostas/${propostaId}`)\r\n      \r\n      if (!response.ok) {\r\n        if (response.status === 404) {\r\n          toast({\r\n            title: 'Erro',\r\n            description: 'Proposta não encontrada',\r\n            variant: 'destructive'\r\n          })\r\n          router.push('/propostas')\r\n          return\r\n        }\r\n        throw new Error('Erro ao carregar proposta')\r\n      }\r\n\r\n      const data = await response.json()\r\n      setProposta(data)\r\n      \r\n    } catch (error) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Não foi possível carregar a proposta',\r\n        variant: 'destructive'\r\n      })\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // Send proposta\r\n  const handleSend = async () => {\r\n    if (!proposta) return\r\n    \r\n    try {\r\n      setActionLoading(true)\r\n      const response = await fetch(`/api/propostas/${propostaId}/send`, {\r\n        method: 'POST'\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Erro ao enviar proposta')\r\n      }\r\n\r\n      toast({\r\n        title: 'Sucesso',\r\n        description: 'Proposta enviada com sucesso'\r\n      })\r\n      \r\n      await loadProposta()\r\n      \r\n    } catch (error) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Não foi possível enviar a proposta',\r\n        variant: 'destructive'\r\n      })\r\n    } finally {\r\n      setActionLoading(false)\r\n    }\r\n  }\r\n\r\n  // Cancel proposta\r\n  const handleCancel = async () => {\r\n    if (!proposta) return\r\n    \r\n    try {\r\n      setActionLoading(true)\r\n      const response = await fetch(`/api/propostas/${propostaId}/cancel`, {\r\n        method: 'POST'\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Erro ao cancelar proposta')\r\n      }\r\n\r\n      toast({\r\n        title: 'Sucesso',\r\n        description: 'Proposta cancelada com sucesso'\r\n      })\r\n      \r\n      await loadProposta()\r\n      \r\n    } catch (error) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Não foi possível cancelar a proposta',\r\n        variant: 'destructive'\r\n      })\r\n    } finally {\r\n      setActionLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadProposta()\r\n  }, [propostaId])\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-8 bg-gray-200 rounded w-1/3 mb-4\"></div>\r\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (!proposta) {\r\n    return (\r\n      <div className=\"text-center py-12\">\r\n        <FileX className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n  <h3 className=\"text-lg font-medium text-foreground dark:text-white mb-2\">Proposta não encontrada</h3>\r\n        <p className=\"text-gray-600 mb-4\">A proposta solicitada não existe ou você não tem permissão para visualizá-la.</p>\r\n        <Button asChild>\r\n          <Link href=\"/propostas\">\r\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n            Voltar para Propostas\r\n          </Link>\r\n        </Button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <Button variant=\"ghost\" asChild>\r\n            <Link href=\"/propostas\">\r\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n              Voltar\r\n            </Link>\r\n          </Button>\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold\">{proposta.numero}</h1>\r\n            <p className=\"text-muted-foreground\">{proposta.descricao}</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center space-x-2\">\r\n          <Badge \r\n            variant=\"secondary\" \r\n            className={STATUS_COLORS[proposta.status]}\r\n          >\r\n            {STATUS_LABELS[proposta.status]}\r\n          </Badge>\r\n          \r\n          {proposta.status === StatusProposta.RASCUNHO && (\r\n            <>\r\n              <Button variant=\"outline\" asChild>\r\n                <Link href={`/propostas/${propostaId}/editar`}>\r\n                  <Edit className=\"h-4 w-4 mr-2\" />\r\n                  Editar\r\n                </Link>\r\n              </Button>\r\n              \r\n              <AlertDialog>\r\n                <AlertDialogTrigger asChild>\r\n                  <Button disabled={actionLoading}>\r\n                    <Send className=\"h-4 w-4 mr-2\" />\r\n                    Enviar\r\n                  </Button>\r\n                </AlertDialogTrigger>\r\n                <AlertDialogContent>\r\n                  <AlertDialogHeader>\r\n                    <AlertDialogTitle>Enviar proposta</AlertDialogTitle>\r\n                    <AlertDialogDescription>\r\n                      Tem certeza que deseja enviar a proposta {proposta.numero}? \r\n                      Após o envio, não será mais possível editá-la.\r\n                    </AlertDialogDescription>\r\n                  </AlertDialogHeader>\r\n                  <AlertDialogFooter>\r\n                    <AlertDialogCancel>Cancelar</AlertDialogCancel>\r\n                    <AlertDialogAction onClick={handleSend}>\r\n                      Confirmar Envio\r\n                    </AlertDialogAction>\r\n                  </AlertDialogFooter>\r\n                </AlertDialogContent>\r\n              </AlertDialog>\r\n            </>\r\n          )}\r\n\r\n          <Button variant=\"outline\">\r\n            <FileText className=\"h-4 w-4 mr-2\" />\r\n            Gerar PDF\r\n          </Button>\r\n          \r\n          {['RASCUNHO', 'ENVIADA'].includes(proposta.status) && (\r\n            <AlertDialog>\r\n              <AlertDialogTrigger asChild>\r\n                <Button variant=\"destructive\" disabled={actionLoading}>\r\n                  <XCircle className=\"h-4 w-4 mr-2\" />\r\n                  Cancelar\r\n                </Button>\r\n              </AlertDialogTrigger>\r\n              <AlertDialogContent>\r\n                <AlertDialogHeader>\r\n                  <AlertDialogTitle>Cancelar proposta</AlertDialogTitle>\r\n                  <AlertDialogDescription>\r\n                    Tem certeza que deseja cancelar a proposta {proposta.numero}? \r\n                    Esta ação não pode ser desfeita.\r\n                  </AlertDialogDescription>\r\n                </AlertDialogHeader>\r\n                <AlertDialogFooter>\r\n                  <AlertDialogCancel>Voltar</AlertDialogCancel>\r\n                  <AlertDialogAction \r\n                    onClick={handleCancel}\r\n                    className=\"bg-red-600 hover:bg-red-700\"\r\n                  >\r\n                    Confirmar Cancelamento\r\n                  </AlertDialogAction>\r\n                </AlertDialogFooter>\r\n              </AlertDialogContent>\r\n            </AlertDialog>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\r\n        <TabsList>\r\n          <TabsTrigger value=\"overview\">Visão Geral</TabsTrigger>\r\n          <TabsTrigger value=\"etapas\">Etapas</TabsTrigger>\r\n          <TabsTrigger value=\"materiais\">Materiais</TabsTrigger>\r\n          <TabsTrigger value=\"anexos\">Anexos</TabsTrigger>\r\n          <TabsTrigger value=\"historico\">Histórico</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"overview\">\r\n          <div className=\"grid gap-6 md:grid-cols-2\">\r\n            {/* Client Info */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center\">\r\n                  <User className=\"h-5 w-5 mr-2\" />\r\n                  Informações do Cliente\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-3\">\r\n                <div>\r\n                  <span className=\"text-sm font-medium text-muted-foreground\">Nome:</span>\r\n                  <p className=\"text-sm\">{proposta.cliente.nome}</p>\r\n                </div>\r\n                <div>\r\n                  <span className=\"text-sm font-medium text-muted-foreground\">Email:</span>\r\n                  <p className=\"text-sm\">{proposta.cliente.email}</p>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Financial Info */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center\">\r\n                  <DollarSign className=\"h-5 w-5 mr-2\" />\r\n                  Informações Financeiras\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-3\">\r\n                <div>\r\n                  <span className=\"text-sm font-medium text-muted-foreground\">Valor Estimado:</span>\r\n                  <p className=\"text-lg font-bold\">{formatCurrency(proposta.valorEstimado)}</p>\r\n                </div>\r\n                <div>\r\n                  <span className=\"text-sm font-medium text-muted-foreground\">Valor Total:</span>\r\n                  <p className=\"text-lg font-bold text-green-600\">{formatCurrency(proposta.valorTotal)}</p>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Timeline */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center\">\r\n                  <Calendar className=\"h-5 w-5 mr-2\" />\r\n                  Cronograma\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-3\">\r\n                <div>\r\n                  <span className=\"text-sm font-medium text-muted-foreground\">Criada em:</span>\r\n                  <p className=\"text-sm\">{new Date(proposta.createdAt).toLocaleDateString('pt-BR')}</p>\r\n                </div>\r\n                {proposta.assinaturaData && (\r\n                  <div>\r\n                    <span className=\"text-sm font-medium text-muted-foreground\">Assinada em:</span>\r\n                    <p className=\"text-sm\">{new Date(proposta.assinaturaData).toLocaleDateString('pt-BR')}</p>\r\n                  </div>\r\n                )}\r\n                <div>\r\n                  <span className=\"text-sm font-medium text-muted-foreground\">Última atualização:</span>\r\n                  <p className=\"text-sm\">{new Date(proposta.updatedAt).toLocaleDateString('pt-BR')}</p>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Details */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Detalhes</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  {proposta.detalhes && (\r\n                    <div>\r\n                      <span className=\"text-sm font-medium text-muted-foreground\">Descrição detalhada:</span>\r\n                      <p className=\"text-sm mt-1 whitespace-pre-wrap\">{proposta.detalhes}</p>\r\n                    </div>\r\n                  )}\r\n                  <div>\r\n                    <span className=\"text-sm font-medium text-muted-foreground\">Permite:</span>\r\n                    <p className=\"text-sm\">{proposta.permite === 'SIM' ? 'Sim' : 'Não'}</p>\r\n                  </div>\r\n                  {proposta.quaisPermites && (\r\n                    <div>\r\n                      <span className=\"text-sm font-medium text-muted-foreground\">Quais permites:</span>\r\n                      <p className=\"text-sm mt-1\">{proposta.quaisPermites}</p>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"etapas\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Etapas da Proposta</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {proposta.etapas && proposta.etapas.length > 0 ? (\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Ordem</TableHead>\r\n                      <TableHead>Título</TableHead>\r\n                      <TableHead>Descrição</TableHead>\r\n                      <TableHead>Status</TableHead>\r\n                      <TableHead className=\"text-right\">Valor</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {proposta.etapas.map((etapa) => (\r\n                      <TableRow key={etapa.id}>\r\n                        <TableCell>{etapa.ordem}</TableCell>\r\n                        <TableCell className=\"font-medium\">{etapa.titulo}</TableCell>\r\n                        <TableCell>{etapa.descricao}</TableCell>\r\n                        <TableCell>\r\n                          <Badge variant=\"outline\">{etapa.status}</Badge>\r\n                        </TableCell>\r\n                        <TableCell className=\"text-right\">\r\n                          {formatCurrency(etapa.valorEstimado)}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              ) : (\r\n                <p className=\"text-center py-8 text-muted-foreground\">\r\n                  Nenhuma etapa cadastrada\r\n                </p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"materiais\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center\">\r\n                <Package className=\"h-5 w-5 mr-2\" />\r\n                Materiais\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {proposta.materiais && proposta.materiais.length > 0 ? (\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Nome</TableHead>\r\n                      <TableHead>Descrição</TableHead>\r\n                      <TableHead>Quantidade</TableHead>\r\n                      <TableHead>Unidade</TableHead>\r\n                      <TableHead>Valor Unitário</TableHead>\r\n                      <TableHead>Status</TableHead>\r\n                      <TableHead className=\"text-right\">Total</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {proposta.materiais.map((material) => (\r\n                      <TableRow key={material.id}>\r\n                        <TableCell className=\"font-medium\">{material.nome}</TableCell>\r\n                        <TableCell>{material.descricao}</TableCell>\r\n                        <TableCell>{material.quantidade}</TableCell>\r\n                        <TableCell>{material.unidade}</TableCell>\r\n                        <TableCell>{formatCurrency(material.valorUnitario)}</TableCell>\r\n                        <TableCell>\r\n                          <Badge variant=\"outline\">{material.status}</Badge>\r\n                        </TableCell>\r\n                        <TableCell className=\"text-right\">\r\n                          {formatCurrency(material.valorTotal)}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              ) : (\r\n                <p className=\"text-center py-8 text-muted-foreground\">\r\n                  Nenhum material cadastrado\r\n                </p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"anexos\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Anexos</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {proposta.anexos && proposta.anexos.length > 0 ? (\r\n                <div className=\"space-y-3\">\r\n                  {proposta.anexos.map((anexo) => (\r\n                    <div key={anexo.id} className=\"flex items-center justify-between p-3 border rounded\">\r\n                      <div>\r\n                        <p className=\"font-medium\">{anexo.nomeOriginal}</p>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          {(anexo.tamanhoBytes / 1024 / 1024).toFixed(2)} MB • {anexo.mimeType}\r\n                        </p>\r\n                      </div>\r\n                      <Button variant=\"outline\" size=\"sm\">\r\n                        Download\r\n                      </Button>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <p className=\"text-center py-8 text-muted-foreground\">\r\n                  Nenhum anexo encontrado\r\n                </p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"historico\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center\">\r\n                <Clock className=\"h-5 w-5 mr-2\" />\r\n                Histórico de Alterações\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {proposta.logs && proposta.logs.length > 0 ? (\r\n                <div className=\"space-y-4\">\r\n                  {proposta.logs.map((log) => (\r\n                    <div key={log.id} className=\"flex items-start space-x-3 pb-3 border-b last:border-0\">\r\n                      <div className=\"flex-shrink-0 w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\r\n                        <Clock className=\"h-4 w-4 text-blue-600\" />\r\n                      </div>\r\n                      <div className=\"flex-1\">\r\n                        <p className=\"text-sm\">\r\n                          <span className=\"font-medium\">{log.usuario?.nome}</span> • {log.acao}\r\n                        </p>\r\n                        {log.detalhes && (\r\n                          <p className=\"text-sm text-muted-foreground mt-1\">{log.detalhes}</p>\r\n                        )}\r\n                        <p className=\"text-xs text-muted-foreground mt-1\">\r\n                          {new Date(log.createdAt).toLocaleString('pt-BR')}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <p className=\"text-center py-8 text-muted-foreground\">\r\n                  Nenhum registro de histórico encontrado\r\n                </p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\components\\PropostaForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1771,1774],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1771,1774],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2229,2232],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2229,2232],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4696,4699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4696,4699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":231,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5497,5500],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5497,5500],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":373,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10845,10946],"text":"\r\n                Nenhuma etapa adicionada. Clique em &quot;Adicionar Etapa\" para começar.\r\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10845,10946],"text":"\r\n                Nenhuma etapa adicionada. Clique em &ldquo;Adicionar Etapa\" para começar.\r\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10845,10946],"text":"\r\n                Nenhuma etapa adicionada. Clique em &#34;Adicionar Etapa\" para começar.\r\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10845,10946],"text":"\r\n                Nenhuma etapa adicionada. Clique em &rdquo;Adicionar Etapa\" para começar.\r\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":373,"column":69,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10845,10946],"text":"\r\n                Nenhuma etapa adicionada. Clique em \"Adicionar Etapa&quot; para começar.\r\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10845,10946],"text":"\r\n                Nenhuma etapa adicionada. Clique em \"Adicionar Etapa&ldquo; para começar.\r\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10845,10946],"text":"\r\n                Nenhuma etapa adicionada. Clique em \"Adicionar Etapa&#34; para começar.\r\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10845,10946],"text":"\r\n                Nenhuma etapa adicionada. Clique em \"Adicionar Etapa&rdquo; para começar.\r\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":444,"column":55,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13934,14040],"text":"\r\n                Nenhum material adicionado. Clique em &quot;Adicionar Material\" para começar.\r\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13934,14040],"text":"\r\n                Nenhum material adicionado. Clique em &ldquo;Adicionar Material\" para começar.\r\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13934,14040],"text":"\r\n                Nenhum material adicionado. Clique em &#34;Adicionar Material\" para começar.\r\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13934,14040],"text":"\r\n                Nenhum material adicionado. Clique em &rdquo;Adicionar Material\" para começar.\r\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":444,"column":74,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13934,14040],"text":"\r\n                Nenhum material adicionado. Clique em \"Adicionar Material&quot; para começar.\r\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13934,14040],"text":"\r\n                Nenhum material adicionado. Clique em \"Adicionar Material&ldquo; para começar.\r\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13934,14040],"text":"\r\n                Nenhum material adicionado. Clique em \"Adicionar Material&#34; para começar.\r\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13934,14040],"text":"\r\n                Nenhum material adicionado. Clique em \"Adicionar Material&rdquo; para começar.\r\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/navigation'\r\nimport { \r\n  Card, \r\n  CardContent, \r\n  CardHeader, \r\n  CardTitle \r\n} from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Input } from '@/components/ui/input'\r\nimport { \r\n  Select, \r\n  SelectContent, \r\n  SelectItem, \r\n  SelectTrigger, \r\n  SelectValue \r\n} from '@/components/ui/select'\r\nimport { Textarea } from '@/components/ui/textarea'\r\nimport { useToast } from '@/components/ui/Toaster'\r\nimport { \r\n  ArrowLeft,\r\n  Plus,\r\n  Trash2,\r\n  Save\r\n} from 'lucide-react'\r\nimport { \r\n  StatusPermite\r\n} from '@/types/propostas'\r\nimport Link from 'next/link'\r\n\r\ninterface Cliente {\r\n  id: string\r\n  nome: string\r\n  email: string\r\n}\r\n\r\ninterface EtapaForm {\r\n  titulo: string\r\n  descricao: string\r\n  valorEstimado: number\r\n  ordem: number\r\n}\r\n\r\ninterface MaterialForm {\r\n  nome: string\r\n  descricao: string\r\n  quantidade: number\r\n  unidade: string\r\n  valorUnitario: number\r\n  fornecedor: string\r\n  observacoes: string\r\n}\r\n\r\ninterface PropostaFormData {\r\n  clienteId: string\r\n  descricao: string\r\n  detalhes: string\r\n  valorEstimado: number\r\n  permite: StatusPermite\r\n  quaisPermites: string\r\n  etapas: EtapaForm[]\r\n  materiais: MaterialForm[]\r\n}\r\n\r\nexport default function PropostaForm() {\r\n  const [loading, setLoading] = useState(false)\r\n  const [clientes, setClientes] = useState<Cliente[]>([])\r\n  const [formData, setFormData] = useState<PropostaFormData>({\r\n    clienteId: '',\r\n    descricao: '',\r\n    detalhes: '',\r\n    valorEstimado: 0,\r\n    permite: StatusPermite.NAO,\r\n    quaisPermites: '',\r\n    etapas: [],\r\n    materiais: []\r\n  })\r\n  const router = useRouter()\r\n  const { showToast } = useToast()\r\n\r\n  const toast = (options: any) => {\r\n    showToast({\r\n      title: options.title || '',\r\n      message: options.description || '',\r\n      type: options.variant === 'destructive' ? 'error' : 'success'\r\n    })\r\n  }\r\n\r\n  // Load clientes\r\n  const loadClientes = async () => {\r\n    try {\r\n      const response = await fetch('/api/clientes?limit=1000')\r\n      if (response.ok) {\r\n        const data = await response.json()\r\n        const clientesList = (data.clientes || []).map((cliente: any) => ({\r\n          id: cliente.id,\r\n          nome: cliente.nomeCompleto || cliente.razaoSocial || cliente.nomeFantasia || 'Cliente',\r\n          email: cliente.email\r\n        }))\r\n        setClientes(clientesList)\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading clientes:', error)\r\n    }\r\n  }\r\n\r\n  // Submit form\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    \r\n    if (!formData.clienteId) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Cliente é obrigatório',\r\n        variant: 'destructive'\r\n      })\r\n      return\r\n    }\r\n    \r\n    if (!formData.descricao) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Descrição é obrigatória',\r\n        variant: 'destructive'\r\n      })\r\n      return\r\n    }\r\n    \r\n    if (formData.permite === StatusPermite.SIM && !formData.quaisPermites.trim()) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Campo \"Quais permites\" é obrigatório quando permite = SIM',\r\n        variant: 'destructive'\r\n      })\r\n      return\r\n    }\r\n\r\n    try {\r\n      setLoading(true)\r\n      const response = await fetch('/api/propostas', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(formData)\r\n      })\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json()\r\n        throw new Error(error.error || 'Erro ao criar proposta')\r\n      }\r\n\r\n      const proposta = await response.json()\r\n      \r\n      toast({\r\n        title: 'Sucesso',\r\n        description: `Proposta ${proposta.numero || 'criada'} com sucesso`\r\n      })\r\n\r\n      router.push(`/propostas/${proposta.id}`)\r\n\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: error instanceof Error ? error.message : 'Erro desconhecido',\r\n        variant: 'destructive'\r\n      })\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // Add etapa\r\n  const addEtapa = () => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      etapas: [...prev.etapas, {\r\n        titulo: '',\r\n        descricao: '',\r\n        valorEstimado: 0,\r\n        ordem: prev.etapas.length\r\n      }]\r\n    }))\r\n  }\r\n\r\n  // Remove etapa\r\n  const removeEtapa = (index: number) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      etapas: prev.etapas.filter((_, i) => i !== index)\r\n    }))\r\n  }\r\n\r\n  // Update etapa\r\n  const updateEtapa = (index: number, field: keyof EtapaForm, value: any) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      etapas: prev.etapas.map((etapa, i) => \r\n        i === index ? { ...etapa, [field]: value } : etapa\r\n      )\r\n    }))\r\n  }\r\n\r\n  // Add material\r\n  const addMaterial = () => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      materiais: [...prev.materiais, {\r\n        nome: '',\r\n        descricao: '',\r\n        quantidade: 1,\r\n        unidade: '',\r\n        valorUnitario: 0,\r\n        fornecedor: '',\r\n        observacoes: ''\r\n      }]\r\n    }))\r\n  }\r\n\r\n  // Remove material\r\n  const removeMaterial = (index: number) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      materiais: prev.materiais.filter((_, i) => i !== index)\r\n    }))\r\n  }\r\n\r\n  // Update material\r\n  const updateMaterial = (index: number, field: keyof MaterialForm, value: any) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      materiais: prev.materiais.map((material, i) => \r\n        i === index ? { ...material, [field]: value } : material\r\n      )\r\n    }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadClientes()\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <Button variant=\"ghost\" asChild>\r\n            <Link href=\"/propostas\">\r\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n              Voltar\r\n            </Link>\r\n          </Button>\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold\">Nova Proposta</h1>\r\n            <p className=\"text-muted-foreground\">Criar nova proposta comercial</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Form */}\r\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n        {/* Basic Info */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Informações Básicas</CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"grid gap-4 md:grid-cols-2\">\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Cliente *</label>\r\n                <Select \r\n                  value={formData.clienteId} \r\n                  onValueChange={(value) => setFormData(prev => ({ ...prev, clienteId: value }))}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Selecione um cliente\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {clientes.map((cliente) => (\r\n                      <SelectItem key={cliente.id} value={cliente.id}>\r\n                        {cliente.nome}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Valor Estimado (USD)</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  step=\"0.01\"\r\n                  min=\"0\"\r\n                  placeholder=\"0.00\"\r\n                  value={formData.valorEstimado}\r\n                  onChange={(e) => setFormData(prev => ({ \r\n                    ...prev, \r\n                    valorEstimado: parseFloat(e.target.value) || 0 \r\n                  }))}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Descrição *</label>\r\n              <Input \r\n                placeholder=\"Descrição da proposta\" \r\n                value={formData.descricao}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, descricao: e.target.value }))}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Detalhes</label>\r\n              <Textarea \r\n                placeholder=\"Detalhes adicionais sobre a proposta\"\r\n                rows={3}\r\n                value={formData.detalhes}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, detalhes: e.target.value }))}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"grid gap-4 md:grid-cols-2\">\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Requer Permites?</label>\r\n                <Select \r\n                  value={formData.permite} \r\n                  onValueChange={(value) => setFormData(prev => ({ \r\n                    ...prev, \r\n                    permite: value as StatusPermite \r\n                  }))}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Selecione\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value={StatusPermite.NAO}>Não</SelectItem>\r\n                    <SelectItem value={StatusPermite.SIM}>Sim</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              {formData.permite === StatusPermite.SIM && (\r\n                <div className=\"space-y-2\">\r\n                  <label className=\"text-sm font-medium\">Quais Permites? *</label>\r\n                  <Input \r\n                    placeholder=\"Descreva os permites necessários\"\r\n                    value={formData.quaisPermites}\r\n                    onChange={(e) => setFormData(prev => ({ ...prev, quaisPermites: e.target.value }))}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Etapas */}\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"flex items-center justify-between\">\r\n              <CardTitle>Etapas do Trabalho</CardTitle>\r\n              <Button type=\"button\" variant=\"outline\" onClick={addEtapa}>\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Adicionar Etapa\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {formData.etapas.length === 0 ? (\r\n              <p className=\"text-center py-8 text-muted-foreground\">\r\n                Nenhuma etapa adicionada. Clique em \"Adicionar Etapa\" para começar.\r\n              </p>\r\n            ) : (\r\n              formData.etapas.map((etapa, index) => (\r\n                <Card key={index} className=\"border-l-4 border-l-blue-500\">\r\n                  <CardContent className=\"pt-6\">\r\n                    <div className=\"flex items-center justify-between mb-4\">\r\n                      <h4 className=\"font-medium\">Etapa {index + 1}</h4>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => removeEtapa(index)}\r\n                      >\r\n                        <Trash2 className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    </div>\r\n                    \r\n                    <div className=\"grid gap-4 md:grid-cols-2\">\r\n                      <div className=\"space-y-2\">\r\n                        <label className=\"text-sm font-medium\">Título *</label>\r\n                        <Input \r\n                          placeholder=\"Nome da etapa\"\r\n                          value={etapa.titulo}\r\n                          onChange={(e) => updateEtapa(index, 'titulo', e.target.value)}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"space-y-2\">\r\n                        <label className=\"text-sm font-medium\">Valor Estimado (USD)</label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          step=\"0.01\"\r\n                          min=\"0\"\r\n                          placeholder=\"0.00\"\r\n                          value={etapa.valorEstimado}\r\n                          onChange={(e) => updateEtapa(index, 'valorEstimado', parseFloat(e.target.value) || 0)}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"space-y-2 mt-4\">\r\n                      <label className=\"text-sm font-medium\">Descrição</label>\r\n                      <Textarea \r\n                        placeholder=\"Descrição detalhada da etapa\"\r\n                        rows={2}\r\n                        value={etapa.descricao}\r\n                        onChange={(e) => updateEtapa(index, 'descricao', e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Materiais */}\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"flex items-center justify-between\">\r\n              <CardTitle>Materiais</CardTitle>\r\n              <Button type=\"button\" variant=\"outline\" onClick={addMaterial}>\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Adicionar Material\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {formData.materiais.length === 0 ? (\r\n              <p className=\"text-center py-8 text-muted-foreground\">\r\n                Nenhum material adicionado. Clique em \"Adicionar Material\" para começar.\r\n              </p>\r\n            ) : (\r\n              formData.materiais.map((material, index) => (\r\n                <Card key={index} className=\"border-l-4 border-l-green-500\">\r\n                  <CardContent className=\"pt-6\">\r\n                    <div className=\"flex items-center justify-between mb-4\">\r\n                      <h4 className=\"font-medium\">Material {index + 1}</h4>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => removeMaterial(index)}\r\n                      >\r\n                        <Trash2 className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    </div>\r\n                    \r\n                    <div className=\"grid gap-4 md:grid-cols-3\">\r\n                      <div className=\"space-y-2\">\r\n                        <label className=\"text-sm font-medium\">Nome *</label>\r\n                        <Input \r\n                          placeholder=\"Nome do material\"\r\n                          value={material.nome}\r\n                          onChange={(e) => updateMaterial(index, 'nome', e.target.value)}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"space-y-2\">\r\n                        <label className=\"text-sm font-medium\">Quantidade *</label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          step=\"0.01\"\r\n                          min=\"0\"\r\n                          placeholder=\"1\"\r\n                          value={material.quantidade}\r\n                          onChange={(e) => updateMaterial(index, 'quantidade', parseFloat(e.target.value) || 0)}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"space-y-2\">\r\n                        <label className=\"text-sm font-medium\">Unidade *</label>\r\n                        <Input \r\n                          placeholder=\"ex: un, m², kg\"\r\n                          value={material.unidade}\r\n                          onChange={(e) => updateMaterial(index, 'unidade', e.target.value)}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"space-y-2\">\r\n                        <label className=\"text-sm font-medium\">Valor Unitário (USD)</label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          step=\"0.01\"\r\n                          min=\"0\"\r\n                          placeholder=\"0.00\"\r\n                          value={material.valorUnitario}\r\n                          onChange={(e) => updateMaterial(index, 'valorUnitario', parseFloat(e.target.value) || 0)}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"space-y-2\">\r\n                        <label className=\"text-sm font-medium\">Fornecedor</label>\r\n                        <Input \r\n                          placeholder=\"Nome do fornecedor\"\r\n                          value={material.fornecedor}\r\n                          onChange={(e) => updateMaterial(index, 'fornecedor', e.target.value)}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"space-y-2 mt-4\">\r\n                      <label className=\"text-sm font-medium\">Descrição</label>\r\n                      <Textarea \r\n                        placeholder=\"Descrição detalhada do material\"\r\n                        rows={2}\r\n                        value={material.descricao}\r\n                        onChange={(e) => updateMaterial(index, 'descricao', e.target.value)}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"space-y-2 mt-4\">\r\n                      <label className=\"text-sm font-medium\">Observações</label>\r\n                      <Textarea \r\n                        placeholder=\"Observações adicionais\"\r\n                        rows={2}\r\n                        value={material.observacoes}\r\n                        onChange={(e) => updateMaterial(index, 'observacoes', e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Actions */}\r\n        <div className=\"flex justify-end space-x-4\">\r\n          <Button type=\"button\" variant=\"outline\" asChild>\r\n            <Link href=\"/propostas\">Cancelar</Link>\r\n          </Button>\r\n          \r\n          <Button type=\"submit\" disabled={loading}>\r\n            <Save className=\"h-4 w-4 mr-2\" />\r\n            {loading ? 'Salvando...' : 'Salvar Proposta'}\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\components\\PropostaFormClean.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3947,3950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3947,3950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'result' is assigned a value but never used.","line":321,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":321,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":370,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":370,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9153,9156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9153,9156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":404,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":404,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9954,9957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9954,9957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":921,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[30464,30565],"text":"\r\n                Nenhuma etapa adicionada. Clique em &quot;Adicionar Etapa\" para começar.\r\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[30464,30565],"text":"\r\n                Nenhuma etapa adicionada. Clique em &ldquo;Adicionar Etapa\" para começar.\r\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[30464,30565],"text":"\r\n                Nenhuma etapa adicionada. Clique em &#34;Adicionar Etapa\" para começar.\r\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[30464,30565],"text":"\r\n                Nenhuma etapa adicionada. Clique em &rdquo;Adicionar Etapa\" para começar.\r\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":921,"column":69,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[30464,30565],"text":"\r\n                Nenhuma etapa adicionada. Clique em \"Adicionar Etapa&quot; para começar.\r\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[30464,30565],"text":"\r\n                Nenhuma etapa adicionada. Clique em \"Adicionar Etapa&ldquo; para começar.\r\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[30464,30565],"text":"\r\n                Nenhuma etapa adicionada. Clique em \"Adicionar Etapa&#34; para começar.\r\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[30464,30565],"text":"\r\n                Nenhuma etapa adicionada. Clique em \"Adicionar Etapa&rdquo; para começar.\r\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":992,"column":55,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[33553,33659],"text":"\r\n                Nenhum material adicionado. Clique em &quot;Adicionar Material\" para começar.\r\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[33553,33659],"text":"\r\n                Nenhum material adicionado. Clique em &ldquo;Adicionar Material\" para começar.\r\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[33553,33659],"text":"\r\n                Nenhum material adicionado. Clique em &#34;Adicionar Material\" para começar.\r\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[33553,33659],"text":"\r\n                Nenhum material adicionado. Clique em &rdquo;Adicionar Material\" para começar.\r\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":992,"column":74,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[33553,33659],"text":"\r\n                Nenhum material adicionado. Clique em \"Adicionar Material&quot; para começar.\r\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[33553,33659],"text":"\r\n                Nenhum material adicionado. Clique em \"Adicionar Material&ldquo; para começar.\r\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[33553,33659],"text":"\r\n                Nenhum material adicionado. Clique em \"Adicionar Material&#34; para começar.\r\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[33553,33659],"text":"\r\n                Nenhum material adicionado. Clique em \"Adicionar Material&rdquo; para começar.\r\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/navigation'\r\nimport { \r\n  Card, \r\n  CardContent, \r\n  CardHeader, \r\n  CardTitle \r\n} from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Input } from '@/components/ui/input'\r\nimport { \r\n  Select, \r\n  SelectContent, \r\n  SelectItem, \r\n  SelectTrigger, \r\n  SelectValue \r\n} from '@/components/ui/select'\r\nimport { Textarea } from '@/components/ui/textarea'\r\nimport { useToast } from '@/hooks/use-toast'\r\nimport { \r\n  ArrowLeft,\r\n  Plus,\r\n  Trash2,\r\n  Save\r\n} from 'lucide-react'\r\nimport { \r\n  StatusPermite\r\n} from '@/types/propostas'\r\nimport Link from 'next/link'\r\nimport { ProposalSignaturePad } from '@/components/ui/ProposalSignaturePad'\r\n\r\ninterface Cliente {\r\n  id: string\r\n  nome: string\r\n  email: string\r\n}\r\n\r\ninterface EtapaForm {\r\n  titulo: string\r\n  descricao: string\r\n  valorEstimado: number\r\n  ordem: number\r\n}\r\n\r\ninterface MaterialForm {\r\n  nome: string\r\n  descricao: string\r\n  quantidade: number\r\n  unidade: string\r\n  valorUnitario: number\r\n  fornecedor: string\r\n  observacoes: string\r\n}\r\n\r\ninterface PropostaFormData {\r\n  clienteId: string\r\n  \r\n  // Informações de contato e execução\r\n  contatoNome: string\r\n  contatoEmail: string\r\n  contatoTelefone: string\r\n  localExecucaoEndereco: string\r\n  \r\n  // Título e escopo\r\n  titulo: string\r\n  descricaoEscopo: string\r\n  tipoServico: string\r\n  \r\n  // Prazos e validade\r\n  tempoParaAceite: number\r\n  validadeProposta: string\r\n  prazoExecucaoEstimadoDias: number\r\n  janelaExecucaoPreferencial: string\r\n  restricoesDeAcesso: string\r\n  \r\n  // Permissões\r\n  permite: StatusPermite\r\n  quaisPermites: string\r\n  normasReferencias: string\r\n  inspecoesNecessarias: string\r\n  \r\n  // Condições comerciais\r\n  garantia: string\r\n  exclusoes: string\r\n  condicoesGerais: string\r\n  descontosOfertados: number\r\n  \r\n  // Valores\r\n  valorEstimado: number\r\n  precoPropostaCliente: number\r\n  \r\n  // Faturamento\r\n  gatilhoFaturamento: string\r\n  percentualSinal: number\r\n  instrucoesPagamento: string\r\n  \r\n  // Observações\r\n  observacoesParaCliente: string\r\n  riscosIdentificados: string\r\n  \r\n  etapas: EtapaForm[]\r\n  materiais: MaterialForm[]\r\n}\r\n\r\nexport default function PropostaForm() {\r\n  const [loading, setLoading] = useState(false)\r\n  const [showSignature, setShowSignature] = useState(false)\r\n  const [savedPropostaId, setSavedPropostaId] = useState<string | null>(null)\r\n  const [clientes, setClientes] = useState<Cliente[]>([])\r\n  const router = useRouter()\r\n  const { toast } = useToast()\r\n  const [formData, setFormData] = useState<PropostaFormData>({\r\n    clienteId: '',\r\n    \r\n    // Informações de contato e execução\r\n    contatoNome: '',\r\n    contatoEmail: '',\r\n    contatoTelefone: '',\r\n    localExecucaoEndereco: '',\r\n    \r\n    // Título e escopo\r\n    titulo: '',\r\n    descricaoEscopo: '',\r\n    tipoServico: '',\r\n    \r\n    // Prazos e validade\r\n    tempoParaAceite: 7,\r\n    validadeProposta: '',\r\n    prazoExecucaoEstimadoDias: 0,\r\n    janelaExecucaoPreferencial: '',\r\n    restricoesDeAcesso: '',\r\n    \r\n    // Permissões\r\n    permite: StatusPermite.NAO,\r\n    quaisPermites: '',\r\n    normasReferencias: '',\r\n    inspecoesNecessarias: '',\r\n    \r\n    // Condições comerciais\r\n    garantia: '',\r\n    exclusoes: '',\r\n    condicoesGerais: '',\r\n    descontosOfertados: 0,\r\n    \r\n    // Valores\r\n    valorEstimado: 0,\r\n    precoPropostaCliente: 0,\r\n    \r\n    // Faturamento\r\n    gatilhoFaturamento: 'NA_APROVACAO',\r\n    percentualSinal: 0,\r\n    instrucoesPagamento: '',\r\n    \r\n    // Observações\r\n    observacoesParaCliente: '',\r\n    riscosIdentificados: '',\r\n    \r\n    etapas: [],\r\n    materiais: []\r\n  })\r\n\r\n  // Load clientes\r\n  const loadClientes = async () => {\r\n    try {\r\n      const response = await fetch('/api/clientes?limit=1000')\r\n      if (response.ok) {\r\n        const data = await response.json()\r\n        const clientesList = (data.clientes || []).map((cliente: any) => ({\r\n          id: cliente.id,\r\n          nome: cliente.nomeCompleto || cliente.razaoSocial || cliente.nomeFantasia || 'Cliente',\r\n          email: cliente.email\r\n        }))\r\n        setClientes(clientesList)\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading clientes:', error)\r\n    }\r\n  }\r\n\r\n  // Submit form\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    \r\n    if (!formData.clienteId) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Cliente é obrigatório',\r\n        variant: 'destructive'\r\n      })\r\n      return\r\n    }\r\n    \r\n    if (!formData.titulo) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Título é obrigatório',\r\n        variant: 'destructive'\r\n      })\r\n      return\r\n    }\r\n    \r\n    if (!formData.descricaoEscopo) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Descrição do escopo é obrigatória',\r\n        variant: 'destructive'\r\n      })\r\n      return\r\n    }\r\n\r\n    if (!formData.contatoNome) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Nome do contato é obrigatório',\r\n        variant: 'destructive'\r\n      })\r\n      return\r\n    }\r\n\r\n    if (!formData.contatoEmail) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Email do contato é obrigatório',\r\n        variant: 'destructive'\r\n      })\r\n      return\r\n    }\r\n\r\n    if (!formData.localExecucaoEndereco) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Endereço de execução é obrigatório',\r\n        variant: 'destructive'\r\n      })\r\n      return\r\n    }\r\n    \r\n    if (formData.permite === StatusPermite.SIM && !formData.quaisPermites.trim()) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Campo \"Quais permites\" é obrigatório quando permite = SIM',\r\n        variant: 'destructive'\r\n      })\r\n      return\r\n    }\r\n\r\n    try {\r\n      setLoading(true)\r\n      const response = await fetch('/api/propostas', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(formData)\r\n      })\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json()\r\n        throw new Error(error.error || 'Erro ao criar proposta')\r\n      }\r\n\r\n      const proposta = await response.json()\r\n      \r\n      // Salvar ID da proposta e mostrar tela de assinatura\r\n      setSavedPropostaId(proposta.id)\r\n      setShowSignature(true)\r\n      \r\n      toast({\r\n        title: 'Proposta Criada',\r\n        description: `Proposta ${proposta.numeroProposta || 'criada'} - Proceda com a assinatura digital`\r\n      })\r\n\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: error instanceof Error ? error.message : 'Erro desconhecido',\r\n        variant: 'destructive'\r\n      })\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // Handle signature completion\r\n  const handleSignatureComplete = async (signatureData: {\r\n    type: 'canvas' | 'name'\r\n    signatureName: string\r\n    signatureImage?: string\r\n    consent: boolean\r\n    terms: boolean\r\n    observations?: string\r\n  }) => {\r\n    if (!savedPropostaId) return\r\n    \r\n    try {\r\n      setLoading(true)\r\n      \r\n      // Call signature API\r\n      const response = await fetch(`/api/propostas/${savedPropostaId}/assinatura`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          assinaturaTipo: signatureData.type === 'canvas' ? 'DIGITAL_DESENHADA' : 'DIGITAL_NOME',\r\n          assinaturaNome: signatureData.signatureName,\r\n          assinaturaImagem: signatureData.signatureImage,\r\n          observacoes: signatureData.observations,\r\n          consentimento: signatureData.consent,\r\n          termosAceitos: signatureData.terms\r\n        })\r\n      })\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json()\r\n        throw new Error(error.error || 'Erro ao processar assinatura')\r\n      }\r\n\r\n      const result = await response.json()\r\n      \r\n      toast({\r\n        title: 'Assinatura Confirmada',\r\n        description: 'Proposta assinada digitalmente com sucesso!'\r\n      })\r\n\r\n      // Redirect to proposta view\r\n      router.push(`/propostas/${savedPropostaId}`)\r\n\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Erro na Assinatura',\r\n        description: error instanceof Error ? error.message : 'Erro desconhecido',\r\n        variant: 'destructive'\r\n      })\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // Cancel signature and go back to form\r\n  const handleSignatureCancel = () => {\r\n    setShowSignature(false)\r\n    setSavedPropostaId(null)\r\n  }\r\n\r\n  // Add etapa\r\n  const addEtapa = () => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      etapas: [...prev.etapas, {\r\n        titulo: '',\r\n        descricao: '',\r\n        valorEstimado: 0,\r\n        ordem: prev.etapas.length\r\n      }]\r\n    }))\r\n  }\r\n\r\n  // Remove etapa\r\n  const removeEtapa = (index: number) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      etapas: prev.etapas.filter((_, i) => i !== index)\r\n    }))\r\n  }\r\n\r\n  // Update etapa\r\n  const updateEtapa = (index: number, field: keyof EtapaForm, value: any) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      etapas: prev.etapas.map((etapa, i) => \r\n        i === index ? { ...etapa, [field]: value } : etapa\r\n      )\r\n    }))\r\n  }\r\n\r\n  // Add material\r\n  const addMaterial = () => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      materiais: [...prev.materiais, {\r\n        nome: '',\r\n        descricao: '',\r\n        quantidade: 1,\r\n        unidade: '',\r\n        valorUnitario: 0,\r\n        fornecedor: '',\r\n        observacoes: ''\r\n      }]\r\n    }))\r\n  }\r\n\r\n  // Remove material\r\n  const removeMaterial = (index: number) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      materiais: prev.materiais.filter((_, i) => i !== index)\r\n    }))\r\n  }\r\n\r\n  // Update material\r\n  const updateMaterial = (index: number, field: keyof MaterialForm, value: any) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      materiais: prev.materiais.map((material, i) => \r\n        i === index ? { ...material, [field]: value } : material\r\n      )\r\n    }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadClientes()\r\n  }, [])\r\n\r\n  // Show signature pad if ready\r\n  if (showSignature && savedPropostaId) {\r\n    return (\r\n      <ProposalSignaturePad\r\n        proposta={{\r\n          numeroProposta: 'Nova Proposta',\r\n          titulo: formData.titulo,\r\n          precoPropostaCliente: formData.precoPropostaCliente || undefined,\r\n          condicoesGerais: formData.condicoesGerais || undefined\r\n        }}\r\n        onSignatureComplete={handleSignatureComplete}\r\n        onCancel={handleSignatureCancel}\r\n        loading={loading}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <Button variant=\"ghost\" asChild>\r\n            <Link href=\"/propostas\">\r\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n              Voltar\r\n            </Link>\r\n          </Button>\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold\">Nova Proposta</h1>\r\n            <p className=\"text-muted-foreground\">Criar nova proposta comercial</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Form */}\r\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n        {/* Basic Info */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Informações Básicas</CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"grid gap-4 md:grid-cols-2\">\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Cliente *</label>\r\n                <Select \r\n                  value={formData.clienteId} \r\n                  onValueChange={(value) => setFormData(prev => ({ ...prev, clienteId: value }))}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Selecione um cliente\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {clientes.map((cliente) => (\r\n                      <SelectItem key={cliente.id} value={cliente.id}>\r\n                        {cliente.nome}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Valor Estimado (USD)</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  step=\"0.01\"\r\n                  min=\"0\"\r\n                  placeholder=\"0.00\"\r\n                  value={formData.valorEstimado}\r\n                  onChange={(e) => setFormData(prev => ({ \r\n                    ...prev, \r\n                    valorEstimado: parseFloat(e.target.value) || 0 \r\n                  }))}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Título e Tipo */}\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Título *</label>\r\n              <Input \r\n                placeholder=\"Título da proposta\" \r\n                value={formData.titulo}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, titulo: e.target.value }))}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Tipo de Serviço *</label>\r\n              <Input \r\n                placeholder=\"Ex: Instalação elétrica, Reforma, etc.\" \r\n                value={formData.tipoServico}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, tipoServico: e.target.value }))}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Descrição do Escopo *</label>\r\n              <Textarea \r\n                placeholder=\"Descreva detalhadamente o que será executado\"\r\n                rows={4}\r\n                value={formData.descricaoEscopo}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, descricaoEscopo: e.target.value }))}\r\n              />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Informações de Contato */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Informações de Contato e Execução</CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"grid gap-4 md:grid-cols-2\">\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Nome do Contato *</label>\r\n                <Input \r\n                  placeholder=\"Nome do responsável\" \r\n                  value={formData.contatoNome}\r\n                  onChange={(e) => setFormData(prev => ({ ...prev, contatoNome: e.target.value }))}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Email do Contato *</label>\r\n                <Input \r\n                  type=\"email\"\r\n                  placeholder=\"email@exemplo.com\" \r\n                  value={formData.contatoEmail}\r\n                  onChange={(e) => setFormData(prev => ({ ...prev, contatoEmail: e.target.value }))}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Telefone do Contato</label>\r\n              <Input \r\n                placeholder=\"(11) 99999-9999\" \r\n                value={formData.contatoTelefone}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, contatoTelefone: e.target.value }))}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Endereço de Execução *</label>\r\n              <Textarea \r\n                placeholder=\"Endereço completo onde o serviço será executado\"\r\n                rows={3}\r\n                value={formData.localExecucaoEndereco}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, localExecucaoEndereco: e.target.value }))}\r\n              />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Prazos e Validade */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Prazos e Validade</CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"grid gap-4 md:grid-cols-3\">\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Prazo para Aceite (dias)</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  max=\"365\"\r\n                  placeholder=\"7\"\r\n                  value={formData.tempoParaAceite}\r\n                  onChange={(e) => setFormData(prev => ({ \r\n                    ...prev, \r\n                    tempoParaAceite: parseInt(e.target.value) || 7 \r\n                  }))}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Validade da Proposta</label>\r\n                <Input\r\n                  type=\"date\"\r\n                  value={formData.validadeProposta}\r\n                  onChange={(e) => setFormData(prev => ({ ...prev, validadeProposta: e.target.value }))}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Prazo de Execução (dias)</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  placeholder=\"30\"\r\n                  value={formData.prazoExecucaoEstimadoDias}\r\n                  onChange={(e) => setFormData(prev => ({ \r\n                    ...prev, \r\n                    prazoExecucaoEstimadoDias: parseInt(e.target.value) || 0 \r\n                  }))}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Janela de Execução Preferencial</label>\r\n              <Input \r\n                placeholder=\"Ex: Seg-Sex, 8h-17h\" \r\n                value={formData.janelaExecucaoPreferencial}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, janelaExecucaoPreferencial: e.target.value }))}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Restrições de Acesso</label>\r\n              <Textarea \r\n                placeholder=\"Ex: Condomínio exige cadastro até D-2\"\r\n                rows={2}\r\n                value={formData.restricoesDeAcesso}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, restricoesDeAcesso: e.target.value }))}\r\n              />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Permissões e Conformidades */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Permissões e Conformidades</CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"grid gap-4 md:grid-cols-2\">\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Requer Permites?</label>\r\n                <Select \r\n                  value={formData.permite} \r\n                  onValueChange={(value) => setFormData(prev => ({ \r\n                    ...prev, \r\n                    permite: value as StatusPermite \r\n                  }))}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Selecione\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value={StatusPermite.NAO}>Não</SelectItem>\r\n                    <SelectItem value={StatusPermite.SIM}>Sim</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              {formData.permite === StatusPermite.SIM && (\r\n                <div className=\"space-y-2\">\r\n                  <label className=\"text-sm font-medium\">Quais Permites? *</label>\r\n                  <Input \r\n                    placeholder=\"Descreva os permites necessários\"\r\n                    value={formData.quaisPermites}\r\n                    onChange={(e) => setFormData(prev => ({ ...prev, quaisPermites: e.target.value }))}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Normas e Referências</label>\r\n              <Textarea \r\n                placeholder=\"Ex: NEC 2023, ABNT NBR 5410\"\r\n                rows={2}\r\n                value={formData.normasReferencias}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, normasReferencias: e.target.value }))}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Inspeções Necessárias</label>\r\n              <Textarea \r\n                placeholder=\"Ex: Inspeção final elétrica\"\r\n                rows={2}\r\n                value={formData.inspecoesNecessarias}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, inspecoesNecessarias: e.target.value }))}\r\n              />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Valores e Condições Comerciais */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Valores e Condições Comerciais</CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"grid gap-4 md:grid-cols-2\">\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Valor Estimado (USD)</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  step=\"0.01\"\r\n                  min=\"0\"\r\n                  placeholder=\"0.00\"\r\n                  value={formData.valorEstimado}\r\n                  onChange={(e) => setFormData(prev => ({ \r\n                    ...prev, \r\n                    valorEstimado: parseFloat(e.target.value) || 0 \r\n                  }))}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Preço Final ao Cliente (USD)</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  step=\"0.01\"\r\n                  min=\"0\"\r\n                  placeholder=\"0.00\"\r\n                  value={formData.precoPropostaCliente}\r\n                  onChange={(e) => setFormData(prev => ({ \r\n                    ...prev, \r\n                    precoPropostaCliente: parseFloat(e.target.value) || 0 \r\n                  }))}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"grid gap-4 md:grid-cols-2\">\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Desconto Ofertado (%)</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  step=\"0.1\"\r\n                  min=\"0\"\r\n                  max=\"100\"\r\n                  placeholder=\"0\"\r\n                  value={formData.descontosOfertados}\r\n                  onChange={(e) => setFormData(prev => ({ \r\n                    ...prev, \r\n                    descontosOfertados: parseFloat(e.target.value) || 0 \r\n                  }))}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Gatilho de Faturamento</label>\r\n                <Select \r\n                  value={formData.gatilhoFaturamento} \r\n                  onValueChange={(value) => setFormData(prev => ({ \r\n                    ...prev, \r\n                    gatilhoFaturamento: value \r\n                  }))}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Selecione\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"NA_APROVACAO\">Na Aprovação</SelectItem>\r\n                    <SelectItem value=\"POR_MARCOS\">Por Marcos</SelectItem>\r\n                    <SelectItem value=\"NA_ENTREGA\">Na Entrega</SelectItem>\r\n                    <SelectItem value=\"CUSTOMIZADO\">Customizado</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n            {formData.gatilhoFaturamento === 'NA_APROVACAO' && (\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Percentual do Sinal (%)</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  step=\"0.1\"\r\n                  min=\"0\"\r\n                  max=\"100\"\r\n                  placeholder=\"50\"\r\n                  value={formData.percentualSinal}\r\n                  onChange={(e) => setFormData(prev => ({ \r\n                    ...prev, \r\n                    percentualSinal: parseFloat(e.target.value) || 0 \r\n                  }))}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Garantia</label>\r\n              <Textarea \r\n                placeholder=\"Ex: 12 meses mão de obra; 3 meses materiais\"\r\n                rows={2}\r\n                value={formData.garantia}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, garantia: e.target.value }))}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Exclusões</label>\r\n              <Textarea \r\n                placeholder=\"O que não está incluso na proposta\"\r\n                rows={3}\r\n                value={formData.exclusoes}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, exclusoes: e.target.value }))}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Condições Gerais</label>\r\n              <Textarea \r\n                placeholder=\"Termos contratuais, prazos, multas, SLA de atendimento\"\r\n                rows={3}\r\n                value={formData.condicoesGerais}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, condicoesGerais: e.target.value }))}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Instruções de Pagamento</label>\r\n              <Textarea \r\n                placeholder=\"Como realizar o pagamento\"\r\n                rows={2}\r\n                value={formData.instrucoesPagamento}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, instrucoesPagamento: e.target.value }))}\r\n              />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Observações e Riscos */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Observações e Riscos</CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Observações para o Cliente</label>\r\n              <Textarea \r\n                placeholder=\"Informações que aparecerão na proposta para o cliente\"\r\n                rows={3}\r\n                value={formData.observacoesParaCliente}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, observacoesParaCliente: e.target.value }))}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">Riscos Identificados</label>\r\n              <Textarea \r\n                placeholder=\"Ex: Infiltração na fachada pode atrasar prazos\"\r\n                rows={2}\r\n                value={formData.riscosIdentificados}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, riscosIdentificados: e.target.value }))}\r\n              />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Permissões e Conformidades */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Permissões e Conformidades</CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"grid gap-4 md:grid-cols-2\">\r\n              <div className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">Requer Permites?</label>\r\n                <Select \r\n                  value={formData.permite} \r\n                  onValueChange={(value) => setFormData(prev => ({ \r\n                    ...prev, \r\n                    permite: value as StatusPermite \r\n                  }))}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Selecione\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value={StatusPermite.NAO}>Não</SelectItem>\r\n                    <SelectItem value={StatusPermite.SIM}>Sim</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              {formData.permite === StatusPermite.SIM && (\r\n                <div className=\"space-y-2\">\r\n                  <label className=\"text-sm font-medium\">Quais Permites? *</label>\r\n                  <Input \r\n                    placeholder=\"Descreva os permites necessários\"\r\n                    value={formData.quaisPermites}\r\n                    onChange={(e) => setFormData(prev => ({ ...prev, quaisPermites: e.target.value }))}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Etapas */}\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"flex items-center justify-between\">\r\n              <CardTitle>Etapas do Trabalho</CardTitle>\r\n              <Button type=\"button\" variant=\"outline\" onClick={addEtapa}>\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Adicionar Etapa\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {formData.etapas.length === 0 ? (\r\n              <p className=\"text-center py-8 text-muted-foreground\">\r\n                Nenhuma etapa adicionada. Clique em \"Adicionar Etapa\" para começar.\r\n              </p>\r\n            ) : (\r\n              formData.etapas.map((etapa, index) => (\r\n                <Card key={index} className=\"border-l-4 border-l-blue-500\">\r\n                  <CardContent className=\"pt-6\">\r\n                    <div className=\"flex items-center justify-between mb-4\">\r\n                      <h4 className=\"font-medium\">Etapa {index + 1}</h4>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => removeEtapa(index)}\r\n                      >\r\n                        <Trash2 className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    </div>\r\n                    \r\n                    <div className=\"grid gap-4 md:grid-cols-2\">\r\n                      <div className=\"space-y-2\">\r\n                        <label className=\"text-sm font-medium\">Título *</label>\r\n                        <Input \r\n                          placeholder=\"Nome da etapa\"\r\n                          value={etapa.titulo}\r\n                          onChange={(e) => updateEtapa(index, 'titulo', e.target.value)}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"space-y-2\">\r\n                        <label className=\"text-sm font-medium\">Valor Estimado (USD)</label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          step=\"0.01\"\r\n                          min=\"0\"\r\n                          placeholder=\"0.00\"\r\n                          value={etapa.valorEstimado}\r\n                          onChange={(e) => updateEtapa(index, 'valorEstimado', parseFloat(e.target.value) || 0)}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"space-y-2 mt-4\">\r\n                      <label className=\"text-sm font-medium\">Descrição</label>\r\n                      <Textarea \r\n                        placeholder=\"Descrição detalhada da etapa\"\r\n                        rows={2}\r\n                        value={etapa.descricao}\r\n                        onChange={(e) => updateEtapa(index, 'descricao', e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Materiais */}\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"flex items-center justify-between\">\r\n              <CardTitle>Materiais</CardTitle>\r\n              <Button type=\"button\" variant=\"outline\" onClick={addMaterial}>\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Adicionar Material\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {formData.materiais.length === 0 ? (\r\n              <p className=\"text-center py-8 text-muted-foreground\">\r\n                Nenhum material adicionado. Clique em \"Adicionar Material\" para começar.\r\n              </p>\r\n            ) : (\r\n              formData.materiais.map((material, index) => (\r\n                <Card key={index} className=\"border-l-4 border-l-green-500\">\r\n                  <CardContent className=\"pt-6\">\r\n                    <div className=\"flex items-center justify-between mb-4\">\r\n                      <h4 className=\"font-medium\">Material {index + 1}</h4>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => removeMaterial(index)}\r\n                      >\r\n                        <Trash2 className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    </div>\r\n                    \r\n                    <div className=\"grid gap-4 md:grid-cols-3\">\r\n                      <div className=\"space-y-2\">\r\n                        <label className=\"text-sm font-medium\">Nome *</label>\r\n                        <Input \r\n                          placeholder=\"Nome do material\"\r\n                          value={material.nome}\r\n                          onChange={(e) => updateMaterial(index, 'nome', e.target.value)}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"space-y-2\">\r\n                        <label className=\"text-sm font-medium\">Quantidade *</label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          step=\"0.01\"\r\n                          min=\"0\"\r\n                          placeholder=\"1\"\r\n                          value={material.quantidade}\r\n                          onChange={(e) => updateMaterial(index, 'quantidade', parseFloat(e.target.value) || 0)}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"space-y-2\">\r\n                        <label className=\"text-sm font-medium\">Unidade *</label>\r\n                        <Input \r\n                          placeholder=\"ex: un, m², kg\"\r\n                          value={material.unidade}\r\n                          onChange={(e) => updateMaterial(index, 'unidade', e.target.value)}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"space-y-2\">\r\n                        <label className=\"text-sm font-medium\">Valor Unitário (USD)</label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          step=\"0.01\"\r\n                          min=\"0\"\r\n                          placeholder=\"0.00\"\r\n                          value={material.valorUnitario}\r\n                          onChange={(e) => updateMaterial(index, 'valorUnitario', parseFloat(e.target.value) || 0)}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"space-y-2\">\r\n                        <label className=\"text-sm font-medium\">Fornecedor</label>\r\n                        <Input \r\n                          placeholder=\"Nome do fornecedor\"\r\n                          value={material.fornecedor}\r\n                          onChange={(e) => updateMaterial(index, 'fornecedor', e.target.value)}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"space-y-2 mt-4\">\r\n                      <label className=\"text-sm font-medium\">Descrição</label>\r\n                      <Textarea \r\n                        placeholder=\"Descrição detalhada do material\"\r\n                        rows={2}\r\n                        value={material.descricao}\r\n                        onChange={(e) => updateMaterial(index, 'descricao', e.target.value)}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"space-y-2 mt-4\">\r\n                      <label className=\"text-sm font-medium\">Observações</label>\r\n                      <Textarea \r\n                        placeholder=\"Observações adicionais\"\r\n                        rows={2}\r\n                        value={material.observacoes}\r\n                        onChange={(e) => updateMaterial(index, 'observacoes', e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Actions */}\r\n        <div className=\"flex justify-end space-x-4\">\r\n          <Button type=\"button\" variant=\"outline\" asChild>\r\n            <Link href=\"/propostas\">Cancelar</Link>\r\n          </Button>\r\n          \r\n          <Button type=\"submit\" disabled={loading}>\r\n            <Save className=\"h-4 w-4 mr-2\" />\r\n            {loading ? 'Salvando...' : 'Salvar Proposta'}\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\components\\PropostasList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":125,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":144,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":144,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":165,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":165,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPropostas'. Either include it or remove the dependency array.","line":203,"column":6,"nodeType":"ArrayExpression","endLine":203,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadPropostas]","fix":{"range":[5335,5337],"text":"[loadPropostas]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { useState, useEffect } from 'react'\r\nimport { \r\n  Card, \r\n  CardContent, \r\n  CardHeader, \r\n  CardTitle \r\n} from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { \r\n  Table, \r\n  TableBody, \r\n  TableCell, \r\n  TableHead, \r\n  TableHeader, \r\n  TableRow \r\n} from '@/components/ui/table'\r\nimport { \r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n  DropdownMenuSeparator\r\n} from '@/components/ui/dropdown-menu'\r\nimport { Input } from '@/components/ui/input'\r\nimport { \r\n  Select, \r\n  SelectContent, \r\n  SelectItem, \r\n  SelectTrigger, \r\n  SelectValue \r\n} from '@/components/ui/select'\r\nimport { \r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\"\r\nimport { useToast } from '@/hooks/use-toast'\r\nimport { \r\n  Search, \r\n  Plus, \r\n  MoreHorizontal, \r\n  Eye, \r\n  Edit, \r\n  Trash2, \r\n  FileText, \r\n  Download,\r\n  Filter,\r\n  X\r\n} from 'lucide-react'\r\nimport { PropostaWithRelations, StatusProposta } from '@/types/propostas'\r\nimport Link from 'next/link'\r\nimport { ChangeEvent } from 'react'\r\n\r\n// Status color mapping\r\nconst statusColors: Record<StatusProposta, string> = {\r\n  [StatusProposta.RASCUNHO]: 'bg-gray-100 text-gray-800',\r\n  [StatusProposta.ENVIADA]: 'bg-blue-100 text-blue-800',\r\n  [StatusProposta.ASSINADA]: 'bg-yellow-100 text-yellow-800',\r\n  [StatusProposta.APROVADA]: 'bg-green-100 text-green-800',\r\n  [StatusProposta.CANCELADA]: 'bg-red-100 text-red-800',\r\n}\r\n\r\ninterface PropostasListProps {\r\n  userRole: string\r\n}\r\n\r\ninterface Filters {\r\n  busca: string\r\n  status?: StatusProposta\r\n  clienteId?: string\r\n  dataInicio?: string\r\n  dataFim?: string\r\n}\r\n\r\nexport default function PropostasList({ userRole }: PropostasListProps) {\r\n  const [propostas, setPropostas] = useState<PropostaWithRelations[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [cursor, setCursor] = useState<string | null>(null)\r\n  const [hasMore, setHasMore] = useState(true)\r\n  const [filters, setFilters] = useState<Filters>({ busca: '' })\r\n  const [showFilters, setShowFilters] = useState(false)\r\n  const [clientes, setClientes] = useState<Array<{id: string, nome: string}>>([])\r\n  \r\n  const { toast } = useToast()\r\n\r\n  // Load propostas\r\n  const loadPropostas = async (reset = false) => {\r\n    try {\r\n      setLoading(true)\r\n      const params = new URLSearchParams()\r\n      \r\n      if (!reset && cursor) params.append('cursor', cursor)\r\n      if (filters.busca) params.append('busca', filters.busca)\r\n      if (filters.status) params.append('status', filters.status)\r\n      if (filters.clienteId) params.append('clienteId', filters.clienteId)\r\n      if (filters.dataInicio) params.append('dataInicio', filters.dataInicio)\r\n      if (filters.dataFim) params.append('dataFim', filters.dataFim)\r\n\r\n      const response = await fetch(`/api/propostas?${params}`)\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Erro ao carregar propostas')\r\n      }\r\n\r\n      const data = await response.json()\r\n      \r\n      if (reset) {\r\n        setPropostas(data.propostas)\r\n      } else {\r\n        setPropostas(prev => [...prev, ...data.propostas])\r\n      }\r\n      \r\n      setCursor(data.nextCursor)\r\n      setHasMore(data.hasMore)\r\n      \r\n    } catch (error) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Não foi possível carregar as propostas',\r\n        variant: 'destructive'\r\n      })\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // Load clients for filter\r\n  const loadClientes = async () => {\r\n    try {\r\n      const response = await fetch('/api/clientes?limit=1000')\r\n      if (response.ok) {\r\n        const data = await response.json()\r\n        setClientes(data.clientes || [])\r\n      }\r\n    } catch (error) {\r\n      // Silent fail for filter options\r\n    }\r\n  }\r\n\r\n  // Delete proposta\r\n  const handleDelete = async (id: string) => {\r\n    try {\r\n      const response = await fetch(`/api/propostas/${id}`, {\r\n        method: 'DELETE'\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Erro ao excluir proposta')\r\n      }\r\n\r\n      setPropostas(prev => prev.filter(p => p.id !== id))\r\n      toast({\r\n        title: 'Sucesso',\r\n        description: 'Proposta excluída com sucesso'\r\n      })\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Erro',\r\n        description: 'Não foi possível excluir a proposta',\r\n        variant: 'destructive'\r\n      })\r\n    }\r\n  }\r\n\r\n  // Apply filters\r\n  const applyFilters = () => {\r\n    setCursor(null)\r\n    loadPropostas(true)\r\n    setShowFilters(false)\r\n  }\r\n\r\n  // Clear filters\r\n  const clearFilters = () => {\r\n    setFilters({ busca: '' })\r\n    setCursor(null)\r\n    loadPropostas(true)\r\n    setShowFilters(false)\r\n  }\r\n\r\n  // Format currency for display (mask values for some roles)\r\n  const formatCurrency = (value: number) => {\r\n    if (userRole === 'VENDEDOR' || userRole === 'OPERACIONAL') {\r\n      return 'USD ●●●●●'\r\n    }\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD'\r\n    }).format(value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadPropostas(true)\r\n    loadClientes()\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">Propostas</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Gerencie propostas comerciais\r\n          </p>\r\n        </div>\r\n        <Button asChild>\r\n          <Link href=\"/propostas/nova\">\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            Nova Proposta\r\n          </Link>\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Search and Filters */}\r\n      <Card>\r\n        <CardContent className=\"pt-6\">\r\n          <div className=\"flex gap-4 items-center\">\r\n            <div className=\"flex-1\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\r\n                <Input\r\n                  placeholder=\"Buscar por número, cliente ou descrição...\"\r\n                  value={filters.busca}\r\n                  onChange={(e: ChangeEvent<HTMLInputElement>) => setFilters(prev => ({ ...prev, busca: e.target.value }))}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => setShowFilters(!showFilters)}\r\n            >\r\n              <Filter className=\"h-4 w-4 mr-2\" />\r\n              Filtros\r\n            </Button>\r\n            \r\n            <Button onClick={() => loadPropostas(true)}>\r\n              Buscar\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Advanced Filters */}\r\n          {showFilters && (\r\n            <div className=\"mt-4 p-4 border rounded-lg bg-gray-50\">\r\n              <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                <Select\r\n                  value={filters.status}\r\n                  onValueChange={(value: StatusProposta) => setFilters(prev => ({ ...prev, status: value }))}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Status\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value={StatusProposta.RASCUNHO}>Rascunho</SelectItem>\r\n                    <SelectItem value={StatusProposta.ENVIADA}>Enviada</SelectItem>\r\n                    <SelectItem value={StatusProposta.ASSINADA}>Assinada</SelectItem>\r\n                    <SelectItem value={StatusProposta.APROVADA}>Aprovada</SelectItem>\r\n                    <SelectItem value={StatusProposta.CANCELADA}>Cancelada</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n\r\n                <Select\r\n                  value={filters.clienteId}\r\n                  onValueChange={(value: string) => setFilters(prev => ({ ...prev, clienteId: value }))}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Cliente\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {clientes.map((cliente) => (\r\n                      <SelectItem key={cliente.id} value={cliente.id}>\r\n                        {cliente.nome}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n\r\n                <Input\r\n                  type=\"date\"\r\n                  placeholder=\"Data início\"\r\n                  value={filters.dataInicio}\r\n                  onChange={(e: ChangeEvent<HTMLInputElement>) => setFilters(prev => ({ ...prev, dataInicio: e.target.value }))}\r\n                />\r\n\r\n                <Input\r\n                  type=\"date\"\r\n                  placeholder=\"Data fim\"\r\n                  value={filters.dataFim}\r\n                  onChange={(e: ChangeEvent<HTMLInputElement>) => setFilters(prev => ({ ...prev, dataFim: e.target.value }))}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"flex gap-2 mt-4\">\r\n                <Button onClick={applyFilters}>Aplicar Filtros</Button>\r\n                <Button variant=\"outline\" onClick={clearFilters}>\r\n                  <X className=\"h-4 w-4 mr-2\" />\r\n                  Limpar\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Propostas Table */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Lista de Propostas</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {loading && propostas.length === 0 ? (\r\n            <div className=\"text-center py-8\">Carregando...</div>\r\n          ) : propostas.length === 0 ? (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              Nenhuma proposta encontrada\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Número</TableHead>\r\n                    <TableHead>Cliente</TableHead>\r\n                    <TableHead>Descrição</TableHead>\r\n                    <TableHead>Status</TableHead>\r\n                    <TableHead>Valor</TableHead>\r\n                    <TableHead>Data</TableHead>\r\n                    <TableHead className=\"text-right\">Ações</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {propostas.map((proposta) => (\r\n                    <TableRow key={proposta.id}>\r\n                      <TableCell className=\"font-mono\">\r\n                        {proposta.numero}\r\n                      </TableCell>\r\n                      <TableCell>{proposta.cliente.nome}</TableCell>\r\n                      <TableCell>{proposta.descricao}</TableCell>\r\n                      <TableCell>\r\n                        <Badge \r\n                          variant=\"secondary\" \r\n                          className={statusColors[proposta.status]}\r\n                        >\r\n                          {proposta.status}\r\n                        </Badge>\r\n                      </TableCell>\r\n                      <TableCell>{formatCurrency(proposta.valorTotal)}</TableCell>\r\n                      <TableCell>\r\n                        {new Date(proposta.createdAt).toLocaleDateString('pt-BR')}\r\n                      </TableCell>\r\n                      <TableCell className=\"text-right\">\r\n                        <DropdownMenu>\r\n                          <DropdownMenuTrigger asChild>\r\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\r\n                              <MoreHorizontal className=\"h-4 w-4\" />\r\n                            </Button>\r\n                          </DropdownMenuTrigger>\r\n                          <DropdownMenuContent align=\"end\">\r\n                            <DropdownMenuItem asChild>\r\n                              <Link href={`/propostas/${proposta.id}`}>\r\n                                <Eye className=\"h-4 w-4 mr-2\" />\r\n                                Visualizar\r\n                              </Link>\r\n                            </DropdownMenuItem>\r\n                            \r\n                            {proposta.status === StatusProposta.RASCUNHO && (\r\n                              <DropdownMenuItem asChild>\r\n                                <Link href={`/propostas/${proposta.id}/editar`}>\r\n                                  <Edit className=\"h-4 w-4 mr-2\" />\r\n                                  Editar\r\n                                </Link>\r\n                              </DropdownMenuItem>\r\n                            )}\r\n\r\n                            <DropdownMenuItem>\r\n                              <FileText className=\"h-4 w-4 mr-2\" />\r\n                              Gerar PDF\r\n                            </DropdownMenuItem>\r\n\r\n                            <DropdownMenuItem>\r\n                              <Download className=\"h-4 w-4 mr-2\" />\r\n                              Exportar\r\n                            </DropdownMenuItem>\r\n\r\n                            {proposta.status === StatusProposta.RASCUNHO && (\r\n                              <>\r\n                                <DropdownMenuSeparator />\r\n                                <AlertDialog>\r\n                                  <AlertDialogTrigger asChild>\r\n                                    <DropdownMenuItem onSelect={(e: Event) => e.preventDefault()}>\r\n                                      <Trash2 className=\"h-4 w-4 mr-2\" />\r\n                                      Excluir\r\n                                    </DropdownMenuItem>\r\n                                  </AlertDialogTrigger>\r\n                                  <AlertDialogContent>\r\n                                    <AlertDialogHeader>\r\n                                      <AlertDialogTitle>Confirmar exclusão</AlertDialogTitle>\r\n                                      <AlertDialogDescription>\r\n                                        Tem certeza que deseja excluir a proposta {proposta.numero}?\r\n                                        Esta ação não pode ser desfeita.\r\n                                      </AlertDialogDescription>\r\n                                    </AlertDialogHeader>\r\n                                    <AlertDialogFooter>\r\n                                      <AlertDialogCancel>Cancelar</AlertDialogCancel>\r\n                                      <AlertDialogAction \r\n                                        onClick={() => handleDelete(proposta.id)}\r\n                                        className=\"bg-red-600 hover:bg-red-700\"\r\n                                      >\r\n                                        Excluir\r\n                                      </AlertDialogAction>\r\n                                    </AlertDialogFooter>\r\n                                  </AlertDialogContent>\r\n                                </AlertDialog>\r\n                              </>\r\n                            )}\r\n                          </DropdownMenuContent>\r\n                        </DropdownMenu>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n\r\n              {/* Load More */}\r\n              {hasMore && (\r\n                <div className=\"mt-4 text-center\">\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    onClick={() => loadPropostas(false)}\r\n                    disabled={loading}\r\n                  >\r\n                    {loading ? 'Carregando...' : 'Carregar mais'}\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\components\\PropostasTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Table' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableBody' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableCell' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableHead' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableHeader' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TableRow' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":11}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/modules/propostas/components/PropostasTable.tsx\r\n\"use client\";\r\nimport { useState } from \"react\";\r\nimport Link from \"next/link\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { \r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n  DropdownMenuSeparator\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { \r\n  Table, \r\n  TableBody, \r\n  TableCell, \r\n  TableHead, \r\n  TableHeader, \r\n  TableRow \r\n} from \"@/components/ui/table\";\r\nimport { \r\n  Eye, \r\n  Edit, \r\n  Trash2, \r\n  MoreHorizontal,\r\n  FileText,\r\n  Send,\r\n  Copy\r\n} from \"lucide-react\";\r\nimport type { PropostaDTO } from '../services/propostasApi';\r\nimport { useConfirm } from \"@/components/ui/ConfirmDialog\";\r\n\r\ninterface PropostasTableProps {\r\n  data: PropostaDTO[];\r\n  loading: boolean;\r\n  selectedIds: string[];\r\n  onSelectionChange: (ids: string[]) => void;\r\n  onDelete: (id: string) => void;\r\n  onDuplicate: (id: string) => void;\r\n  onSend: (id: string) => void;\r\n  sortKey: 'numeroProposta' | 'titulo' | 'cliente' | 'status' | 'valor' | 'criadoEm';\r\n  sortDir: 'asc' | 'desc';\r\n  onSort: (key: 'numeroProposta' | 'titulo' | 'cliente' | 'status' | 'valor' | 'criadoEm', dir: 'asc' | 'desc') => void;\r\n}\r\n\r\nconst statusColors: Record<string, string> = {\r\n  'RASCUNHO': 'bg-gray-100 text-gray-800',\r\n  'ENVIADA': 'bg-blue-100 text-blue-800',\r\n  'ASSINADA': 'bg-yellow-100 text-yellow-800',\r\n  'APROVADA': 'bg-green-100 text-green-800',\r\n  'CANCELADA': 'bg-red-100 text-red-800',\r\n};\r\n\r\nconst statusLabels: Record<string, string> = {\r\n  'RASCUNHO': 'Rascunho',\r\n  'ENVIADA': 'Enviada',\r\n  'ASSINADA': 'Assinada', \r\n  'APROVADA': 'Aprovada',\r\n  'CANCELADA': 'Cancelada',\r\n};\r\n\r\nexport default function PropostasTable({\r\n  data,\r\n  loading,\r\n  selectedIds,\r\n  onSelectionChange,\r\n  onDelete,\r\n  onDuplicate,\r\n  onSend,\r\n  sortKey,\r\n  sortDir,\r\n  onSort\r\n}: PropostasTableProps) {\r\n  const { confirm, Dialog } = useConfirm();\r\n\r\n  const handleSelectAll = (checked: boolean) => {\r\n    if (checked) {\r\n      onSelectionChange(data.map(p => p.id));\r\n    } else {\r\n      onSelectionChange([]);\r\n    }\r\n  };\r\n\r\n  const handleSelectOne = (id: string, checked: boolean) => {\r\n    if (checked) {\r\n      onSelectionChange([...selectedIds, id]);\r\n    } else {\r\n      onSelectionChange(selectedIds.filter(selectedId => selectedId !== id));\r\n    }\r\n  };\r\n\r\n  const handleSort = (key: 'numeroProposta' | 'titulo' | 'cliente' | 'status' | 'valor' | 'criadoEm') => {\r\n    const newDir = sortKey === key && sortDir === 'asc' ? 'desc' : 'asc';\r\n    onSort(key, newDir);\r\n  };\r\n\r\n  const handleDelete = async (proposta: PropostaDTO) => {\r\n    const confirmed = await confirm({\r\n      title: 'Deletar Proposta',\r\n      message: `Tem certeza que deseja deletar a proposta \"${proposta.numeroProposta}\"?`,\r\n      confirmText: 'Deletar',\r\n      cancelText: 'Cancelar'\r\n    });\r\n\r\n    if (confirmed) {\r\n      onDelete(proposta.id);\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (value?: number) => {\r\n    if (!value) return 'N/A';\r\n    return `USD ${value.toFixed(2)}`;\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('pt-BR');\r\n  };\r\n\r\n  const getSortIcon = (key: string) => {\r\n    if (sortKey !== key) return null;\r\n    return sortDir === 'asc' ? '↑' : '↓';\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"overflow-x-auto rounded-2xl border border-black/10 bg-white dark:border-white/10 dark:bg-white/5\">\r\n        <div className=\"py-12 text-center text-gray-400 text-sm\">Carregando propostas...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (data.length === 0) {\r\n    return (\r\n      <div className=\"overflow-x-auto rounded-2xl border border-black/10 bg-white dark:border-white/10 dark:bg-white/5\">\r\n        <div className=\"py-12 text-center text-gray-400 text-sm\">\r\n          <FileText className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\r\n          Nenhuma proposta encontrada\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const allSelected = data.length > 0 && selectedIds.length === data.length;\r\n  const someSelected = selectedIds.length > 0 && selectedIds.length < data.length;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"overflow-x-auto rounded-2xl border border-black/10 bg-white dark:border-white/10 dark:bg-white/5\">\r\n        <table className=\"min-w-full text-sm\">\r\n          <thead>\r\n            <tr className=\"text-left opacity-70\">\r\n              <th className=\"px-3 py-2\">\r\n                <input\r\n                  aria-label=\"Selecionar todos\"\r\n                  type=\"checkbox\"\r\n                  checked={allSelected}\r\n                  ref={(el) => {\r\n                    if (el) el.indeterminate = someSelected;\r\n                  }}\r\n                  onChange={(e) => handleSelectAll(e.target.checked)}\r\n                />\r\n              </th>\r\n              <th className=\"px-3 py-2 cursor-pointer\" onClick={() => handleSort('numeroProposta')}>\r\n                Número {getSortIcon('numeroProposta')}\r\n              </th>\r\n              <th className=\"px-3 py-2 cursor-pointer\" onClick={() => handleSort('titulo')}>\r\n                Título {getSortIcon('titulo')}\r\n              </th>\r\n              <th className=\"px-3 py-2 cursor-pointer\" onClick={() => handleSort('cliente')}>\r\n                Cliente {getSortIcon('cliente')}\r\n              </th>\r\n              <th className=\"px-3 py-2 cursor-pointer\" onClick={() => handleSort('status')}>\r\n                Status {getSortIcon('status')}\r\n              </th>\r\n              <th className=\"px-3 py-2 cursor-pointer\" onClick={() => handleSort('valor')}>\r\n                Valor Cliente {getSortIcon('valor')}\r\n              </th>\r\n              <th className=\"px-3 py-2 cursor-pointer\" onClick={() => handleSort('criadoEm')}>\r\n                Criado Em {getSortIcon('criadoEm')}\r\n              </th>\r\n              <th className=\"px-3 py-2 text-right\">Ações</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.map((proposta) => (\r\n              <tr key={proposta.id} className=\"border-t border-black/5 dark:border-white/10 hover:bg-black/5 dark:hover:bg-white/10\">\r\n                <td className=\"px-3 py-3\">\r\n                  <input\r\n                    aria-label={`Selecionar ${proposta.numeroProposta}`}\r\n                    type=\"checkbox\"\r\n                    checked={selectedIds.includes(proposta.id)}\r\n                    onChange={(e) => handleSelectOne(proposta.id, e.target.checked)}\r\n                  />\r\n                </td>\r\n                <td className=\"px-3 py-3 font-medium\">\r\n                  <Link \r\n                    href={`/propostas/${proposta.id}`}\r\n                    className=\"text-blue-600 hover:text-blue-800 hover:underline\"\r\n                  >\r\n                    {proposta.numeroProposta}\r\n                  </Link>\r\n                </td>\r\n                <td className=\"px-3 py-3\">\r\n                  <div className=\"max-w-48 truncate\" title={proposta.titulo}>\r\n                    {proposta.titulo}\r\n                  </div>\r\n                </td>\r\n                <td className=\"px-3 py-3\">\r\n                  <div className=\"max-w-40 truncate\" title={proposta.cliente.nome}>\r\n                    {proposta.cliente.nome}\r\n                  </div>\r\n                </td>\r\n                <td className=\"px-3 py-3\">\r\n                  <Badge className={statusColors[proposta.status] || 'bg-gray-100 text-gray-800'}>\r\n                    {statusLabels[proposta.status] || proposta.status}\r\n                  </Badge>\r\n                </td>\r\n                <td className=\"px-3 py-3\">{formatCurrency(proposta.precoPropostaCliente)}</td>\r\n                <td className=\"px-3 py-3\">{formatDate(proposta.criadoEm)}</td>\r\n                <td className=\"px-3 py-3 text-right\">\r\n                  <DropdownMenu>\r\n                    <DropdownMenuTrigger asChild>\r\n                      <Button variant=\"ghost\" size=\"sm\">\r\n                        <MoreHorizontal className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    </DropdownMenuTrigger>\r\n                    <DropdownMenuContent align=\"end\" className=\"w-48\">\r\n                      <DropdownMenuItem asChild>\r\n                        <Link href={`/propostas/${proposta.id}`}>\r\n                          <Eye className=\"h-4 w-4 mr-2\" />\r\n                          Visualizar\r\n                        </Link>\r\n                      </DropdownMenuItem>\r\n                      {proposta.status === 'RASCUNHO' && (\r\n                        <DropdownMenuItem asChild>\r\n                          <Link href={`/propostas/${proposta.id}/editar`}>\r\n                            <Edit className=\"h-4 w-4 mr-2\" />\r\n                            Editar\r\n                          </Link>\r\n                        </DropdownMenuItem>\r\n                      )}\r\n                      <DropdownMenuSeparator />\r\n                      <DropdownMenuItem onClick={() => onDuplicate(proposta.id)}>\r\n                        <Copy className=\"h-4 w-4 mr-2\" />\r\n                        Duplicar\r\n                      </DropdownMenuItem>\r\n                      {(proposta.status === 'RASCUNHO' || proposta.status === 'APROVADA') && (\r\n                        <DropdownMenuItem onClick={() => onSend(proposta.id)}>\r\n                          <Send className=\"h-4 w-4 mr-2\" />\r\n                          Enviar\r\n                        </DropdownMenuItem>\r\n                      )}\r\n                      <DropdownMenuSeparator />\r\n                      <DropdownMenuItem onClick={() => handleDelete(proposta)} className=\"text-red-600 hover:text-red-800\">\r\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\r\n                        Deletar\r\n                      </DropdownMenuItem>\r\n                    </DropdownMenuContent>\r\n                  </DropdownMenu>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <Dialog />\r\n    </>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\components\\Toolbar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Loader2' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'scopeMenuOpen' is assigned a value but never used.","line":52,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/modules/propostas/components/Toolbar.tsx\r\n\"use client\";\r\nimport { Search, Download, ChevronDown } from \"lucide-react\";\r\nimport { Plus } from \"lucide-react\";\r\nimport { Loader2 } from \"lucide-react\";\r\nimport Link from \"next/link\";\r\n// ...existing code...\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport type { PropostaDTO } from '../services/propostasApi';\r\nimport { exportToCSV, exportToPDF, exportToCSVServer } from \"../services/exportService\";\r\nimport { needsExportWarning } from \"../services/bulkService\";\r\nimport { useToast } from \"@/components/ui/Toaster\";\r\n\r\ninterface ToolbarProps {\r\n  q: string;\r\n  onQ: (value: string) => void;\r\n  status: string;\r\n  onStatus: (value: string) => void;\r\n  clienteId: string;\r\n  onClienteId: (value: string) => void;\r\n  total: number;\r\n  showNew?: boolean;\r\n  propostas: PropostaDTO[];\r\n  scope?: 'selected' | 'allFiltered';\r\n  selectedCount?: number;\r\n  onScopeChange?: (s: 'selected' | 'allFiltered') => void;\r\n  loading?: boolean;\r\n  clientes?: Array<{id: string, nome: string}>;\r\n}\r\n\r\nexport default function Toolbar({\r\n  q,\r\n  onQ,\r\n  status,\r\n  onStatus,\r\n  clienteId,\r\n  onClienteId,\r\n  total,\r\n  showNew = true,\r\n  propostas,\r\n  scope = 'allFiltered',\r\n  selectedCount = 0,\r\n  onScopeChange,\r\n  loading = false,\r\n  clientes = []\r\n}: ToolbarProps) {\r\n  const [showExportMenu, setShowExportMenu] = useState(false);\r\n  const [exporting, setExporting] = useState(false);\r\n  const exportRef = useRef<HTMLDivElement>(null);\r\n  const [statusMenuOpen, setStatusMenuOpen] = useState(false);\r\n  const [clienteMenuOpen, setClienteMenuOpen] = useState(false);\r\n  const [scopeMenuOpen, setScopeMenuOpen] = useState(false);\r\n  const statusRef = useRef<HTMLDivElement>(null);\r\n  const clienteRef = useRef<HTMLDivElement>(null);\r\n  const scopeRef = useRef<HTMLDivElement>(null);\r\n  const { showToast } = useToast();\r\n\r\n  const handleExport = async (format: 'csv' | 'pdf') => {\r\n    setShowExportMenu(false);\r\n    setExporting(true);\r\n\r\n    const currentScope = scope || 'allFiltered';\r\n    const count = currentScope === 'selected' ? (selectedCount || 0) : total;\r\n    \r\n    if (count === 0) {\r\n      showToast({ title: 'Aviso', message: 'Nenhuma proposta para exportar', type: 'info' });\r\n      setExporting(false);\r\n      return;\r\n    }\r\n    \r\n    if (needsExportWarning(count)) {\r\n      const proceed = window.confirm(`Você está prestes a exportar ${count} registros. Isso pode demorar. Deseja continuar?`);\r\n      if (!proceed) {\r\n        setExporting(false);\r\n        return;\r\n      }\r\n    }\r\n\r\n    try {\r\n      if (format === 'csv') {\r\n        if (currentScope === 'selected') {\r\n          exportToCSV(propostas, 'propostas');\r\n        } else {\r\n          await exportToCSVServer({ \r\n            filename: 'propostas', \r\n            filters: { \r\n              q, \r\n              status: (status === '' || status === 'all') ? undefined : status, \r\n              clienteId: clienteId === '' ? undefined : clienteId \r\n            } \r\n          });\r\n        }\r\n        showToast({ title: 'Exportado', message: 'CSV gerado com sucesso', type: 'success' });\r\n      } else {\r\n        if (currentScope === 'selected') {\r\n          await exportToPDF(propostas, 'propostas');\r\n        } else {\r\n          // Server-side PDF export\r\n          const response = await fetch('/api/propostas/export/pdf', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ \r\n              filename: 'propostas', \r\n              filters: { \r\n                q, \r\n                status: (status === '' || status === 'all') ? undefined : status, \r\n                clienteId: clienteId === '' ? undefined : clienteId \r\n              } \r\n            })\r\n          });\r\n          \r\n          if (!response.ok) throw new Error('Falha ao exportar PDF');\r\n          \r\n          const blob = await response.blob();\r\n          const url = URL.createObjectURL(blob);\r\n          const a = document.createElement('a');\r\n          a.href = url;\r\n          a.download = 'propostas.pdf';\r\n          a.click();\r\n          URL.revokeObjectURL(url);\r\n        }\r\n        showToast({ title: 'Exportado', message: 'PDF gerado com sucesso', type: 'success' });\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao exportar:', error);\r\n      showToast({ \r\n        title: 'Erro', \r\n        message: error instanceof Error ? error.message : 'Erro desconhecido', \r\n        type: 'error' \r\n      });\r\n    } finally {\r\n      setExporting(false);\r\n    }\r\n  };\r\n\r\n  // Close menus when clicking outside\r\n  useEffect(() => {\r\n    function handleClickOutside(event: MouseEvent) {\r\n      if (exportRef.current && !exportRef.current.contains(event.target as Node)) {\r\n        setShowExportMenu(false);\r\n      }\r\n      if (statusRef.current && !statusRef.current.contains(event.target as Node)) {\r\n        setStatusMenuOpen(false);\r\n      }\r\n      if (clienteRef.current && !clienteRef.current.contains(event.target as Node)) {\r\n        setClienteMenuOpen(false);\r\n      }\r\n      if (scopeRef.current && !scopeRef.current.contains(event.target as Node)) {\r\n        setScopeMenuOpen(false);\r\n      }\r\n    }\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  const getStatusLabel = (value: string) => {\r\n    switch (value) {\r\n      case 'RASCUNHO': return 'Rascunho';\r\n      case 'ENVIADA': return 'Enviada';\r\n      case 'ASSINADA': return 'Assinada';\r\n      case 'APROVADA': return 'Aprovada';\r\n      case 'CANCELADA': return 'Cancelada';\r\n      default: return 'Todos os Status';\r\n    }\r\n  };\r\n\r\n  const getClienteLabel = (value: string) => {\r\n    if (!value) return 'Todos os Clientes';\r\n    const cliente = clientes.find(c => c.id === value);\r\n    return cliente ? cliente.nome : 'Cliente não encontrado';\r\n  };\r\n\r\n  return (\r\n    <div className=\"mb-4 flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between\">\r\n      <div className=\"flex items-center gap-2\">\r\n        <div className=\"relative\">\r\n          <Search className=\"pointer-events-none absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-neutral-400\" />\r\n          <input\r\n            value={q}\r\n            onChange={(e) => onQ((e.target as HTMLInputElement).value)}\r\n            placeholder=\"Buscar por título, número ou cliente\"\r\n            className=\"w-[260px] rounded-xl border border-black/10 bg-white px-9 py-2 text-sm outline-none placeholder:text-neutral-400 focus:border-[#0098DA] dark:border-white/10 dark:bg-white/5 text-foreground\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"relative\" data-slot=\"status-menu\" ref={statusRef}>\r\n          <button\r\n            onClick={() => setStatusMenuOpen(v => !v)}\r\n            className=\"rounded-xl border border-black/10 bg-white px-3 py-2 text-sm dark:border-white/10 dark:bg-white/5 text-foreground\"\r\n            aria-haspopup=\"menu\"\r\n            aria-expanded={statusMenuOpen}\r\n          >\r\n            {status === '' ? 'Todos os Status' : getStatusLabel(status)}\r\n            <span className=\"ml-2\">▾</span>\r\n          </button>\r\n          {statusMenuOpen && (\r\n            <div className=\"absolute left-0 top-full mt-1 w-40 rounded-lg border border-black/10 bg-white shadow-lg dark:border-white/10 dark:bg-gray-800 z-20\">\r\n              <button className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100\" onClick={() => { onStatus(''); setStatusMenuOpen(false); }}>Todos</button>\r\n              <button className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100\" onClick={() => { onStatus('RASCUNHO'); setStatusMenuOpen(false); }}>Rascunho</button>\r\n              <button className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100\" onClick={() => { onStatus('ENVIADA'); setStatusMenuOpen(false); }}>Enviada</button>\r\n              <button className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100\" onClick={() => { onStatus('ASSINADA'); setStatusMenuOpen(false); }}>Assinada</button>\r\n              <button className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100\" onClick={() => { onStatus('APROVADA'); setStatusMenuOpen(false); }}>Aprovada</button>\r\n              <button className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100\" onClick={() => { onStatus('CANCELADA'); setStatusMenuOpen(false); }}>Cancelada</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"relative\" data-slot=\"cliente-menu\" ref={clienteRef}>\r\n          <button\r\n            onClick={() => setClienteMenuOpen(v => !v)}\r\n            className=\"rounded-xl border border-black/10 bg-white px-3 py-2 text-sm dark:border-white/10 dark:bg-white/5 text-foreground\"\r\n            aria-haspopup=\"menu\"\r\n            aria-expanded={clienteMenuOpen}\r\n          >\r\n            {getClienteLabel(clienteId)}\r\n            <span className=\"ml-2\">▾</span>\r\n          </button>\r\n          {clienteMenuOpen && (\r\n            <div className=\"absolute left-0 top-full mt-1 w-64 rounded-lg border border-black/10 bg-white shadow-lg dark:border-white/10 dark:bg-gray-800 z-20 max-h-60 overflow-y-auto\">\r\n              <button className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100\" onClick={() => { onClienteId(''); setClienteMenuOpen(false); }}>Todos os Clientes</button>\r\n              {clientes.map((cliente) => (\r\n                <button key={cliente.id} className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-100\" onClick={() => { onClienteId(cliente.id); setClienteMenuOpen(false); }}>{cliente.nome}</button>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex items-center gap-2\">\r\n        {/* seletor de escopo de exportação (quando suportado) */}\r\n        {onScopeChange && (\r\n          <select\r\n            value={scope}\r\n            onChange={(e) => onScopeChange(e.target.value as 'selected' | 'allFiltered')}\r\n            className=\"rounded-2xl border border-black/10 bg-white px-3 py-2 text-sm dark:border-white/10 dark:bg-white/5\"\r\n            title=\"Escopo de exportação\"\r\n          >\r\n            <option value=\"selected\">Selecionados</option>\r\n            <option value=\"allFiltered\">Todos os filtrados</option>\r\n          </select>\r\n        )}\r\n\r\n        <div className=\"relative\" ref={exportRef}>\r\n          <button\r\n            onClick={() => setShowExportMenu(!showExportMenu)}\r\n            disabled={loading || exporting}\r\n            className=\"rounded-2xl border border-black/10 bg-white px-3 py-2 text-sm hover:bg-black/5 disabled:opacity-50 dark:border-white/10 dark:bg-white/5 flex items-center gap-1\"\r\n          >\r\n            <Download className=\"h-4 w-4\" />\r\n            {exporting ? 'Exportando…' : 'Exportar'}\r\n            <ChevronDown className=\"h-3 w-3\" />\r\n          </button>\r\n\r\n          {showExportMenu && (\r\n            <div className=\"absolute right-0 top-full mt-1 w-40 rounded-lg border border-black/10 bg-white shadow-lg dark:border-white/10 dark:bg-gray-800 z-10\">\r\n              <button\r\n                onClick={() => handleExport('csv')}\r\n                className=\"w-full px-4 py-3 text-left text-sm hover:bg-gray-100 rounded-t-lg flex items-center gap-2\"\r\n              >\r\n                <span>📊</span>\r\n                <span>Exportar CSV</span>\r\n              </button>\r\n              <button\r\n                onClick={() => handleExport('pdf')}\r\n                className=\"w-full px-4 py-3 text-left text-sm hover:bg-gray-100 rounded-b-lg flex items-center gap-2\"\r\n              >\r\n                <span>📄</span>\r\n                <span>Exportar PDF</span>\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {showNew && (\r\n          <Link href=\"/propostas/nova\" className=\"rounded-2xl bg-[#0098DA] px-4 py-2 text-sm text-white shadow hover:brightness-110 inline-flex items-center gap-1\">\r\n            <Plus className=\"mr-1 inline h-4 w-4\" />\r\n            Nova Proposta\r\n          </Link>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"text-xs opacity-60\">{total.toLocaleString(\"pt-BR\")} resultado(s)</div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\components\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\pages\\ListPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useMemo' is defined but never used.","line":3,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'runBulkAction' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'needsExportWarning' is defined but never used.","line":9,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'confirm' is assigned a value but never used.","line":16,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2150,2153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2150,2153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2372,2375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2372,2375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2941,2944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2941,2944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3917,3920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3917,3920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4523,4526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4523,4526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5079,5082],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5079,5082],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/modules/propostas/pages/ListPage.tsx\r\n\"use client\";\r\nimport { useEffect, useMemo, useState, useCallback } from \"react\";\r\nimport Link from \"next/link\";\r\nimport Toolbar from \"../components/Toolbar\";\r\nimport { Pagination } from \"@/modules/clientes/ui/Pagination\";\r\nimport PropostasTable from \"../components/PropostasTable\";\r\nimport { getPropostas, deleteProposta, duplicateProposta, sendProposta } from \"../services/propostasApi\";\r\nimport { runBulkAction, needsExportWarning } from \"../services/bulkService\";\r\nimport { useConfirm } from \"@/components/ui/ConfirmDialog\";\r\nimport type { PropostaDTO } from \"../services/propostasApi\";\r\nimport { Panel } from \"@/components/GladPros\";\r\nimport { useToast } from \"@/components/ui/Toaster\";\r\n\r\nexport default function PropostasListPage() {\r\n  const { confirm, Dialog } = useConfirm();\r\n  const { showToast } = useToast();\r\n  \r\n  // Filters and pagination\r\n  const [q, setQ] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\"); // Show all by default\r\n  const [clienteId, setClienteId] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [pageSize, setPageSize] = useState(10);\r\n  const [total, setTotal] = useState(0);\r\n  \r\n  // Data and UI state\r\n  const [data, setData] = useState<PropostaDTO[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\r\n  const [exportScope, setExportScope] = useState<'selected' | 'allFiltered'>('allFiltered');\r\n  const [sortKey, setSortKey] = useState<'numeroProposta' | 'titulo' | 'cliente' | 'status' | 'valor' | 'criadoEm'>('criadoEm');\r\n  const [sortDir, setSortDir] = useState<'asc' | 'desc'>('desc');\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [clientes, setClientes] = useState<Array<{id: string, nome: string}>>([]);\r\n  \r\n  // Debounce search\r\n  useEffect(() => {\r\n    const t = setTimeout(() => setQ(searchTerm), 350);\r\n    return () => clearTimeout(t);\r\n  }, [searchTerm]);\r\n\r\n  const load = useCallback(async (signal?: AbortSignal) => {\r\n    setLoading(true);\r\n    try {\r\n      const res = await getPropostas({ \r\n        q, \r\n        status: status as any, \r\n        clienteId: clienteId || undefined,\r\n        page, \r\n        pageSize,\r\n        sortKey,\r\n        sortDir\r\n      }, signal);\r\n      \r\n      setData(res.data);\r\n      setTotal(res.total);\r\n    } catch (error: any) {\r\n      if (error.name !== 'AbortError') {\r\n        console.error('Erro ao carregar propostas:', error);\r\n        // Remover showToast das dependências para evitar loop infinito\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [q, status, clienteId, page, pageSize, sortKey, sortDir]); // Remover showToast\r\n\r\n  const loadClientes = useCallback(async () => {\r\n    try {\r\n      const response = await fetch('/api/clientes?pageSize=1000');\r\n      if (response.ok) {\r\n        const { data } = await response.json();\r\n        setClientes(data.map((c: any) => ({ id: c.id, nome: c.nome })));\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao carregar clientes:', error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n    load(controller.signal);\r\n    return () => controller.abort();\r\n  }, [load]);\r\n\r\n  useEffect(() => {\r\n    loadClientes();\r\n  }, [loadClientes]);\r\n\r\n  // Reset page when filters change\r\n  useEffect(() => {\r\n    setPage(1);\r\n  }, [q, status, clienteId]);\r\n\r\n  // Clear selection when data changes\r\n  useEffect(() => {\r\n    setSelectedIds([]);\r\n  }, [data]);\r\n\r\n  const handleDelete = async (id: string) => {\r\n    try {\r\n      await deleteProposta(id);\r\n      showToast({ \r\n        title: 'Sucesso', \r\n        message: 'Proposta deletada com sucesso', \r\n        type: 'success' \r\n      });\r\n      // Usar controlador para evitar requests desnecessários\r\n      const controller = new AbortController();\r\n      load(controller.signal);\r\n    } catch (error: any) {\r\n      showToast({ \r\n        title: 'Erro', \r\n        message: error.message || 'Erro ao deletar proposta', \r\n        type: 'error' \r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDuplicate = async (id: string) => {\r\n    try {\r\n      const newProposta = await duplicateProposta(id);\r\n      showToast({ \r\n        title: 'Sucesso', \r\n        message: `Proposta duplicada: ${newProposta.numeroProposta}`, \r\n        type: 'success' \r\n      });\r\n      // Usar controlador para evitar requests desnecessários\r\n      const controller = new AbortController();\r\n      load(controller.signal);\r\n    } catch (error: any) {\r\n      showToast({ \r\n        title: 'Erro', \r\n        message: error.message || 'Erro ao duplicar proposta', \r\n        type: 'error' \r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSend = async (id: string) => {\r\n    try {\r\n      await sendProposta(id);\r\n      showToast({ \r\n        title: 'Sucesso', \r\n        message: 'Proposta enviada com sucesso', \r\n        type: 'success' \r\n      });\r\n      // Usar controlador para evitar requests desnecessários\r\n      const controller = new AbortController();\r\n      load(controller.signal);\r\n    } catch (error: any) {\r\n      showToast({ \r\n        title: 'Erro', \r\n        message: error.message || 'Erro ao enviar proposta', \r\n        type: 'error' \r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSort = (key: 'numeroProposta' | 'titulo' | 'cliente' | 'status' | 'valor' | 'criadoEm', dir: 'asc' | 'desc') => {\r\n    setSortKey(key);\r\n    setSortDir(dir);\r\n  };\r\n\r\n  const totalPages = Math.ceil(total / pageSize);\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h2 className=\"font-title text-xl\">Propostas</h2>\r\n  <Link href=\"/propostas/nova\" className=\"rounded-2xl bg-[#0098DA] px-4 py-2 text-sm text-white hover:brightness-110\">Nova Proposta</Link>\r\n      </div>\r\n\r\n      <Toolbar\r\n        q={searchTerm}\r\n        onQ={setSearchTerm}\r\n        status={status}\r\n        onStatus={setStatus}\r\n        clienteId={clienteId}\r\n        onClienteId={setClienteId}\r\n        total={total}\r\n        propostas={data}\r\n        scope={exportScope}\r\n        selectedCount={selectedIds.length}\r\n        onScopeChange={setExportScope}\r\n        loading={loading}\r\n        clientes={clientes}\r\n  showNew={false}\r\n      />\r\n\r\n      <Panel title=\"Lista de Propostas\">\r\n        {loading ? (\r\n          <div className=\"p-6 text-sm opacity-60\">Carregando…</div>\r\n        ) : (\r\n          <PropostasTable\r\n            data={data}\r\n            loading={loading}\r\n            selectedIds={selectedIds}\r\n            onSelectionChange={setSelectedIds}\r\n            onDelete={handleDelete}\r\n            onDuplicate={handleDuplicate}\r\n            onSend={handleSend}\r\n            sortKey={sortKey}\r\n            sortDir={sortDir}\r\n            onSort={handleSort}\r\n          />\r\n        )}\r\n      </Panel>\r\n      <Dialog />\r\n\r\n      {totalPages > 1 && (\r\n        <Pagination\r\n          currentPage={page}\r\n          totalPages={totalPages}\r\n          pageSize={pageSize}\r\n          total={total}\r\n          onPageChange={setPage}\r\n          onPageSizeChange={(newPageSize) => {\r\n            setPageSize(newPageSize);\r\n            setPage(1);\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\services\\bulkService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\services\\exportService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\services\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\services\\propostasApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PropostaWithRelations' is defined but never used.","line":2,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2154,2157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2154,2157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/modules/propostas/services/propostasApi.ts\r\nimport type { PropostaWithRelations, StatusProposta } from '@/types/propostas'\r\n\r\nexport interface PropostaDTO {\r\n  id: string\r\n  numeroProposta: string\r\n  titulo: string\r\n  status: StatusProposta\r\n  precoPropostaCliente?: number\r\n  valorEstimado: number\r\n  criadoEm: string\r\n  validadeProposta?: string\r\n  assinadoEm?: string\r\n  cliente: {\r\n    id: string\r\n    nome: string\r\n    email: string\r\n  }\r\n  contatoNome?: string\r\n  contatoEmail?: string\r\n  localExecucaoEndereco?: string\r\n}\r\n\r\nexport interface PropostasResponse {\r\n  data: PropostaDTO[]\r\n  total: number\r\n  page: number\r\n  pageSize: number\r\n  totalPages: number\r\n}\r\n\r\nexport interface PropostasFilters {\r\n  q?: string\r\n  status?: StatusProposta | 'all'\r\n  clienteId?: string\r\n  page?: number\r\n  pageSize?: number\r\n  sortKey?: 'numeroProposta' | 'titulo' | 'cliente' | 'status' | 'valor' | 'criadoEm'\r\n  sortDir?: 'asc' | 'desc'\r\n}\r\n\r\nexport async function getPropostas(\r\n  filters: PropostasFilters,\r\n  signal?: AbortSignal\r\n): Promise<PropostasResponse> {\r\n  // Use the main, robust /api/propostas endpoint and map its response\r\n  const params = new URLSearchParams()\r\n  if (filters.q) params.append('search', filters.q)\r\n  if (filters.status && filters.status !== 'all') params.append('status', filters.status)\r\n  if (filters.clienteId) params.append('clienteId', filters.clienteId)\r\n  if (filters.page) params.append('page', filters.page.toString())\r\n  if (filters.pageSize) params.append('pageSize', filters.pageSize.toString())\r\n  if (filters.sortKey) params.append('sortKey', filters.sortKey as string)\r\n  if (filters.sortDir) params.append('sortDir', filters.sortDir)\r\n\r\n  const response = await fetch(`/api/propostas?${params.toString()}`, {\r\n    signal,\r\n    headers: { 'Content-Type': 'application/json' }\r\n  })\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Erro ${response.status}: ${response.statusText}`)\r\n  }\r\n\r\n  const body = await response.json()\r\n\r\n  // Map server shape { items, pagination } -> PropostasResponse\r\n  const items = body.items || []\r\n  const pagination = body.pagination || {}\r\n\r\n  const data = items.map((p: any) => ({\r\n    id: p.id,\r\n    numeroProposta: p.numeroProposta,\r\n    titulo: p.titulo,\r\n    status: p.status,\r\n    precoPropostaCliente: p.precoPropostaCliente,\r\n    valorEstimado: p.valorEstimado || 0,\r\n    criadoEm: p.criadoEm,\r\n    validadeProposta: p.validadeProposta,\r\n    assinadoEm: p.assinadoEm,\r\n    cliente: {\r\n      id: p.cliente?.id || '',\r\n      nome: p.cliente?.nomeCompleto || p.cliente?.razaoSocial || '',\r\n      email: p.cliente?.email || ''\r\n    },\r\n    contatoNome: p.contatoNome,\r\n    contatoEmail: p.contatoEmail,\r\n    localExecucaoEndereco: p.localExecucaoEndereco\r\n  }))\r\n\r\n  const total = typeof pagination.total === 'number' ? pagination.total : 0\r\n  const page = filters.page || 1\r\n  const pageSize = filters.pageSize || 10\r\n  const totalPages = pagination.hasNext ? page + 1 : Math.ceil(total / pageSize)\r\n\r\n  return { data, total, page, pageSize, totalPages }\r\n}\r\n\r\nexport async function deleteProposta(id: string): Promise<void> {\r\n  const response = await fetch(`/api/propostas/${id}`, {\r\n    method: 'DELETE',\r\n  })\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json()\r\n    throw new Error(error.error || 'Erro ao deletar proposta')\r\n  }\r\n}\r\n\r\nexport async function duplicateProposta(id: string): Promise<PropostaDTO> {\r\n  const response = await fetch(`/api/propostas/${id}/duplicate`, {\r\n    method: 'POST',\r\n  })\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json()\r\n    throw new Error(error.error || 'Erro ao duplicar proposta')\r\n  }\r\n\r\n  return response.json()\r\n}\r\n\r\nexport async function sendProposta(id: string): Promise<void> {\r\n  const response = await fetch(`/api/propostas/${id}/send`, {\r\n    method: 'POST',\r\n  })\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json()\r\n    throw new Error(error.error || 'Erro ao enviar proposta')\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\ClientPropostaView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Textarea' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Separator' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Cliente' is defined but never used.","line":15,"column":72,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":79},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Phone' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MapPin' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4145,4148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4145,4148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4583,4586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4583,4586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":355,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":355,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12667,12670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12667,12670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":364,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":364,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13152,13155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13152,13155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":366,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":366,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13223,13226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13223,13226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":368,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13366,13369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13366,13369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/navigation'\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Textarea } from '@/components/ui/textarea'\r\nimport { Checkbox } from '@/components/ui/checkbox'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { Separator } from '@/components/ui/separator'\r\nimport SignaturePad from '@/components/ui/SignaturePad'\r\nimport PDFExportButton from '@/components/ui/PDFExportButton'\r\nimport { formatCurrency, formatDate } from '@/lib/utils'\r\nimport { StatusProposta, PropostaWithRelations as PropostaWithDetails, Cliente } from '@/types/propostas'\r\nimport { \r\n  FileText,\r\n  Calendar,\r\n  DollarSign,\r\n  Building2,\r\n  Mail,\r\n  Phone,\r\n  MapPin,\r\n  CheckCircle,\r\n  AlertCircle\r\n} from 'lucide-react'\r\n\r\ninterface ClientPropostaViewProps {\r\n  proposta: PropostaWithDetails\r\n  token: string\r\n}\r\n\r\nexport default function ClientPropostaView({ proposta, token }: ClientPropostaViewProps) {\r\n  const [loading, setLoading] = useState(false)\r\n  const [signature, setSignature] = useState('')\r\n  const [termsAccepted, setTermsAccepted] = useState(false)\r\n  const [clientName, setClientName] = useState('')\r\n  const router = useRouter()\r\n\r\n  useEffect(() => {\r\n    // Pre-fill client name\r\n    if (proposta.cliente) {\r\n      setClientName(proposta.cliente.nome || '')\r\n    }\r\n  }, [proposta.cliente])\r\n\r\n  const handleSign = async () => {\r\n    if (!signature.trim() || !termsAccepted || !clientName.trim()) {\r\n      alert('Por favor, preencha todos os campos obrigatórios e assine.')\r\n      return\r\n    }\r\n\r\n    try {\r\n      setLoading(true)\r\n\r\n      const response = await fetch(`/api/client/proposta/${token}/sign`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          assinaturaCliente: clientName,\r\n          assinaturaImagem: signature,\r\n          aceiteTermos: termsAccepted,\r\n          ip: await getClientIP(),\r\n          userAgent: navigator.userAgent\r\n        })\r\n      })\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json()\r\n        throw new Error(error.message || 'Erro ao assinar proposta')\r\n      }\r\n\r\n      alert('Proposta assinada com sucesso!')\r\n      router.refresh()\r\n\r\n    } catch (error) {\r\n      console.error('Error signing proposal:', error)\r\n      alert('Erro ao assinar proposta: ' + (error instanceof Error ? error.message : 'Erro desconhecido'))\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const getClientIP = async () => {\r\n    try {\r\n      const response = await fetch('https://api.ipify.org?format=json')\r\n      const data = await response.json()\r\n      return data.ip\r\n    } catch {\r\n      return 'unknown'\r\n    }\r\n  }\r\n\r\n  const getStatusColor = (status: StatusProposta) => {\r\n    switch (status) {\r\n      case StatusProposta.RASCUNHO:\r\n        return 'bg-gray-100 text-gray-800'\r\n      case StatusProposta.ENVIADA:\r\n        return 'bg-blue-100 text-blue-800'\r\n      case StatusProposta.ASSINADA:\r\n        return 'bg-green-100 text-green-800'\r\n      case StatusProposta.APROVADA:\r\n        return 'bg-emerald-100 text-emerald-800'\r\n      case StatusProposta.CANCELADA:\r\n        return 'bg-red-100 text-red-800'\r\n      default:\r\n        return 'bg-gray-100 text-gray-800'\r\n    }\r\n  }\r\n\r\n  const canSign = proposta.status === StatusProposta.ENVIADA\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-8\">\r\n      <div className=\"container mx-auto px-4 max-w-4xl\">\r\n        {/* Header with Export Button */}\r\n        <div className=\"flex justify-between items-start mb-8\">\r\n          <div>\r\n            <div className=\"flex items-center gap-4 mb-4\">\r\n              <FileText className=\"h-8 w-8 text-blue-600\" />\r\n              <div>\r\n                <h1 className=\"text-3xl font-bold text-foreground dark:text-white\">\r\n                  Proposta Comercial\r\n                </h1>\r\n                <p className=\"text-gray-600\">\r\n                  {(proposta as any).numeroProposta} • {formatDate(proposta.createdAt)}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            \r\n            <Badge className={getStatusColor(proposta.status)}>\r\n              {proposta.status}\r\n            </Badge>\r\n          </div>\r\n\r\n          <div className=\"flex gap-2\">\r\n            <PDFExportButton\r\n              elementId=\"proposta-content\"\r\n              filename={`proposta-${(proposta as any).numeroProposta}.pdf`}\r\n              className=\"hidden print:hidden\"\r\n            >\r\n              <FileText className=\"h-4 w-4 mr-2\" />\r\n              Baixar PDF\r\n            </PDFExportButton>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Main Content */}\r\n        <div id=\"proposta-content\">\r\n        \r\n        {/* Client Info */}\r\n        <Card className=\"mb-6\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Building2 className=\"h-5 w-5\" />\r\n              Informações do Cliente\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <p className=\"font-semibold\">\r\n                  {proposta.cliente?.nome}\r\n                </p>\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Mail className=\"h-4 w-4 text-gray-500\" />\r\n                  <span>{proposta.cliente?.email}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Proposal Details */}\r\n        <Card className=\"mb-6\">\r\n          <CardHeader>\r\n            <CardTitle>Detalhes da Proposta</CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div>\r\n              <h4 className=\"font-semibold mb-2\">Descrição</h4>\r\n              <p>{proposta.descricao}</p>\r\n              {proposta.detalhes && (\r\n                <p className=\"text-gray-600 mt-2\">{proposta.detalhes}</p>\r\n              )}\r\n            </div>\r\n\r\n            {proposta.valorEstimado && (\r\n              <div>\r\n                <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\r\n                  <DollarSign className=\"h-4 w-4\" />\r\n                  Valor Estimado\r\n                </h4>\r\n                <p className=\"text-2xl font-bold text-green-600\">\r\n                  {formatCurrency(proposta.valorEstimado)}\r\n                </p>\r\n              </div>\r\n            )}\r\n\r\n            {proposta.permite === 'SIM' && proposta.quaisPermites && (\r\n              <div>\r\n                <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\r\n                  <AlertCircle className=\"h-4 w-4 text-yellow-500\" />\r\n                  Permites Necessários\r\n                </h4>\r\n                <p>{proposta.quaisPermites}</p>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Etapas */}\r\n        {proposta.etapas && proposta.etapas.length > 0 && (\r\n          <Card className=\"mb-6\">\r\n            <CardHeader>\r\n              <CardTitle>Etapas do Trabalho</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                {proposta.etapas.map((etapa, index) => (\r\n                  <div key={etapa.id} className=\"border-l-4 border-l-blue-500 pl-4\">\r\n                    <div className=\"flex items-start justify-between\">\r\n                      <div>\r\n                        <h4 className=\"font-semibold\">\r\n                          {index + 1}. {etapa.titulo}\r\n                        </h4>\r\n                        <p className=\"text-gray-600 mt-1\">{etapa.descricao}</p>\r\n                      </div>\r\n                      <Badge variant=\"outline\">\r\n                        {etapa.status}\r\n                      </Badge>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Materiais */}\r\n        {proposta.materiais && proposta.materiais.length > 0 && (\r\n          <Card className=\"mb-6\">\r\n            <CardHeader>\r\n              <CardTitle>Lista de Materiais</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"overflow-x-auto\">\r\n                <table className=\"w-full\">\r\n                  <thead>\r\n                    <tr className=\"border-b\">\r\n                      <th className=\"text-left py-2\">Item</th>\r\n                      <th className=\"text-left py-2\">Quantidade</th>\r\n                      <th className=\"text-left py-2\">Unidade</th>\r\n                      {proposta.materiais?.some(m => m.valorUnitario) && (\r\n                        <th className=\"text-right py-2\">Valor Unit.</th>\r\n                      )}\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {proposta.materiais.map((material) => (\r\n                      <tr key={material.id} className=\"border-b\">\r\n                        <td className=\"py-2\">\r\n                          <div>\r\n                            <p className=\"font-medium\">{material.nome}</p>\r\n                            {material.descricao && (\r\n                              <p className=\"text-sm text-gray-500\">\r\n                                {material.descricao}\r\n                              </p>\r\n                            )}\r\n                          </div>\r\n                        </td>\r\n                        <td className=\"py-2\">{material.quantidade}</td>\r\n                        <td className=\"py-2\">{material.unidade}</td>\r\n                        {proposta.materiais?.some(m => m.valorUnitario) && (\r\n                          <td className=\"py-2 text-right\">\r\n                            {material.valorUnitario ? \r\n                              formatCurrency(material.valorUnitario) : \r\n                              '-'\r\n                            }\r\n                          </td>\r\n                        )}\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Signature Section */}\r\n        {canSign && (\r\n          <Card className=\"mb-6\">\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\r\n                Assinatura Digital\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-6\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-2\">\r\n                  Nome do Responsável *\r\n                </label>\r\n                <Input\r\n                  value={clientName}\r\n                  onChange={(e) => setClientName(e.target.value)}\r\n                  placeholder=\"Digite seu nome completo\"\r\n                  required\r\n                />\r\n              </div>\r\n\r\n              <SignaturePad\r\n                onSignature={setSignature}\r\n                width={600}\r\n                height={200}\r\n                className=\"w-full\"\r\n              />\r\n\r\n              <div className=\"flex items-start space-x-2\">\r\n                <Checkbox\r\n                  id=\"terms\"\r\n                  checked={termsAccepted}\r\n                  onCheckedChange={(checked) => setTermsAccepted(checked as boolean)}\r\n                />\r\n                <label\r\n                  htmlFor=\"terms\"\r\n                  className=\"text-sm leading-relaxed cursor-pointer\"\r\n                >\r\n                  Declaro que li, entendi e aceito todos os termos e condições \r\n                  desta proposta comercial. Confirmo que tenho autoridade para \r\n                  assinar em nome da empresa/pessoa mencionada.\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"pt-4\">\r\n                <Button\r\n                  onClick={handleSign}\r\n                  disabled={loading || !signature || !termsAccepted || !clientName.trim()}\r\n                  className=\"w-full\"\r\n                  size=\"lg\"\r\n                >\r\n                  {loading ? 'Processando...' : 'Assinar Proposta'}\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Already Signed */}\r\n        {proposta.status === StatusProposta.ASSINADA && (proposta as any).assinadaEm && (\r\n          <Card className=\"mb-6\">\r\n            <CardContent className=\"pt-6\">\r\n              <div className=\"text-center\">\r\n                <CheckCircle className=\"h-16 w-16 text-green-600 mx-auto mb-4\" />\r\n                <h3 className=\"text-xl font-semibold text-green-800 mb-2\">\r\n                  Proposta Assinada\r\n                </h3>\r\n                <p className=\"text-gray-600\">\r\n                  Esta proposta foi assinada em {formatDate((proposta as any).assinadaEm)}\r\n                </p>\r\n                {(proposta as any).assinaturaResponsavel && (\r\n                  <p className=\"text-sm text-gray-500 mt-2\">\r\n                    Assinado por: {(proposta as any).assinaturaResponsavel}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Footer */}\r\n        <div className=\"text-center text-gray-500 text-sm\">\r\n          <p>GladPros - Sistema de Gestão de Propostas</p>\r\n          <p>Este documento foi gerado automaticamente em {formatDate(new Date())}</p>\r\n        </div>\r\n        \r\n        </div> {/* End of proposta-content */}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\ClientesContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\PropostaForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":3,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ClienteAPI' is defined but never used.","line":33,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'cliente.id', 'debouncedSave', and 'escopo.length'. Either include them or remove the dependency array.","line":173,"column":6,"nodeType":"ArrayExpression","endLine":173,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [cliente.id, debouncedSave, escopo.length, formData]","fix":{"range":[4790,4800],"text":"[cliente.id, debouncedSave, escopo.length, formData]"}}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":251,"column":5,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":251,"endColumn":35,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[7502,7532],"text":"// @ts-expect-error CSS custom props"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":519,"column":152,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":519,"endColumn":155,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22102,22105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22102,22105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":562,"column":130,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":562,"endColumn":133,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24597,24600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24597,24600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport React, { useMemo, useState, useEffect, useCallback } from \"react\";\r\nimport { useRouter } from 'next/navigation'\r\nimport { StatusProposta, StatusPermite } from '@/types/prisma-temp'\r\nimport { useToast } from '@/components/ui/Toaster'\r\nimport { useClientes } from './ClientesContext'\r\nimport { \r\n  gp, \r\n  Label, \r\n  Input, \r\n  Textarea, \r\n  Select, \r\n  Section, \r\n  Badge, \r\n  currency \r\n} from './ui-components'\r\nimport { \r\n  Material, \r\n  Etapa, \r\n  PropostaFormData,\r\n  ClienteInfo,\r\n  PrazosInfo,\r\n  ComerciaisInfo,\r\n  InternoInfo,\r\n  FaturamentoInfo\r\n} from './types'\r\nimport { useCalcularTotais } from './hooks'\r\nimport { useAutoSave } from './useAutoSave'\r\nimport { propostaFormSchema } from './validation'\r\n\r\n// Interface para clientes da API\r\ninterface ClienteAPI {\r\n  id: string\r\n  nomeCompleto?: string\r\n  razaoSocial?: string\r\n  nomeFantasia?: string\r\n  email: string\r\n  telefone?: string\r\n}\r\n\r\nexport default function PropostaFormNova() {\r\n  const [loading, setLoading] = useState(false)\r\n  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle')\r\n  const [status, setStatus] = useState<StatusProposta>(StatusProposta.RASCUNHO)\r\n  const router = useRouter()\r\n  const { showToast } = useToast()\r\n  \r\n  // Usar o contexto de clientes\r\n  const { clientes, loading: clientesLoading, error: clientesError } = useClientes()\r\n\r\n  // Estados do formulário\r\n  const [cliente, setCliente] = useState<ClienteInfo>({\r\n    id: \"\",\r\n    contato_nome: \"\",\r\n    contato_email: \"\",\r\n    contato_telefone: \"\",\r\n    local_endereco: \"\",\r\n    titulo: \"\",\r\n  })\r\n\r\n  const [escopo, setEscopo] = useState(\"\")\r\n\r\n  const [prazos, setPrazos] = useState<PrazosInfo>({\r\n    tempo_para_aceite: 7,\r\n    validade_proposta: \"\",\r\n    prazo_execucao_dias: 5,\r\n    janela: \"\",\r\n    restricoes: \"\",\r\n  })\r\n\r\n  const [permite, setPermite] = useState<StatusPermite>(StatusPermite.NAO_NECESSARIO)\r\n  const [quaisPermites, setQuaisPermites] = useState(\"\")\r\n  const [normas, setNormas] = useState(\"\")\r\n  const [inspecoes, setInspecoes] = useState(\"\")\r\n\r\n  const [comerciais, setComerciais] = useState<ComerciaisInfo>({\r\n    condicoes_pagamento: \"40% na aprovação, 40% após etapa X, 20% na entrega\",\r\n    garantia: \"12 meses mão de obra; 3 meses materiais\",\r\n    exclusoes: \"Demolições estruturais, pintura externa, taxas municipais\",\r\n    condicoes_gerais: \"Serviços conforme normas; atrasos por clima não imputáveis; SLA 48h.\",\r\n    desconto: 0,\r\n  })\r\n\r\n  const [interno, setInterno] = useState<InternoInfo>({\r\n    custo_material: 0,\r\n    custo_mo: 0,\r\n    horas_mo: 0,\r\n    custo_terceiros: 0,\r\n    overhead_pct: 12,\r\n    margem_pct: 20,\r\n    impostos_pct: 0,\r\n    contingencia_pct: 0,\r\n    frete: 0,\r\n  })\r\n\r\n  const [materiais, setMateriais] = useState<Material[]>([\r\n    { \r\n      id: crypto.randomUUID(), \r\n      codigo: \"CABO-14AWG\", \r\n      nome: \"Cabo 14 AWG\", \r\n      quantidade: 120, \r\n      unidade: \"m\", \r\n      preco: 0.35, \r\n      status: \"necessario\" \r\n    },\r\n  ])\r\n\r\n  const [etapas, setEtapas] = useState<Etapa[]>([\r\n    { \r\n      id: crypto.randomUUID(), \r\n      servico: \"Instalação de QDC\", \r\n      descricao: \"Montagem e organização de circuitos.\", \r\n      quantidade: 1, \r\n      unidade: \"serviço\", \r\n      duracaoHoras: 8, \r\n      custoMO: 250, \r\n      status: \"planejada\" \r\n    },\r\n  ])\r\n\r\n  const [faturamento, setFaturamento] = useState<FaturamentoInfo>({\r\n    gatilho: \"na_aprovacao\",\r\n    percentual_sinal: 40,\r\n    forma_preferida: \"Invoice\",\r\n    instrucoes: \"Pagamento via invoice até 3 dias após emissão.\",\r\n  })\r\n\r\n  const [obsCliente, setObsCliente] = useState(\"\")\r\n  const [obsInternas, setObsInternas] = useState(\"\")\r\n\r\n  // Exibir erro de clientes se houver\r\n  useEffect(() => {\r\n    if (clientesError) {\r\n      showToast({\r\n        title: 'Erro',\r\n        message: 'Erro ao carregar lista de clientes',\r\n        type: 'error'\r\n      })\r\n    }\r\n  }, [clientesError, showToast])\r\n\r\n  // Cálculos automáticos\r\n  const totais = useCalcularTotais(materiais, interno)\r\n\r\n  // Auto-save automático\r\n  const formData: PropostaFormData = useMemo(() => ({\r\n    cliente,\r\n    escopo,\r\n    prazos,\r\n    permite,\r\n    quaisPermites,\r\n    normas,\r\n    inspecoes,\r\n    materiais,\r\n    etapas,\r\n    comerciais,\r\n    interno,\r\n    faturamento,\r\n    obsCliente,\r\n    obsInternas,\r\n    status\r\n  }), [cliente, escopo, prazos, permite, quaisPermites, normas, inspecoes, materiais, etapas, comerciais, interno, faturamento, obsCliente, obsInternas, status])\r\n\r\n  const { debouncedSave } = useAutoSave(formData, !loading)\r\n\r\n  // Trigger auto-save quando dados mudam (com debounce interno)\r\n  useEffect(() => {\r\n    // Só salvar se tiver dados mínimos\r\n    if (cliente.id && escopo.length > 5) {\r\n      debouncedSave(formData)\r\n    }\r\n  }, [formData]) // Removendo debouncedSave das dependências para evitar re-execuções desnecessárias\r\n\r\n  // Handlers utilitários\r\n  const addMaterial = () =>\r\n    setMateriais((arr) => [\r\n      ...arr,\r\n      { id: crypto.randomUUID(), codigo: \"\", nome: \"\", quantidade: 1, unidade: \"un\", status: \"necessario\" },\r\n    ])\r\n  const rmMaterial = (id: string) => setMateriais((arr) => arr.filter((m) => m.id !== id))\r\n\r\n  const addEtapa = () =>\r\n    setEtapas((arr) => [\r\n      ...arr,\r\n      { id: crypto.randomUUID(), servico: \"\", descricao: \"\", quantidade: 1, unidade: \"serviço\", status: \"planejada\" },\r\n    ])\r\n  const rmEtapa = (id: string) => setEtapas((arr) => arr.filter((e) => e.id !== id))\r\n\r\n  // Handler para mudança de cliente\r\n  const handleClienteChange = (clienteId: string) => {\r\n    const clienteSelecionado = clientes.find(c => c.id === clienteId)\r\n    if (clienteSelecionado) {\r\n      setCliente(prev => ({\r\n        ...prev,\r\n        id: clienteId,\r\n        contato_nome: clienteSelecionado.nomeCompleto || clienteSelecionado.razaoSocial || clienteSelecionado.nomeFantasia || '',\r\n        contato_email: clienteSelecionado.email,\r\n        contato_telefone: clienteSelecionado.telefone || '',\r\n      }))\r\n    }\r\n  }\r\n\r\n  // Salvar proposta\r\n  const handleSalvar = async (isDraft = false) => {\r\n    setSaveStatus('saving')\r\n    setLoading(true)\r\n    try {\r\n      // Validar dados\r\n      const validatedData = propostaFormSchema.parse(formData)\r\n\r\n      const response = await fetch('/api/propostas', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(validatedData)\r\n      })\r\n\r\n      if (response.ok) {\r\n        const result = await response.json()\r\n        setSaveStatus('saved')\r\n        showToast({\r\n          title: 'Sucesso',\r\n          message: isDraft ? 'Rascunho salvo com sucesso!' : 'Proposta criada com sucesso!',\r\n          type: 'success'\r\n        })\r\n        \r\n        if (!isDraft && result.proposta?.id) {\r\n          router.push(`/propostas/${result.proposta.id}`)\r\n        }\r\n      } else {\r\n        const errorData = await response.json()\r\n        throw new Error(errorData.message || 'Erro ao salvar proposta')\r\n      }\r\n    } catch (error) {\r\n      setSaveStatus('error')\r\n      console.error('Erro ao salvar:', error)\r\n      showToast({\r\n        title: 'Erro',\r\n        message: error instanceof Error ? error.message : 'Erro ao salvar proposta',\r\n        type: 'error'\r\n      })\r\n    } finally {\r\n      setLoading(false)\r\n      // Reset status após 3 segundos\r\n      setTimeout(() => setSaveStatus('idle'), 3000)\r\n    }\r\n  }\r\n\r\n  // Root styles vars for brand colors\r\n  const rootStyle: React.CSSProperties = {\r\n    // @ts-ignore CSS custom props\r\n    \"--gp-blue\": gp.blue,\r\n    \"--gp-orange\": gp.orange,\r\n  }\r\n\r\n  const statusBadgeColor = status === StatusProposta.PENDENTE_APROVACAO ? \"orange\" : status === StatusProposta.APROVADA ? \"green\" : \"red\"\r\n  const statusLabel = status === StatusProposta.RASCUNHO ? \"Rascunho\" : \r\n                     status === StatusProposta.PENDENTE_APROVACAO ? \"Aguardando\" : \r\n                     status === StatusProposta.APROVADA ? \"Aprovada\" : \"Cancelada\"\r\n\r\n  return (\r\n    <div style={rootStyle} className=\"min-h-screen bg-slate-50 dark:bg-transparent\">\r\n      {/* Page header: title on its own line; actions right-aligned on the line below */}\r\n      <div className=\"mx-auto max-w-8xl px-6 py-4\">\r\n        <div>\r\n          <h2 className=\"font-title text-xl\">Proposta</h2>\r\n          <p className=\"mt-1 text-sm text-slate-500\">Preencha os campos para gerar uma proposta completa e profissional.</p>\r\n        </div>\r\n        <div className=\"mt-3 flex justify-end items-center gap-3\">\r\n          {status === StatusProposta.RASCUNHO && (\r\n            <div className=\"hidden sm:flex items-center rounded-lg bg-yellow-50 px-3 py-1 text-xs font-medium text-yellow-800 dark:bg-yellow-900/30\">Rascunho</div>\r\n          )}\r\n          {saveStatus === 'saving' && <span className=\"text-xs text-slate-500\">Salvando…</span>}\r\n          {saveStatus === 'saved' && <span className=\"text-xs text-emerald-600\">✓ Salvo</span>}\r\n          {saveStatus === 'error' && <span className=\"text-xs text-red-600\">✗ Erro</span>}\r\n          <button\r\n            onClick={() => handleSalvar(true)}\r\n            disabled={loading || clientesLoading}\r\n            className=\"rounded-xl border border-slate-200 dark:border-white/10 bg-white dark:bg-white/5 px-4 py-2 text-sm font-medium text-slate-700 dark:text-white shadow-sm hover:bg-slate-50 disabled:opacity-50\"\r\n          >\r\n            {loading ? 'Salvando...' : 'Salvar rascunho'}\r\n          </button>\r\n          <button\r\n            onClick={() => handleSalvar(false)}\r\n            disabled={loading || clientesLoading}\r\n            className=\"rounded-xl bg-[var(--gp-blue)] px-4 py-2 text-sm font-semibold text-white shadow-sm hover:opacity-95 disabled:opacity-50\"\r\n          >\r\n            {loading ? 'Criando...' : 'Criar Proposta'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <main className=\"mx-auto grid max-w-8xl grid-cols-1 gap-6 px-6 py-6 lg:grid-cols-4\">\r\n        {/* Left column (form) */}\r\n  <div className=\"order-2 flex flex-col gap-6 lg:order-1 lg:col-span-3\">\r\n          <Section title=\"Dados Cadastrais\" subtitle=\"Dados do cliente e do local de execução.\">\r\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\r\n              <div>\r\n                <Label required>Cliente</Label>\r\n                {clientesLoading ? (\r\n                  <div className=\"flex items-center gap-2 rounded-xl border border-slate-200 bg-slate-50 px-3 py-2\">\r\n                    <div className=\"h-4 w-4 animate-spin rounded-full border border-slate-400 border-t-transparent\"></div>\r\n                    <span className=\"text-sm text-slate-500\">Carregando clientes...</span>\r\n                  </div>\r\n                ) : (\r\n                  <Select \r\n                    value={cliente.id} \r\n                    onChange={(e) => handleClienteChange(e.target.value)}\r\n                    disabled={clientesLoading}\r\n                  >\r\n                    <option value=\"\">Selecionar cliente…</option>\r\n                    {clientes.map(c => (\r\n                      <option key={c.id} value={c.id}>\r\n                        {c.nomeCompleto || c.razaoSocial || c.nomeFantasia} - {c.email}\r\n                      </option>\r\n                    ))}\r\n                  </Select>\r\n                )}\r\n              </div>\r\n              <div>\r\n                <Label required>Título</Label>\r\n                <Input \r\n                  placeholder=\"Reforma elétrica apto 12B\" \r\n                  value={cliente.titulo} \r\n                  onChange={(e) => setCliente({ ...cliente, titulo: e.target.value })} \r\n                />\r\n              </div>\r\n              <div>\r\n                <Label required>Contato – Nome</Label>\r\n                <Input \r\n                  value={cliente.contato_nome} \r\n                  onChange={(e) => setCliente({ ...cliente, contato_nome: e.target.value })} \r\n                />\r\n              </div>\r\n              <div>\r\n                <Label required>Contato – E‑mail</Label>\r\n                <Input \r\n                  type=\"email\" \r\n                  value={cliente.contato_email} \r\n                  onChange={(e) => setCliente({ ...cliente, contato_email: e.target.value })} \r\n                />\r\n              </div>\r\n              <div>\r\n                <Label>Contato – Telefone</Label>\r\n                <Input \r\n                  value={cliente.contato_telefone} \r\n                  onChange={(e) => setCliente({ ...cliente, contato_telefone: e.target.value })} \r\n                />\r\n              </div>\r\n              <div className=\"md:col-span-2\">\r\n                <Label required>Endereço de execução</Label>\r\n                <Input \r\n                  placeholder=\"Rua, nº, cidade, estado, CEP\" \r\n                  value={cliente.local_endereco} \r\n                  onChange={(e) => setCliente({ ...cliente, local_endereco: e.target.value })} \r\n                />\r\n              </div>\r\n              <div className=\"md:col-span-2\">\r\n                <Label required>Escopo (resumo)</Label>\r\n                <Textarea \r\n                  placeholder=\"Descreva o escopo geral do serviço…\" \r\n                  value={escopo}\r\n                  onChange={(e) => setEscopo(e.target.value)}\r\n                />\r\n              </div>\r\n            </div>\r\n          </Section>\r\n\r\n          <Section title=\"Prazos\" subtitle=\"Defina validade da proposta e prazos de execução.\">\r\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-4\">\r\n              <div>\r\n                <Label required>Tempo para aceite (dias)</Label>\r\n                <Input \r\n                  type=\"number\" \r\n                  value={prazos.tempo_para_aceite} \r\n                  onChange={(e) => setPrazos({ ...prazos, tempo_para_aceite: Number(e.target.value) })} \r\n                />\r\n              </div>\r\n              <div>\r\n                <Label required>Validade da proposta</Label>\r\n                <Input \r\n                  type=\"date\" \r\n                  value={prazos.validade_proposta} \r\n                  onChange={(e) => setPrazos({ ...prazos, validade_proposta: e.target.value })} \r\n                />\r\n              </div>\r\n              <div>\r\n                <Label required>Prazo de execução (dias)</Label>\r\n                <Input \r\n                  type=\"number\" \r\n                  value={prazos.prazo_execucao_dias} \r\n                  onChange={(e) => setPrazos({ ...prazos, prazo_execucao_dias: Number(e.target.value) })} \r\n                />\r\n              </div>\r\n              <div>\r\n                <Label>Janela preferencial</Label>\r\n                <Input \r\n                  placeholder=\"Seg‑Sex, 8h–17h\" \r\n                  value={prazos.janela} \r\n                  onChange={(e) => setPrazos({ ...prazos, janela: e.target.value })} \r\n                />\r\n              </div>\r\n              <div className=\"md:col-span-4\">\r\n                <Label>Restrições de acesso</Label>\r\n                <Textarea \r\n                  placeholder=\"Ex.: cadastro de visitantes, carga/descarga até 16h…\" \r\n                  value={prazos.restricoes} \r\n                  onChange={(e) => setPrazos({ ...prazos, restricoes: e.target.value })} \r\n                />\r\n              </div>\r\n            </div>\r\n          </Section>\r\n\r\n          <Section title=\"Permissões / Conformidades\" subtitle=\"Permits, normas e inspeções.\">\r\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-4\">\r\n              <div>\r\n                <Label required>Permits necessários?</Label>\r\n                <Select value={permite} onChange={(e) => setPermite(e.target.value as StatusPermite)}>\r\n                  <option value={StatusPermite.NAO_NECESSARIO}>Não</option>\r\n                  <option value={StatusPermite.NECESSARIO}>Sim</option>\r\n                </Select>\r\n              </div>\r\n              <div className=\"md:col-span-3\">\r\n                <Label className={permite === StatusPermite.NECESSARIO ? \"\" : \"opacity-50\"}>Quais permits</Label>\r\n                <Input \r\n                  disabled={permite !== StatusPermite.NECESSARIO} \r\n                  placeholder=\"Ex.: Elétrica (City of Dallas)\" \r\n                  value={quaisPermites} \r\n                  onChange={(e) => setQuaisPermites(e.target.value)} \r\n                />\r\n              </div>\r\n              <div className=\"md:col-span-2\">\r\n                <Label>Normas de referência</Label>\r\n                <Input \r\n                  placeholder=\"NEC 2023, ABNT NBR 5410\" \r\n                  value={normas} \r\n                  onChange={(e) => setNormas(e.target.value)} \r\n                />\r\n              </div>\r\n              <div className=\"md:col-span-2\">\r\n                <Label>Inspeções necessárias</Label>\r\n                <Input \r\n                  placeholder=\"Inspeção final elétrica\" \r\n                  value={inspecoes} \r\n                  onChange={(e) => setInspecoes(e.target.value)} \r\n                />\r\n              </div>\r\n            </div>\r\n          </Section>\r\n\r\n          <Section title=\"Materiais\" subtitle=\"Liste os materiais com quantidades e unidades.\">\r\n            <div className=\"flex flex-col gap-3\">\r\n              {materiais.map((m) => (\r\n                <div key={m.id} className=\"grid grid-cols-12 items-end gap-2 rounded-xl border border-slate-200 bg-slate-50 dark:bg-transparent dark:border-white/10 p-3\">\r\n                  <div className=\"col-span-2\">\r\n                    <Label required>Código</Label>\r\n                    <Input value={m.codigo} onChange={(e) => setMateriais((arr) => arr.map((x) => (x.id === m.id ? { ...x, codigo: e.target.value } : x)))} />\r\n                  </div>\r\n                  <div className=\"col-span-3\">\r\n                    <Label required>Nome</Label>\r\n                    <Input value={m.nome} onChange={(e) => setMateriais((arr) => arr.map((x) => (x.id === m.id ? { ...x, nome: e.target.value } : x)))} />\r\n                  </div>\r\n                  <div className=\"col-span-2\">\r\n                    <Label required>Quantidade</Label>\r\n                    <Input type=\"number\" value={m.quantidade} onChange={(e) => setMateriais((arr) => arr.map((x) => (x.id === m.id ? { ...x, quantidade: Number(e.target.value) } : x)))} />\r\n                  </div>\r\n                  <div className=\"col-span-1\">\r\n                    <Label required>Un</Label>\r\n                    <Input value={m.unidade} onChange={(e) => setMateriais((arr) => arr.map((x) => (x.id === m.id ? { ...x, unidade: e.target.value } : x)))} />\r\n                  </div>\r\n                  <div className=\"col-span-2\">\r\n                    <Label>Preço unit. (interno)</Label>\r\n                    <Input type=\"number\" step=\"0.01\" value={m.preco ?? \"\"} onChange={(e) => setMateriais((arr) => arr.map((x) => (x.id === m.id ? { ...x, preco: Number(e.target.value) } : x)))} />\r\n                  </div>\r\n                  <div className=\"col-span-2 flex items-end justify-end gap-2\">\r\n                    <button onClick={() => rmMaterial(m.id)} className=\"rounded-lg border border-rose-200 bg-white dark:bg-white/5 px-3 py-2 text-xs font-medium text-rose-600 hover:bg-rose-50\">Remover</button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              <div>\r\n                <button onClick={addMaterial} className=\"rounded-xl bg-white dark:bg-white/5 px-4 py-2 text-sm font-medium text-[var(--gp-blue)] shadow-sm ring-1 ring-inset ring-slate-200 dark:ring-white/5 hover:bg-slate-50\">\r\n                  + Adicionar material\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </Section>\r\n\r\n          <Section title=\"Etapas / Serviços\" subtitle=\"Descreva o que será executado e critérios de aceite.\">\r\n            <div className=\"flex flex-col gap-3\">\r\n              {etapas.map((e) => (\r\n                <div key={e.id} className=\"grid grid-cols-12 gap-2 rounded-xl border border-slate-200 bg-slate-50 dark:bg-transparent dark:border-white/10 p-3\">\r\n                  <div className=\"col-span-3\">\r\n                    <Label required>Serviço</Label>\r\n                    <Input value={e.servico} onChange={(ev) => setEtapas((arr) => arr.map((x) => (x.id === e.id ? { ...x, servico: ev.target.value } : x)))} />\r\n                  </div>\r\n                  <div className=\"col-span-5\">\r\n                    <Label required>Descrição</Label>\r\n                    <Textarea rows={3} value={e.descricao} onChange={(ev) => setEtapas((arr) => arr.map((x) => (x.id === e.id ? { ...x, descricao: ev.target.value } : x)))} />\r\n                  </div>\r\n                  <div className=\"col-span-1\">\r\n                    <Label>Qtd</Label>\r\n                    <Input type=\"number\" value={e.quantidade ?? \"\"} onChange={(ev) => setEtapas((arr) => arr.map((x) => (x.id === e.id ? { ...x, quantidade: Number(ev.target.value) } : x)))} />\r\n                  </div>\r\n                  <div className=\"col-span-1\">\r\n                    <Label>Un</Label>\r\n                    <Input value={e.unidade ?? \"\"} onChange={(ev) => setEtapas((arr) => arr.map((x) => (x.id === e.id ? { ...x, unidade: ev.target.value } : x)))} />\r\n                  </div>\r\n                  <div className=\"col-span-1\">\r\n                    <Label>Horas</Label>\r\n                    <Input type=\"number\" value={e.duracaoHoras ?? \"\"} onChange={(ev) => setEtapas((arr) => arr.map((x) => (x.id === e.id ? { ...x, duracaoHoras: Number(ev.target.value) } : x)))} />\r\n                  </div>\r\n                  <div className=\"col-span-1\">\r\n                    <Label>Custo MO</Label>\r\n                    <Input type=\"number\" step=\"0.01\" value={e.custoMO ?? \"\"} onChange={(ev) => setEtapas((arr) => arr.map((x) => (x.id === e.id ? { ...x, custoMO: Number(ev.target.value) } : x)))} />\r\n                  </div>\r\n                  <div className=\"col-span-12 flex items-center justify-between\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Label>Status</Label>\r\n                      <Select value={e.status} onChange={(ev) => setEtapas((arr) => arr.map((x) => (x.id === e.id ? { ...x, status: ev.target.value as any } : x)))} className=\"w-auto\">\r\n                        <option value=\"planejada\">Planejada</option>\r\n                        <option value=\"opcional\">Opcional</option>\r\n                        <option value=\"removida\">Removida</option>\r\n                      </Select>\r\n                    </div>\r\n                    <button onClick={() => rmEtapa(e.id)} className=\"rounded-lg border border-rose-200 bg-white dark:bg-white/5 px-3 py-2 text-xs font-medium text-rose-600 hover:bg-rose-50\">Remover</button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              <div>\r\n                <button onClick={addEtapa} className=\"rounded-xl bg-white dark:bg-white/5 px-4 py-2 text-sm font-medium text-[var(--gp-blue)] shadow-sm ring-1 ring-inset ring-slate-200 dark:ring-white/5 hover:bg-slate-50\">\r\n                  + Adicionar etapa\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </Section>\r\n\r\n          <Section title=\"Condições Comerciais\" subtitle=\"Tudo que o cliente precisa saber para decidir.\">\r\n            <div className=\"grid grid-cols-1 gap-4\">\r\n              <div>\r\n                <Label required>Condições de pagamento</Label>\r\n                <Textarea value={comerciais.condicoes_pagamento} onChange={(e) => setComerciais({ ...comerciais, condicoes_pagamento: e.target.value })} />\r\n              </div>\r\n              <div>\r\n                <Label required>Garantia</Label>\r\n                <Textarea value={comerciais.garantia} onChange={(e) => setComerciais({ ...comerciais, garantia: e.target.value })} />\r\n              </div>\r\n              <div>\r\n                <Label required>Exclusões</Label>\r\n                <Textarea value={comerciais.exclusoes} onChange={(e) => setComerciais({ ...comerciais, exclusoes: e.target.value })} />\r\n              </div>\r\n              <div>\r\n                <Label required>Condições gerais</Label>\r\n                <Textarea value={comerciais.condicoes_gerais} onChange={(e) => setComerciais({ ...comerciais, condicoes_gerais: e.target.value })} />\r\n              </div>\r\n            </div>\r\n          </Section>\r\n\r\n          <Section title=\"Faturamento / Invoice\" subtitle=\"Defina quando e como faturar.\">\r\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-4\">\r\n              <div>\r\n                <Label required>Gatilho</Label>\r\n                <Select value={faturamento.gatilho} onChange={(e) => setFaturamento({ ...faturamento, gatilho: e.target.value as any })}>\r\n                  <option value=\"na_aprovacao\">Na aprovação</option>\r\n                  <option value=\"por_marcos\">Por marcos</option>\r\n                  <option value=\"na_entrega\">Na entrega</option>\r\n                  <option value=\"custom\">Custom</option>\r\n                </Select>\r\n              </div>\r\n              <div>\r\n                <Label>% sinal (se aplicável)</Label>\r\n                <Input type=\"number\" value={faturamento.percentual_sinal} onChange={(e) => setFaturamento({ ...faturamento, percentual_sinal: Number(e.target.value) })} />\r\n              </div>\r\n              <div>\r\n                <Label>Forma preferida</Label>\r\n                <Select value={faturamento.forma_preferida} onChange={(e) => setFaturamento({ ...faturamento, forma_preferida: e.target.value })}>\r\n                  <option>Invoice</option>\r\n                  <option>PIX/Zelle</option>\r\n                  <option>Cartão</option>\r\n                  <option>Transferência</option>\r\n                </Select>\r\n              </div>\r\n              <div className=\"md:col-span-4\">\r\n                <Label>Instruções</Label>\r\n                <Textarea value={faturamento.instrucoes} onChange={(e) => setFaturamento({ ...faturamento, instrucoes: e.target.value })} />\r\n              </div>\r\n            </div>\r\n          </Section>\r\n\r\n          <Section title=\"Observações\">\r\n            <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\r\n              <div>\r\n                <Label>Observações para o cliente (aparecem no PDF)</Label>\r\n                <Textarea value={obsCliente} onChange={(e) => setObsCliente(e.target.value)} />\r\n              </div>\r\n              <div>\r\n                <Label>Observações internas (não aparecem no PDF)</Label>\r\n                <Textarea value={obsInternas} onChange={(e) => setObsInternas(e.target.value)} />\r\n              </div>\r\n            </div>\r\n          </Section>\r\n\r\n          <div className=\"flex items-center justify-end gap-3\">\r\n            <button \r\n              onClick={() => router.back()}\r\n              className=\"rounded-xl border border-slate-200 bg-white px-4 py-2 text-sm font-medium text-slate-700 shadow-sm hover:bg-slate-50\"\r\n            >\r\n              Cancelar\r\n            </button>\r\n            <button \r\n              onClick={() => handleSalvar(false)}\r\n              disabled={loading}\r\n              className=\"rounded-xl bg-[var(--gp-blue)] px-4 py-2 text-sm font-semibold text-white shadow-sm hover:opacity-95 disabled:opacity-50\"\r\n            >\r\n              {loading ? 'Salvando...' : 'Salvar e continuar'}\r\n            </button>\r\n          </div>\r\n\r\n          {/* Continue na próxima parte... */}\r\n        </div>\r\n\r\n        {/* Right column (sidebar summary) será adicionado na próxima parte */}\r\n        <div className=\"order-1 flex flex-col gap-6 lg:order-2\">\r\n          <section className=\"rounded-2xl border border-slate-200 bg-white dark:bg-white/5 dark:border-white/10 p-5 shadow-sm\">\r\n            <div className=\"mb-3 flex items-start justify-between\">\r\n              <h3 className=\"text-base font-semibold text-slate-800\">Resumo de Preço (interno)</h3>\r\n              <Badge>Privado</Badge>\r\n            </div>\r\n            <div className=\"space-y-3\">\r\n              <div className=\"grid grid-cols-2 text-sm\">\r\n                <span className=\"text-slate-500\">Materiais</span>\r\n                <span className=\"text-right font-medium\">{currency(totais.mat)}</span>\r\n              </div>\r\n              <div className=\"grid grid-cols-2 text-sm\">\r\n                <span className=\"text-slate-500\">Mão de obra</span>\r\n                <span className=\"text-right font-medium\">{currency(totais.mo)}</span>\r\n              </div>\r\n              <div className=\"grid grid-cols-2 text-sm\">\r\n                <span className=\"text-slate-500\">Terceiros</span>\r\n                <span className=\"text-right font-medium\">{currency(totais.terce)}</span>\r\n              </div>\r\n              <div className=\"grid grid-cols-2 text-sm\">\r\n                <span className=\"text-slate-500\">Frete/Logística</span>\r\n                <span className=\"text-right font-medium\">{currency(totais.frete)}</span>\r\n              </div>\r\n              <hr className=\"my-2\" />\r\n              <div className=\"grid grid-cols-2 text-sm\">\r\n                <span className=\"text-slate-500\">Overhead</span>\r\n                <span className=\"text-right font-medium\">{currency(totais.overhead)}</span>\r\n              </div>\r\n              <div className=\"grid grid-cols-2 text-sm\">\r\n                <span className=\"text-slate-500\">Margem</span>\r\n                <span className=\"text-right font-medium\">{currency(totais.margem)}</span>\r\n              </div>\r\n              <div className=\"grid grid-cols-2 text-sm\">\r\n                <span className=\"text-slate-500\">Contingência</span>\r\n                <span className=\"text-right font-medium\">{currency(totais.conting)}</span>\r\n              </div>\r\n              <div className=\"grid grid-cols-2 text-sm\">\r\n                <span className=\"text-slate-500\">Impostos</span>\r\n                <span className=\"text-right font-medium\">{currency(totais.impostos)}</span>\r\n              </div>\r\n              <div className=\"mt-3 rounded-xl bg-slate-50 dark:bg-transparent p-3\">\r\n                <div className=\"flex items-center justify-between text-sm\">\r\n                  <span className=\"font-semibold text-slate-700\">Preço ao cliente (estimado)</span>\r\n                  <span className=\"text-base font-semibold text-slate-900\">{currency(totais.precoCliente)}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-4 grid grid-cols-2 gap-3 text-xs\">\r\n              <div>\r\n                <Label>Overhead (%)</Label>\r\n                <Input type=\"number\" value={interno.overhead_pct} onChange={(e) => setInterno({ ...interno, overhead_pct: Number(e.target.value) })} />\r\n              </div>\r\n              <div>\r\n                <Label>Margem (%)</Label>\r\n                <Input type=\"number\" value={interno.margem_pct} onChange={(e) => setInterno({ ...interno, margem_pct: Number(e.target.value) })} />\r\n              </div>\r\n              <div>\r\n                <Label>Impostos (%)</Label>\r\n                <Input type=\"number\" value={interno.impostos_pct} onChange={(e) => setInterno({ ...interno, impostos_pct: Number(e.target.value) })} />\r\n              </div>\r\n              <div>\r\n                <Label>Contingência (%)</Label>\r\n                <Input type=\"number\" value={interno.contingencia_pct} onChange={(e) => setInterno({ ...interno, contingencia_pct: Number(e.target.value) })} />\r\n              </div>\r\n              <div>\r\n                <Label>Custo materiais</Label>\r\n                <Input type=\"number\" step=\"0.01\" value={interno.custo_material} onChange={(e) => setInterno({ ...interno, custo_material: Number(e.target.value) })} />\r\n              </div>\r\n              <div>\r\n                <Label>Custo mão de obra</Label>\r\n                <Input type=\"number\" step=\"0.01\" value={interno.custo_mo} onChange={(e) => setInterno({ ...interno, custo_mo: Number(e.target.value) })} />\r\n              </div>\r\n              <div>\r\n                <Label>Horas MO</Label>\r\n                <Input type=\"number\" value={interno.horas_mo} onChange={(e) => setInterno({ ...interno, horas_mo: Number(e.target.value) })} />\r\n              </div>\r\n              <div>\r\n                <Label>Terceiros</Label>\r\n                <Input type=\"number\" step=\"0.01\" value={interno.custo_terceiros} onChange={(e) => setInterno({ ...interno, custo_terceiros: Number(e.target.value) })} />\r\n              </div>\r\n              <div>\r\n                <Label>Frete/Log</Label>\r\n                <Input type=\"number\" step=\"0.01\" value={interno.frete} onChange={(e) => setInterno({ ...interno, frete: Number(e.target.value) })} />\r\n              </div>\r\n            </div>\r\n          </section>\r\n\r\n          <Section title=\"Status da Proposta\" subtitle=\"Controle o estado atual da proposta.\">\r\n            <div className=\"grid grid-cols-1 gap-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center gap-2 text-sm text-slate-600\">\r\n                  Status atual: <Badge color={statusBadgeColor}>{statusLabel}</Badge>\r\n                </div>\r\n                <div className=\"flex gap-2\">\r\n                  <button onClick={() => setStatus(StatusProposta.APROVADA)} className=\"rounded-xl border border-emerald-200 bg-white dark:bg-white/5 px-3 py-2 text-xs font-semibold text-emerald-700 hover:bg-emerald-50\">Marcar aprovada</button>\r\n                  <button onClick={() => setStatus(StatusProposta.CANCELADA)} className=\"rounded-xl border border-rose-200 bg-white dark:bg-white/5 px-3 py-2 text-xs font-semibold text-rose-700 hover:bg-rose-50\">Cancelar</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Section>\r\n        </div>\r\n      </main>\r\n\r\n      <footer className=\"mx-auto max-w-7xl px-4 pb-10 pt-4 text-center text-xs text-slate-400\">\r\n        Formulário de proposta • GladPros • Sistema integrado\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\PropostaFormModular.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PropostaFormData' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ClienteInfo' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":14}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport React, { useState } from 'react'\r\nimport { StatusProposta, StatusPermite } from '@/types/prisma-temp'\r\nimport { \r\n  PropostaFormData, \r\n  TotaisCalculados,\r\n  ClienteInfo,\r\n  PrazosInfo,\r\n  ComercialInfo,\r\n  PermiteInfo,\r\n  ObservacoesInfo,\r\n  EscopoInfo,\r\n  FaturamentoInfo,\r\n  InternoInfo,\r\n  Material,\r\n  Etapa\r\n} from './types'\r\nimport { \r\n  EscopoSection,\r\n  PrazosSection,\r\n  PermitsSection,\r\n  MaterialSection,\r\n  EtapasSection,\r\n  ComercialSection,\r\n  FaturamentoSection,\r\n  ObservacoesSection,\r\n  ResumoPrecoSidebar\r\n} from './sections'\r\n\r\n// Componente Header simplificado\r\nconst FormHeader = ({ \r\n  onSave, \r\n  onSubmit, \r\n  isLoading\r\n}: {\r\n  onSave: () => void\r\n  onSubmit: () => void\r\n  isLoading: boolean\r\n}) => (\r\n  <header className=\"sticky top-0 z-10 border-b border-slate-200 bg-white/80 backdrop-blur-sm\">\r\n    <div className=\"mx-auto max-w-7xl px-6 py-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-xl font-bold text-slate-900\">Nova Proposta (Modular)</h1>\r\n          <p className=\"text-sm text-slate-500\">Versão componentizada com seções independentes</p>\r\n        </div>\r\n        <div className=\"flex gap-3\">\r\n          <button\r\n            onClick={onSave}\r\n            disabled={isLoading}\r\n            className=\"rounded-xl border border-slate-300 bg-white px-4 py-2 text-sm font-semibold text-slate-700 hover:bg-slate-50 disabled:opacity-50\"\r\n          >\r\n            {isLoading ? 'Salvando...' : 'Salvar Rascunho'}\r\n          </button>\r\n          <button\r\n            onClick={onSubmit}\r\n            disabled={isLoading}\r\n            className=\"rounded-xl bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700 disabled:opacity-50\"\r\n          >\r\n            {isLoading ? 'Enviando...' : 'Enviar Proposta'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </header>\r\n)\r\n\r\nexport default function PropostaFormModular() {\r\n  // Estados iniciais simplificados\r\n  const [escopo, setEscopo] = useState<EscopoInfo>({\r\n    titulo: '',\r\n    escopo: '',\r\n    resumo_executivo: ''\r\n  })\r\n\r\n  const [prazos, setPrazos] = useState<PrazosInfo>({\r\n    tempo_para_aceite: 30,\r\n    validade_proposta: new Date().toISOString().split('T')[0],\r\n    prazo_execucao_dias: 30,\r\n    janela: '',\r\n    restricoes: ''\r\n  })\r\n\r\n  const [permite, setPermite] = useState<PermiteInfo>({\r\n    status: StatusPermite.NAO_NECESSARIO,\r\n    quais_permites: '',\r\n    normas: '',\r\n    inspecoes: ''\r\n  })\r\n\r\n  const [materiais, setMateriais] = useState<Material[]>([])\r\n  const [etapas, setEtapas] = useState<Etapa[]>([])\r\n\r\n  const [comercial, setComercial] = useState<ComercialInfo>({\r\n    valor_proposta: 0,\r\n    prazo_validade: 30,\r\n    local_execucao: '',\r\n    condicoes_pagamento: [],\r\n    observacoes: '',\r\n    garantias: ''\r\n  })\r\n\r\n  const [faturamento, setFaturamento] = useState<FaturamentoInfo>({\r\n    gatilho: \"na_aprovacao\",\r\n    percentual_sinal: 30,\r\n    forma_preferida: '',\r\n    instrucoes: ''\r\n  })\r\n\r\n  const [interno, setInterno] = useState<InternoInfo>({\r\n    custo_material: 0,\r\n    custo_mo: 0,\r\n    horas_mo: 0,\r\n    custo_terceiros: 0,\r\n    overhead_pct: 15,\r\n    margem_pct: 20,\r\n    impostos_pct: 8,\r\n    contingencia_pct: 5,\r\n    frete: 0\r\n  })\r\n\r\n  const [observacoes, setObservacoes] = useState<ObservacoesInfo>({\r\n    obs_cliente: '',\r\n    obs_internas: ''\r\n  })\r\n\r\n  const [status, setStatus] = useState<StatusProposta>(StatusProposta.RASCUNHO)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  // Cálculos de totais\r\n  const totais: TotaisCalculados = React.useMemo(() => {\r\n    const base = interno.custo_material + interno.custo_mo + interno.custo_terceiros + interno.frete\r\n    const overhead = base * (interno.overhead_pct / 100)\r\n    const margem = (base + overhead) * (interno.margem_pct / 100)\r\n    const conting = (base + overhead + margem) * (interno.contingencia_pct / 100)\r\n    const impostos = (base + overhead + margem + conting) * (interno.impostos_pct / 100)\r\n    \r\n    return {\r\n      mat: interno.custo_material,\r\n      mo: interno.custo_mo,\r\n      terce: interno.custo_terceiros,\r\n      frete: interno.frete,\r\n      overhead,\r\n      margem,\r\n      conting,\r\n      impostos,\r\n      precoCliente: base + overhead + margem + conting + impostos\r\n    }\r\n  }, [interno])\r\n\r\n  // Handlers simplificados\r\n  const handleSave = async () => {\r\n    setIsLoading(true)\r\n    try {\r\n      console.log('Salvando rascunho...')\r\n      // Simular salvamento\r\n      await new Promise(resolve => setTimeout(resolve, 1000))\r\n      console.log('Rascunho salvo!')\r\n    } catch (error) {\r\n      console.error('Erro ao salvar:', error)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    setIsLoading(true)\r\n    try {\r\n      console.log('Enviando proposta...')\r\n      // Simular envio\r\n      await new Promise(resolve => setTimeout(resolve, 2000))\r\n      console.log('Proposta enviada!')\r\n      setStatus(StatusProposta.PENDENTE_APROVACAO)\r\n    } catch (error) {\r\n      console.error('Erro ao enviar:', error)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-slate-50\">\r\n      <FormHeader \r\n        onSave={handleSave}\r\n        onSubmit={handleSubmit}\r\n        isLoading={isLoading}\r\n      />\r\n      \r\n      <main className=\"mx-auto max-w-7xl px-6 py-8\">\r\n        <div className=\"grid grid-cols-1 gap-8 lg:grid-cols-3\">\r\n          {/* Coluna principal com as seções */}\r\n          <div className=\"order-2 space-y-8 lg:order-1 lg:col-span-2\">\r\n            <EscopoSection \r\n              escopo={escopo} \r\n              onChange={setEscopo} \r\n            />\r\n            \r\n            <PrazosSection \r\n              prazos={prazos} \r\n              onPrazosChange={setPrazos} \r\n            />\r\n            \r\n            <PermitsSection \r\n              permite={permite} \r\n              onChange={setPermite} \r\n            />\r\n            \r\n            <MaterialSection \r\n              materiais={materiais} \r\n              onMateriaisChange={setMateriais} \r\n            />\r\n            \r\n            <EtapasSection \r\n              etapas={etapas} \r\n              onEtapasChange={setEtapas} \r\n            />\r\n            \r\n            <ComercialSection \r\n              comercial={comercial} \r\n              onChange={setComercial} \r\n            />\r\n            \r\n            <FaturamentoSection \r\n              faturamento={faturamento} \r\n              onChange={setFaturamento} \r\n            />\r\n            \r\n            <ObservacoesSection \r\n              observacoes={observacoes} \r\n              onChange={setObservacoes} \r\n            />\r\n          </div>\r\n\r\n          {/* Sidebar com resumo */}\r\n          <ResumoPrecoSidebar\r\n            totais={totais}\r\n            interno={interno}\r\n            status={status}\r\n            onInternoChange={setInterno}\r\n            onStatusChange={setStatus}\r\n          />\r\n        </div>\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\adapter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5862,5865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5862,5865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Adapter para converter dados do novo formulário para o formato da API/DB atual\r\nimport { PropostaFormData } from '@modules/propostas/ui/types'\r\nimport { StatusProposta, StatusPermite } from '@/types/prisma-temp'\r\n\r\nexport interface PropostaAPIPayload {\r\n  // Dados principais\r\n  clienteId: number\r\n  titulo?: string\r\n  descricao?: string\r\n  valorEstimado: number\r\n  status: StatusProposta\r\n  \r\n  // Contato e local\r\n  contatoNome: string\r\n  contatoEmail: string\r\n  contatoTelefone?: string\r\n  localExecucaoEndereco: string\r\n  \r\n  // Prazos\r\n  tempoParaAceite: number\r\n  validadeProposta: Date\r\n  prazoExecucaoDias: number\r\n  janelaExecucao?: string\r\n  restricoesAcesso?: string\r\n  \r\n  // Permits e conformidade\r\n  permite: StatusPermite\r\n  quaisPermites?: string\r\n  normasReferencia?: string\r\n  inspecoesNecessarias?: string\r\n  \r\n  // Comerciais\r\n  condicoesPagamento: string\r\n  garantia: string\r\n  exclusoes: string\r\n  condicoesGerais: string\r\n  \r\n  // Estimativas internas\r\n  estimativasInternas: {\r\n    custoMaterialEstimado: number\r\n    custoMaoObraEstimado: number\r\n    horasMaoObraEstimadas: number\r\n    custoTerceirosEstimado: number\r\n    overheadPercentual: number\r\n    margemDesejadaPercentual: number\r\n    impostosPercentual: number\r\n    contingenciaPercentual: number\r\n    freteLogisticaEstimado: number\r\n    totalEstimadoInterno: number\r\n  }\r\n  \r\n  // Faturamento\r\n  gatilhoFaturamento: string\r\n  percentualSinal: number\r\n  formaPreferida: string\r\n  instrucoesFaturamento?: string\r\n  \r\n  // Observações\r\n  observacoesCliente?: string\r\n  observacoesInternas?: string\r\n  \r\n  // Materiais e etapas (simplified for DB)\r\n  materiais: Array<{\r\n    codigo: string\r\n    nome: string\r\n    quantidade: number\r\n    unidade: string\r\n    valorUnitarioEstimado?: number\r\n    status: string\r\n    fornecedor?: string\r\n    observacoes?: string\r\n  }>\r\n  \r\n  etapas: Array<{\r\n    servico: string\r\n    descricao: string\r\n    ordem: number\r\n    quantidade?: number\r\n    unidade?: string\r\n    duracaoEstimadaHoras?: number\r\n    custoMaoObraEstimado?: number\r\n    status: string\r\n  }>\r\n}\r\n\r\nexport function adaptPropostaFormToAPI(formData: PropostaFormData): PropostaAPIPayload {\r\n  // Calcular totais\r\n  const custoMaterial = formData.materiais.reduce(\r\n    (acc: number, m: { preco?: number; quantidade: number }) =>\r\n      acc + (m.preco ?? 0) * m.quantidade,\r\n    0\r\n  )\r\n  const custoMaoObra = formData.interno.custo_mo\r\n  const custoTerceiros = formData.interno.custo_terceiros\r\n  const freteLogistica = formData.interno.frete\r\n  \r\n  const base = custoMaterial + custoMaoObra + custoTerceiros + freteLogistica\r\n  const overhead = base * (formData.interno.overhead_pct / 100)\r\n  const margem = (base + overhead) * (formData.interno.margem_pct / 100)\r\n  const contingencia = (base + overhead + margem) * (formData.interno.contingencia_pct / 100)\r\n  const subtotal = base + overhead + margem + contingencia\r\n  const impostos = subtotal * (formData.interno.impostos_pct / 100)\r\n  const valorTotal = subtotal + impostos\r\n\r\n  return {\r\n    clienteId: parseInt(formData.cliente.id),\r\n    titulo: formData.cliente.titulo,\r\n    descricao: formData.escopo,\r\n    valorEstimado: valorTotal,\r\n    status: formData.status,\r\n    \r\n    // Contato\r\n    contatoNome: formData.cliente.contato_nome,\r\n    contatoEmail: formData.cliente.contato_email,\r\n    contatoTelefone: formData.cliente.contato_telefone || undefined,\r\n    localExecucaoEndereco: formData.cliente.local_endereco,\r\n    \r\n    // Prazos\r\n    tempoParaAceite: formData.prazos.tempo_para_aceite,\r\n    validadeProposta: new Date(formData.prazos.validade_proposta),\r\n    prazoExecucaoDias: formData.prazos.prazo_execucao_dias,\r\n    janelaExecucao: formData.prazos.janela,\r\n    restricoesAcesso: formData.prazos.restricoes,\r\n    \r\n    // Permits\r\n    permite: formData.permite,\r\n    quaisPermites: formData.quaisPermites,\r\n    normasReferencia: formData.normas,\r\n    inspecoesNecessarias: formData.inspecoes,\r\n    \r\n    // Comerciais\r\n    condicoesPagamento: formData.comerciais.condicoes_pagamento,\r\n    garantia: formData.comerciais.garantia,\r\n    exclusoes: formData.comerciais.exclusoes,\r\n    condicoesGerais: formData.comerciais.condicoes_gerais,\r\n    \r\n    // Estimativas internas\r\n    estimativasInternas: {\r\n      custoMaterialEstimado: custoMaterial,\r\n      custoMaoObraEstimado: custoMaoObra,\r\n      horasMaoObraEstimadas: formData.interno.horas_mo,\r\n      custoTerceirosEstimado: custoTerceiros,\r\n      overheadPercentual: formData.interno.overhead_pct,\r\n      margemDesejadaPercentual: formData.interno.margem_pct,\r\n      impostosPercentual: formData.interno.impostos_pct,\r\n      contingenciaPercentual: formData.interno.contingencia_pct,\r\n      freteLogisticaEstimado: freteLogistica,\r\n      totalEstimadoInterno: valorTotal\r\n    },\r\n    \r\n    // Faturamento\r\n    gatilhoFaturamento: formData.faturamento.gatilho.toUpperCase(),\r\n    percentualSinal: formData.faturamento.percentual_sinal,\r\n    formaPreferida: formData.faturamento.forma_preferida,\r\n    instrucoesFaturamento: formData.faturamento.instrucoes,\r\n    \r\n    // Observações\r\n    observacoesCliente: formData.obsCliente,\r\n    observacoesInternas: formData.obsInternas,\r\n    \r\n    // Materiais adaptados\r\n    materiais: formData.materiais.map((m: { id?: string; codigo?: string; nome?: string; preco?: number; quantidade: number; unidade?: string; status?: string; fornecedor?: string; obs?: string }) => ({\r\n      codigo: String(m.codigo ?? ''),\r\n      nome: String(m.nome ?? ''),\r\n      quantidade: m.quantidade,\r\n      unidade: String(m.unidade ?? ''),\r\n      valorUnitarioEstimado: m.preco,\r\n      status: String((m.status ?? ''))?.toUpperCase(),\r\n      fornecedor: m.fornecedor ? String(m.fornecedor) : undefined,\r\n      observacoes: m.obs ? String(m.obs) : undefined\r\n    })),\r\n    \r\n    // Etapas adaptadas\r\n    etapas: formData.etapas.map((e: any, index: number) => ({\r\n      servico: String(e.servico ?? ''),\r\n      descricao: String(e.descricao ?? ''),\r\n      ordem: index + 1,\r\n      quantidade: e.quantidade,\r\n      unidade: e.unidade ? String(e.unidade) : undefined,\r\n      duracaoEstimadaHoras: e.duracaoHoras,\r\n      custoMaoObraEstimado: e.custoMO,\r\n      status: e.status ? String(e.status).toUpperCase() : 'PLANEJADA'\r\n    }))\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\hooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\sections\\ComercialSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\sections\\EscopoSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\sections\\EtapasSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3126,3129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3126,3129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport React from 'react'\r\nimport { Label, Input, Textarea, Select } from '../ui-components'\r\nimport { Etapa } from '../types'\r\n\r\ninterface EtapasSectionProps {\r\n  etapas: Etapa[]\r\n  onEtapasChange: (etapas: Etapa[]) => void\r\n}\r\n\r\nexport function EtapasSection({ etapas, onEtapasChange }: EtapasSectionProps) {\r\n  const addEtapa = () => {\r\n    const novaEtapa: Etapa = {\r\n      id: crypto.randomUUID(),\r\n      servico: \"\",\r\n      descricao: \"\",\r\n      quantidade: 1,\r\n      unidade: \"serviço\",\r\n      status: \"planejada\"\r\n    }\r\n    onEtapasChange([...etapas, novaEtapa])\r\n  }\r\n\r\n  const removeEtapa = (id: string) => {\r\n    onEtapasChange(etapas.filter(e => e.id !== id))\r\n  }\r\n\r\n  const updateEtapa = (id: string, updates: Partial<Etapa>) => {\r\n    onEtapasChange(\r\n      etapas.map(e => e.id === id ? { ...e, ...updates } : e)\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-3\">\r\n      {etapas.map((etapa) => (\r\n        <div key={etapa.id} className=\"grid grid-cols-12 gap-2 rounded-xl border border-slate-200 bg-slate-50 p-3\">\r\n          <div className=\"col-span-3\">\r\n            <Label required>Serviço</Label>\r\n            <Input \r\n              value={etapa.servico} \r\n              onChange={(e) => updateEtapa(etapa.id, { servico: e.target.value })} \r\n            />\r\n          </div>\r\n          <div className=\"col-span-5\">\r\n            <Label required>Descrição</Label>\r\n            <Textarea \r\n              rows={3} \r\n              value={etapa.descricao} \r\n              onChange={(e) => updateEtapa(etapa.id, { descricao: e.target.value })} \r\n            />\r\n          </div>\r\n          <div className=\"col-span-1\">\r\n            <Label>Qtd</Label>\r\n            <Input \r\n              type=\"number\" \r\n              value={etapa.quantidade ?? \"\"} \r\n              onChange={(e) => updateEtapa(etapa.id, { quantidade: Number(e.target.value) })} \r\n            />\r\n          </div>\r\n          <div className=\"col-span-1\">\r\n            <Label>Un</Label>\r\n            <Input \r\n              value={etapa.unidade ?? \"\"} \r\n              onChange={(e) => updateEtapa(etapa.id, { unidade: e.target.value })} \r\n            />\r\n          </div>\r\n          <div className=\"col-span-1\">\r\n            <Label>Horas</Label>\r\n            <Input \r\n              type=\"number\" \r\n              value={etapa.duracaoHoras ?? \"\"} \r\n              onChange={(e) => updateEtapa(etapa.id, { duracaoHoras: Number(e.target.value) })} \r\n            />\r\n          </div>\r\n          <div className=\"col-span-1\">\r\n            <Label>Custo MO</Label>\r\n            <Input \r\n              type=\"number\" \r\n              step=\"0.01\" \r\n              value={etapa.custoMO ?? \"\"} \r\n              onChange={(e) => updateEtapa(etapa.id, { custoMO: Number(e.target.value) })} \r\n            />\r\n          </div>\r\n          <div className=\"col-span-12 flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Label>Status</Label>\r\n              <Select \r\n                value={etapa.status} \r\n                onChange={(e) => updateEtapa(etapa.id, { status: e.target.value as any })} \r\n                className=\"w-auto\"\r\n              >\r\n                <option value=\"planejada\">Planejada</option>\r\n                <option value=\"opcional\">Opcional</option>\r\n                <option value=\"removida\">Removida</option>\r\n              </Select>\r\n            </div>\r\n            <button \r\n              onClick={() => removeEtapa(etapa.id)} \r\n              className=\"rounded-lg border border-rose-200 bg-white px-3 py-2 text-xs font-medium text-rose-600 hover:bg-rose-50\"\r\n            >\r\n              Remover\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ))}\r\n      <div>\r\n        <button \r\n          onClick={addEtapa} \r\n          className=\"rounded-xl bg-white px-4 py-2 text-sm font-medium text-[var(--gp-blue)] shadow-sm ring-1 ring-inset ring-slate-200 hover:bg-slate-50\"\r\n        >\r\n          + Adicionar etapa\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\sections\\FaturamentoSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\sections\\IdentificacaoSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\sections\\MaterialSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\sections\\ObservacoesSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\sections\\PermitsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\sections\\PrazosSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\sections\\ResumoPrecoSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\sections\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\ui-components.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\useAutoSave.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\propostas\\ui\\validation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StatusProposta' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StatusPermite' is defined but never used.","line":2,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":39}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod'\r\nimport { StatusProposta, StatusPermite } from '@/types/prisma-temp'\r\n\r\nexport const materialSchema = z.object({\r\n  id: z.string(),\r\n  codigo: z.string().min(1, 'Código obrigatório'),\r\n  nome: z.string().min(1, 'Nome obrigatório'),\r\n  quantidade: z.number().min(0, 'Quantidade deve ser positiva'),\r\n  unidade: z.string().min(1, 'Unidade obrigatória'),\r\n  preco: z.number().optional(),\r\n  status: z.enum(['necessario', 'opcional', 'substituivel']),\r\n  fornecedor: z.string().optional(),\r\n  obs: z.string().optional(),\r\n})\r\n\r\nexport const etapaSchema = z.object({\r\n  id: z.string(),\r\n  servico: z.string().min(1, 'Serviço obrigatório'),\r\n  descricao: z.string().min(1, 'Descrição obrigatória'),\r\n  quantidade: z.number().optional(),\r\n  unidade: z.string().optional(),\r\n  duracaoHoras: z.number().optional(),\r\n  custoMO: z.number().optional(),\r\n  status: z.enum(['planejada', 'opcional', 'removida']),\r\n})\r\n\r\nexport const clienteInfoSchema = z.object({\r\n  id: z.string().min(1, 'Cliente obrigatório'),\r\n  contato_nome: z.string().min(1, 'Nome do contato obrigatório'),\r\n  contato_email: z.string().email('E-mail inválido'),\r\n  contato_telefone: z.string().optional(),\r\n  local_endereco: z.string().min(1, 'Endereço obrigatório'),\r\n  titulo: z.string().min(1, 'Título obrigatório'),\r\n})\r\n\r\nexport const prazosInfoSchema = z.object({\r\n  tempo_para_aceite: z.number().min(1, 'Tempo para aceite deve ser positivo'),\r\n  validade_proposta: z.string().min(1, 'Validade obrigatória'),\r\n  prazo_execucao_dias: z.number().min(1, 'Prazo de execução deve ser positivo'),\r\n  janela: z.string().optional(),\r\n  restricoes: z.string().optional(),\r\n})\r\n\r\nexport const comerciaisInfoSchema = z.object({\r\n  condicoes_pagamento: z.string().min(1, 'Condições de pagamento obrigatórias'),\r\n  garantia: z.string().min(1, 'Garantia obrigatória'),\r\n  exclusoes: z.string().min(1, 'Exclusões obrigatórias'),\r\n  condicoes_gerais: z.string().min(1, 'Condições gerais obrigatórias'),\r\n  desconto: z.number().min(0).max(100, 'Desconto deve estar entre 0 e 100%'),\r\n})\r\n\r\nexport const internoInfoSchema = z.object({\r\n  custo_material: z.number().min(0),\r\n  custo_mo: z.number().min(0),\r\n  horas_mo: z.number().min(0),\r\n  custo_terceiros: z.number().min(0),\r\n  overhead_pct: z.number().min(0).max(100),\r\n  margem_pct: z.number().min(0).max(100),\r\n  impostos_pct: z.number().min(0).max(100),\r\n  contingencia_pct: z.number().min(0).max(100),\r\n  frete: z.number().min(0),\r\n})\r\n\r\nexport const faturamentoInfoSchema = z.object({\r\n  gatilho: z.enum(['na_aprovacao', 'por_marcos', 'na_entrega', 'custom']),\r\n  percentual_sinal: z.number().min(0).max(100),\r\n  forma_preferida: z.string().min(1, 'Forma de pagamento obrigatória'),\r\n  instrucoes: z.string().optional(),\r\n})\r\n\r\nexport const propostaFormSchema = z.object({\r\n  cliente: clienteInfoSchema,\r\n  escopo: z.string().min(10, 'Escopo deve ter pelo menos 10 caracteres'),\r\n  prazos: prazosInfoSchema,\r\n  permite: z.enum(['NECESSARIO', 'NAO_NECESSARIO', 'OBTIDO']),\r\n  quaisPermites: z.string().optional(),\r\n  normas: z.string().optional(),\r\n  inspecoes: z.string().optional(),\r\n  materiais: z.array(materialSchema),\r\n  etapas: z.array(etapaSchema),\r\n  comerciais: comerciaisInfoSchema,\r\n  interno: internoInfoSchema,\r\n  faturamento: faturamentoInfoSchema,\r\n  obsCliente: z.string().optional(),\r\n  obsInternas: z.string().optional(),\r\n  status: z.enum(['RASCUNHO', 'PENDENTE_APROVACAO', 'APROVADA', 'REJEITADA', 'CANCELADA', 'ENVIADA', 'ASSINADA']),\r\n})\r\n\r\nexport type PropostaFormValidated = z.infer<typeof propostaFormSchema>\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\usuarios\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\usuarios\\client\\exportService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\usuarios\\client\\usersApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\usuarios\\pages\\DetailPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1275,1278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1275,1278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1329,1332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1329,1332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/modules/usuarios/pages/DetailPage.tsx\r\n\"use client\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Link from \"next/link\";\r\nimport UserForm from \"../ui/UserForm\";\r\nimport { SecurityTab } from \"../ui/SecurityTab\";\r\nimport { getUser, updateUser } from \"../client/usersApi\";\r\nimport { getAuditoriaUsuario } from \"../services/auditoriaApi\";\r\nimport type { Usuario } from \"../types\";\r\nimport type { AuditoriaResponse } from \"@/types/auditoria\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { useToast } from \"@/components/ui/Toaster\";\r\n\r\nexport default function UserDetailPage({ id }: { id: string }) {\r\n  const router = useRouter();\r\n  const { showToast } = useToast();\r\n  const [user, setUser] = useState<Usuario | null>(null);\r\n  const [tab, setTab] = useState<\"dados\" | \"permissoes\" | \"auditoria\" | \"seguranca\">(\"dados\");\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [auditorias, setAuditorias] = useState<AuditoriaResponse[]>([]);\r\n  const [loadingAuditoria, setLoadingAuditoria] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    let alive = true;\r\n    setLoading(true);\r\n    setError(null);\r\n    getUser(id)\r\n      .then((u: any) => { if (alive) setUser(u); })\r\n      .catch((e: any) => { if (alive) setError(e?.message || \"Falha ao carregar usuário\"); })\r\n      .finally(() => { if (alive) setLoading(false); });\r\n    return () => { alive = false; };\r\n  }, [id]);\r\n\r\n  // Carregar dados de auditoria quando a aba for selecionada\r\n  useEffect(() => {\r\n    if (tab === \"auditoria\" && auditorias.length === 0) {\r\n      setLoadingAuditoria(true);\r\n      getAuditoriaUsuario(parseInt(id))\r\n        .then((data) => setAuditorias(data))\r\n        .catch((e) => console.error(\"Erro ao carregar auditoria:\", e))\r\n        .finally(() => setLoadingAuditoria(false));\r\n    }\r\n  }, [tab, id, auditorias.length]);\r\n\r\n  type ApiError = Error & { fields?: Record<string, string> };\r\n  async function handleSubmit(data: Partial<Usuario>) {\r\n    setSubmitting(true);\r\n    setError(null);\r\n    try {\r\n      await updateUser(id, data);\r\n  showToast({ title: \"Sucesso\", message: \"Usuário atualizado\", type: \"success\" });\r\n  router.push(\"/usuarios\");\r\n    } catch (e: unknown) {\r\n      const err = e as ApiError;\r\n      // Se o erro tem campos específicos, vamos re-lançar para o UserForm capturar\r\n      if (err?.fields) {\r\n        throw err; // Re-lançar para que o UserForm possa capturar e mostrar os erros nos campos específicos\r\n      }\r\n      // Outros erros (genéricos) mostrar na página\r\n  const msg = err?.message ?? \"Erro ao atualizar usuário\";\r\n  setError(msg);\r\n  showToast({ title: \"Erro\", message: msg, type: \"error\" });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h2 className=\"font-title text-xl\">Editar Usuário</h2>\r\n  <Link href=\"/usuarios\" className=\"rounded-xl border px-3 py-2 text-sm\">Voltar</Link>\r\n      </div>\r\n      {loading && (\r\n        <div className=\"rounded-xl border border-black/10 bg-white p-4 text-sm opacity-70 dark:border-white/10 dark:bg-white/5\">Carregando…</div>\r\n      )}\r\n      {!loading && error && (\r\n        <div className=\"rounded-xl border border-red-200 bg-red-50 p-4 text-sm text-red-700\">{error}</div>\r\n      )}\r\n\r\n      {/* Abas simples */}\r\n      {user && (\r\n      <div className=\"flex gap-2\">\r\n        {([\"dados\",\"permissoes\",\"auditoria\",\"seguranca\"] as const).map((t) => (\r\n          <button\r\n            key={t}\r\n            onClick={() => setTab(t)}\r\n            className={`rounded-xl px-3 py-2 text-sm ${tab === t ? \"bg-[#0098DA] text-white\" : \"border border-black/10 bg-white dark:border-white/10 dark:bg-white/5\"}`}\r\n          >\r\n            {t === \"dados\" ? \"Dados\" : t === \"permissoes\" ? \"Permissões\" : t === \"auditoria\" ? \"Auditoria\" : \"Segurança\"}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      )}\r\n\r\n      {user && tab === \"dados\" && (\r\n        <UserForm\r\n          initial={{\r\n            ...user,\r\n            dataNascimento:\r\n              typeof user.dataNascimento === 'string'\r\n                ? user.dataNascimento\r\n                : user.dataNascimento\r\n                ? new Date(user.dataNascimento).toISOString().slice(0, 10)\r\n                : undefined,\r\n          }}\r\n          onSubmit={handleSubmit}\r\n          submitting={submitting}\r\n        />\r\n      )}\r\n\r\n      {tab === \"permissoes\" && user && (\r\n        <div className=\"rounded-2xl border border-black/10 bg-white p-4 space-y-4 dark:border-white/10 dark:bg-white/5\">\r\n          <h3 className=\"font-semibold text-lg\">Permissões do Usuário</h3>\r\n          <div className=\"space-y-3\">\r\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\r\n              <div>\r\n                <strong>Nível/Role:</strong> {user.role || \"USUARIO\"}\r\n              </div>\r\n              <div className={`px-2 py-1 rounded text-xs font-medium ${\r\n                user.role === \"ADMIN\" ? \"bg-red-100 text-red-800\" :\r\n                user.role === \"GERENTE\" ? \"bg-blue-100 text-blue-800\" :\r\n                user.role === \"FINANCEIRO\" ? \"bg-green-100 text-green-800\" :\r\n                user.role === \"ESTOQUE\" ? \"bg-yellow-100 text-yellow-800\" :\r\n                \"bg-gray-100 text-gray-800\"\r\n              }`}>\r\n                {user.role === \"ADMIN\" ? \"Acesso Total\" :\r\n                 user.role === \"GERENTE\" ? \"Gerenciamento\" :\r\n                 user.role === \"FINANCEIRO\" ? \"Financeiro\" :\r\n                 user.role === \"ESTOQUE\" ? \"Estoque\" : \"Usuário Padrão\"}\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              {Object.entries({\r\n                \"Usuários\": \"usuarios\",\r\n                \"Financeiro\": \"financeiro\", \r\n                \"Clientes\": \"clientes\",\r\n                \"Projetos\": \"projetos\",\r\n                \"Propostas\": \"propostas\",\r\n                \"Estoque\": \"estoque\"\r\n              }).map(([label, module]) => {\r\n                const userRole = user.role || \"USUARIO\";\r\n                const permissions = [\"read\", \"create\", \"update\", \"delete\"];\r\n                \r\n                return (\r\n                  <div key={module} className=\"p-3 border rounded-lg\">\r\n                    <div className=\"font-medium mb-2\">{label}</div>\r\n                    <div className=\"space-y-1 text-xs\">\r\n                      {permissions.map(action => {\r\n                        // Verificação simplificada de permissões no client-side\r\n                        let hasPermission = false;\r\n                        if (userRole === \"ADMIN\") {\r\n                          hasPermission = true;\r\n                        } else if (userRole === \"GERENTE\") {\r\n                          hasPermission = module !== \"usuarios\" || action === \"read\";\r\n                        } else if (userRole === \"FINANCEIRO\") {\r\n                          hasPermission = (module === \"financeiro\") || \r\n                                         (module === \"clientes\" && action === \"read\") ||\r\n                                         (module === \"propostas\") || // Acesso total a propostas\r\n                                         (module === \"projetos\" && action === \"read\"); // Leitura de projetos\r\n                        } else if (userRole === \"ESTOQUE\") {\r\n                          hasPermission = (module === \"estoque\") ||\r\n                                         (module === \"projetos\" && action === \"read\") ||\r\n                                         (module === \"clientes\" && action === \"read\"); // Leitura de clientes\r\n                        } else {\r\n                          // USUARIO: pode editar clientes e projetos (usuário de campo)\r\n                          hasPermission = (module === \"clientes\") || // Acesso total a clientes\r\n                                         (module === \"projetos\"); // Acesso total a projetos\r\n                        }\r\n                        \r\n                        return (\r\n                          <div key={action} className={`flex justify-between ${hasPermission ? 'text-green-600' : 'text-red-500'}`}>\r\n                            <span>{action === \"read\" ? \"Ler\" : action === \"create\" ? \"Criar\" : action === \"update\" ? \"Editar\" : \"Excluir\"}</span>\r\n                            <span>{hasPermission ? \"✓\" : \"✗\"}</span>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {tab === \"auditoria\" && (\r\n        <div className=\"rounded-2xl border border-black/10 bg-white p-4 text-sm dark:border-white/10 dark:bg-white/5\">\r\n          <div className=\"mb-4 font-semibold\">Histórico de Auditoria</div>\r\n          \r\n          {loadingAuditoria ? (\r\n            <div className=\"flex items-center justify-center py-8\">\r\n              <div className=\"animate-spin rounded-full h-6 w-6 border-2 border-blue-600 border-t-transparent\"></div>\r\n              <span className=\"ml-2\">Carregando...</span>\r\n            </div>\r\n          ) : auditorias.length === 0 ? (\r\n            <div className=\"text-gray-500 py-4\">Nenhum log de auditoria encontrado.</div>\r\n          ) : (\r\n            <div className=\"space-y-2\">\r\n              {auditorias.map((log) => {\r\n                const acaoTexto = {\r\n                  CREATE: \"Criado\",\r\n                  UPDATE: \"Atualizado\", \r\n                  DELETE: \"Excluído\",\r\n                  LOGIN: \"Login realizado\",\r\n                  LOGOUT: \"Logout realizado\"\r\n                }[log.acao] || log.acao;\r\n\r\n                const corAcao = {\r\n                  CREATE: \"text-green-600\",\r\n                  UPDATE: \"text-blue-600\",\r\n                  DELETE: \"text-red-600\", \r\n                  LOGIN: \"text-purple-600\",\r\n                  LOGOUT: \"text-gray-600\"\r\n                }[log.acao] || \"text-gray-600\";\r\n\r\n                const iconAcao = {\r\n                  CREATE: \"✅\",\r\n                  UPDATE: \"📝\", \r\n                  DELETE: \"🗑️\",\r\n                  LOGIN: \"🔐\",\r\n                  LOGOUT: \"📤\"\r\n                }[log.acao] || \"📋\";\r\n\r\n                // Criar descrição mais amigável\r\n                const getDescricaoAmigavel = () => {\r\n                  if (log.acao === \"CREATE\") {\r\n                    return \"Usuário criado no sistema\";\r\n                  } else if (log.acao === \"UPDATE\") {\r\n                    return \"Dados do usuário atualizados\";\r\n                  } else if (log.acao === \"LOGIN\") {\r\n                    return \"Realizou login no sistema\";\r\n                  } else if (log.acao === \"LOGOUT\") {\r\n                    return \"Saiu do sistema\";\r\n                  } else if (log.acao === \"DELETE\") {\r\n                    return \"Usuário excluído do sistema\";\r\n                  }\r\n                  return `${acaoTexto} - ${log.tabela}`;\r\n                };\r\n\r\n                return (\r\n                  <div key={log.id} className=\"border-l-4 border-gray-300 pl-4 py-3 bg-gray-50 rounded-r-lg\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <span className=\"text-lg\">{iconAcao}</span>\r\n                        <span className={`font-medium ${corAcao}`}>{acaoTexto}</span>\r\n                        <span className=\"text-gray-400\">•</span>\r\n                        <span className=\"text-gray-700\">{getDescricaoAmigavel()}</span>\r\n                      </div>\r\n                      <div className=\"text-xs text-gray-500\">\r\n                        {new Date(log.criadoEm).toLocaleString('pt-BR')}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"text-xs text-gray-500 mt-2 flex items-center gap-4\">\r\n                      {log.nomeCompleto || log.email ? (\r\n                        <span>\r\n                          👤 <span className=\"font-medium text-gray-700\">{log.nomeCompleto || log.email}</span>\r\n                        </span>\r\n                      ) : log.usuarioId ? (\r\n                        <span>👤 Usuário #{log.usuarioId}</span>\r\n                      ) : (\r\n                        <span>🤖 Sistema</span>\r\n                      )}\r\n                      \r\n                      {log.ip && (\r\n                        <span>🌐 IP: {log.ip}</span>\r\n                      )}\r\n                    </div>\r\n                    \r\n                    {log.payload && (\r\n                      <details className=\"mt-3\">\r\n                        <summary className=\"text-xs text-blue-600 cursor-pointer hover:text-blue-800 font-medium\">\r\n                          📋 Ver detalhes técnicos\r\n                        </summary>\r\n                        <pre className=\"text-xs bg-gray-100 dark:bg-gray-800 p-3 rounded mt-2 overflow-x-auto border\">\r\n                          {JSON.stringify(JSON.parse(log.payload), null, 2)}\r\n                        </pre>\r\n                      </details>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {tab === \"seguranca\" && user && (\r\n        <SecurityTab userId={user.id} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\usuarios\\pages\\ListPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5823,5826],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5823,5826],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5831,5834],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5831,5834],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/modules/usuarios/pages/ListPage.tsx\r\n\"use client\";\r\nimport { useEffect, useMemo, useState, useCallback, useRef } from \"react\";\r\nimport Link from \"next/link\";\r\nimport Toolbar from \"../ui/Toolbar\";\r\nimport UsersTable from \"../ui/UsersTable\";\r\nimport { getUsers, deleteUser, toggleUserStatus } from \"../client/usersApi\";\r\nimport { useConfirm } from \"@/components/ui/ConfirmDialog\";\r\nimport type { Usuario } from \"../types\";\r\nimport { Panel } from \"@/components/GladPros\";\r\nimport { useToast } from \"@/components/ui/Toaster\";\r\n\r\nexport default function UsersListPage() {\r\n  const { confirm, Dialog } = useConfirm();\r\n  const { showToast } = useToast();\r\n  const [q, setQ] = useState(\"\");\r\n  const [role, setRole] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [pageSize] = useState(10);\r\n  const [total, setTotal] = useState(0);\r\n  const [data, setData] = useState<Usuario[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [sortKey, setSortKey] = useState<\"nome\" | \"email\" | \"role\" | \"ativo\" | \"criadoEm\">(\"criadoEm\");\r\n  const [sortDir, setSortDir] = useState<\"asc\" | \"desc\">(\"desc\");\r\n  const [selectedIds, setSelectedIds] = useState<number[]>([]);\r\n  const [exporting, setExporting] = useState(false);\r\n  const abortRef = useRef<AbortController | null>(null);\r\n\r\n  const load = useCallback(async () => {\r\n    setLoading(true);\r\n    abortRef.current?.abort();\r\n    const ac = new AbortController();\r\n    abortRef.current = ac;\r\n    try {\r\n  const res = await getUsers({ q, role, status, page, pageSize, sortKey, sortDir });\r\n  setData(res.items);\r\n  setTotal(res.total);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [q, role, status, page, pageSize, sortKey, sortDir]);\r\n\r\n  useEffect(() => {\r\n    load();\r\n  }, [load]);\r\n\r\n  async function onDelete(id: number) {\r\n    const ok = await confirm({ title: \"Remover usuário\", message: \"Tem certeza que deseja remover este usuário?\", confirmText: \"Remover\", tone: \"danger\" });\r\n    if (!ok) return;\r\n    try {\r\n      await deleteUser(String(id));\r\n      showToast({ title: 'Removido', message: 'Usuário removido com sucesso', type: 'success' });\r\n      load();\r\n    } catch (error) {\r\n      console.error(error);\r\n      showToast({ title: 'Erro', message: 'Falha ao remover usuário', type: 'error' });\r\n    }\r\n  }\r\n\r\n  async function onToggleStatus(id: number, currentStatus: boolean) {\r\n    const action = currentStatus ? \"desativar\" : \"ativar\";\r\n    const ok = await confirm({ \r\n      title: `${action.charAt(0).toUpperCase() + action.slice(1)} usuário`, \r\n      message: `Tem certeza que deseja ${action} este usuário?`, \r\n      confirmText: action.charAt(0).toUpperCase() + action.slice(1),\r\n      tone: currentStatus ? \"danger\" : \"default\"\r\n    });\r\n    if (!ok) return;\r\n    \r\n    try {\r\n      await toggleUserStatus(String(id), !currentStatus);\r\n  showToast({ title: 'Sucesso', message: 'Status atualizado', type: 'success' });\r\n  load(); // Recarregar lista\r\n    } catch (error) {\r\n  console.error(error);\r\n  showToast({ title: 'Erro', message: 'Erro ao alterar status do usuário', type: 'error' });\r\n    }\r\n  }\r\n\r\n  const totalPages = useMemo(() => Math.max(1, Math.ceil(total / pageSize)), [total, pageSize]);\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h2 className=\"font-title text-xl\">Usuários</h2>\r\n        <Link href=\"/usuarios/novo\" className=\"rounded-2xl bg-[#0098DA] px-4 py-2 text-sm text-white hover:brightness-110\">Novo Usuário</Link>\r\n      </div>\r\n\r\n  <Toolbar \r\n    q={q} \r\n    onQ={setQ} \r\n    role={role} \r\n    onRole={setRole} \r\n    status={status} \r\n    onStatus={setStatus} \r\n    total={total} \r\n    showNew={false} \r\n    users={data.filter(u => selectedIds.includes(u.id))} \r\n    scope=\"selected\"\r\n    exporting={exporting}\r\n  onExportAllFiltered={async (format: string) => {\r\n      try {\r\n        setExporting(true);\r\n        if (format === 'csv') {\r\n          // Server CSV export for all filtered (implement route if needed)\r\n          const res = await fetch('/api/usuarios/export/csv', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ filters: { q, role, status, sortKey, sortDir } })\r\n          });\r\n          if (!res.ok) throw new Error('Falha ao exportar CSV');\r\n          const blob = await res.blob();\r\n          const url = window.URL.createObjectURL(blob);\r\n          const a = document.createElement('a');\r\n          a.href = url; a.download = 'usuarios.csv'; a.click();\r\n          window.URL.revokeObjectURL(url);\r\n        } else {\r\n          const res = await fetch('/api/usuarios/export/pdf', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ filters: { q, role, status, sortKey, sortDir } })\r\n          });\r\n          if (!res.ok) throw new Error('Falha ao exportar PDF');\r\n          const blob = await res.blob();\r\n          const url = window.URL.createObjectURL(blob);\r\n          const a = document.createElement('a');\r\n          a.href = url; a.download = 'usuarios.pdf'; a.click();\r\n          window.URL.revokeObjectURL(url);\r\n        }\r\n      } finally {\r\n        setExporting(false);\r\n      }\r\n    }}\r\n  />\r\n\r\n  <Panel title=\"Lista de Usuários\">\r\n        {loading ? (\r\n          <div className=\"p-6 text-sm opacity-60\">Carregando…</div>\r\n        ) : (\r\n          <UsersTable \r\n            data={data} \r\n            onEdit={(id: number) => (location.href = `/usuarios/${id}`)} \r\n            onDelete={onDelete} \r\n            onToggleStatus={onToggleStatus} \r\n            onSelectedChange={setSelectedIds}\r\n            sortKey={sortKey}\r\n            sortDir={sortDir}\r\n            onSortChange={(k: any, d: any) => { setSortKey(k); setSortDir(d); }}\r\n          />\r\n        )}\r\n      </Panel>\r\n  <Dialog />\r\n\r\n      <div className=\"flex items-center justify-between text-sm\">\r\n        <div className=\"opacity-60\">Página {page} de {totalPages}</div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <button disabled={page <= 1} onClick={() => setPage((p) => Math.max(1, p - 1))} className=\"rounded-lg border px-3 py-1 disabled:opacity-50\">Anterior</button>\r\n          <button disabled={page >= totalPages} onClick={() => setPage((p) => Math.min(totalPages, p + 1))} className=\"rounded-lg border px-3 py-1 disabled:opacity-50\">Próxima</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\usuarios\\pages\\NewPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\usuarios\\server\\auditoria.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\usuarios\\services\\auditoriaApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\usuarios\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\usuarios\\ui\\RoleBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\usuarios\\ui\\SecurityTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\usuarios\\ui\\Toolbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\usuarios\\ui\\UserForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\usuarios\\ui\\UsersTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\modules\\usuarios\\ui\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\server\\db-temp.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\server\\db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\services\\auditService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[269,272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[269,272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[329,332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[329,332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1154,1157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1154,1157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { prisma } from '@/server/db'\r\n\r\n/**\r\n * Service para operações de auditoria\r\n */\r\nexport class AuditService {\r\n  static async logAction(\r\n    userId: number,\r\n    entidade: string,\r\n    entidadeId: number | string,\r\n    acao: string,\r\n    diff?: Record<string, any>\r\n  ) {\r\n    try {\r\n      const auditModel = (prisma as any)?.auditLog\r\n      if (!auditModel || typeof auditModel.create !== 'function') {\r\n        // Tabela/modelo de auditoria não disponível: não falhar\r\n        return null\r\n      }\r\n      const auditLog = await auditModel.create({\r\n        data: {\r\n          userId,\r\n          entidade,\r\n          entidadeId: entidadeId.toString(),\r\n          acao,\r\n          diff: diff ? JSON.stringify(diff) : null,\r\n          timestamp: new Date()\r\n        }\r\n      })\r\n      return auditLog\r\n    } catch (error) {\r\n      console.error('Erro ao registrar audit log:', error)\r\n      // Não falha a operação principal se o log der erro\r\n      return null\r\n    }\r\n  }\r\n\r\n  static async getEntityHistory(\r\n    entidade: string,\r\n    entidadeId: number | string,\r\n    limit: number = 50\r\n  ) {\r\n    try {\r\n      const auditModel = (prisma as any)?.auditLog\r\n      if (!auditModel || typeof auditModel.findMany !== 'function') {\r\n        return []\r\n      }\r\n      const history = await auditModel.findMany({\r\n        where: {\r\n          entidade,\r\n          entidadeId: entidadeId.toString()\r\n        },\r\n        include: {\r\n          usuario: {\r\n            select: {\r\n              id: true,\r\n              nomeCompleto: true,\r\n              email: true\r\n            }\r\n          }\r\n        },\r\n        orderBy: {\r\n          timestamp: 'desc'\r\n        },\r\n        take: limit\r\n      })\r\n      return history\r\n    } catch (error) {\r\n      console.error('Erro ao buscar histórico:', error)\r\n      return []\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\tests\\test-auth-flow.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\tests\\test-date.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\tests\\test-email.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\tests\\test-fase-4.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\tests\\test-final-flow.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\tests\\test-login-flow.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\tests\\test-login.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\tests\\test-middleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\tests\\test-multiple.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\tests\\test-phone.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\tests\\test-user-creation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\tests\\test-valid.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\tests\\test-validation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\types\\auditoria.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\types\\cliente.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2832,2835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2832,2835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type TipoCliente = 'PF' | 'PJ'\r\nexport type TipoDocumentoPF = 'SSN' | 'ITIN'\r\nexport type StatusCliente = 'ATIVO' | 'INATIVO'\r\n\r\nexport interface Cliente {\r\n  id: number\r\n  tipo: TipoCliente\r\n  nomeCompleto: string | null\r\n  razaoSocial: string | null\r\n  nomeFantasia: string | null\r\n  email: string\r\n  telefone: string\r\n  nomeChave: string\r\n  endereco1: string | null\r\n  endereco2: string | null\r\n  cidade: string | null\r\n  estado: string | null\r\n  zipcode: string | null\r\n  status: StatusCliente\r\n  // Campos para mercado americano\r\n  tipoDocumentoPF: TipoDocumentoPF | null // SSN ou ITIN para PF\r\n  ssn: string | null // SSN para PF\r\n  itin: string | null // ITIN para PF  \r\n  ein: string | null // EIN para PJ\r\n  documentoEnc: string | null\r\n  docLast4: string | null\r\n  docHash: string | null\r\n  observacoes: string | null\r\n  ativo: boolean\r\n  criadoEm: Date\r\n  atualizadoEm: Date\r\n}\r\n\r\nexport interface ClienteDTO {\r\n  id: number\r\n  tipo: TipoCliente\r\n  nomeCompletoOuRazao: string\r\n  email: string\r\n  telefone: string\r\n  cidade: string | null\r\n  estado: string | null\r\n  zipcode: string | null\r\n  documentoMasked: string\r\n  ativo: boolean\r\n  criadoEm: string\r\n  atualizadoEm: string\r\n  // Campos condicionais baseados no tipo\r\n  nomeCompleto?: string | null\r\n  razaoSocial?: string | null\r\n  nomeFantasia?: string | null\r\n  endereco1?: string | null\r\n  endereco2?: string | null\r\n  observacoes?: string | null\r\n  // Campos para mercado americano\r\n  tipoDocumentoPF?: TipoDocumentoPF | null\r\n  ssn?: string | null\r\n  itin?: string | null  \r\n  ein?: string | null\r\n}\r\n\r\nexport interface ClienteCreateInput {\r\n  tipo: TipoCliente\r\n  nomeCompleto?: string | null\r\n  razaoSocial?: string | null\r\n  nomeFantasia?: string | null\r\n  email: string\r\n  telefone: string\r\n  endereco1: string\r\n  endereco2?: string | null\r\n  cidade: string\r\n  estado: string\r\n  zipcode: string\r\n  // Campos para mercado americano - condicionais\r\n  tipoDocumentoPF?: TipoDocumentoPF | null // Para PF\r\n  ssn?: string | null // Para PF quando tipoDocumentoPF = 'SSN'\r\n  itin?: string | null // Para PF quando tipoDocumentoPF = 'ITIN'\r\n  ein?: string | null // Para PJ\r\n  observacoes?: string | null\r\n}\r\n\r\nexport interface ClienteUpdateInput extends Partial<ClienteCreateInput> {\r\n  ativo?: boolean\r\n}\r\n\r\nexport interface ClienteFilters {\r\n  q?: string\r\n  tipo?: TipoCliente | 'all'\r\n  ativo?: boolean | 'all'\r\n  page?: number\r\n  pageSize?: number\r\n  sortKey?: 'nome' | 'tipo' | 'email' | 'telefone' | 'documento' | 'cidadeEstado' | 'status'\r\n  sortDir?: 'asc' | 'desc'\r\n}\r\n\r\nexport interface ClienteListResponse {\r\n  data: ClienteDTO[]\r\n  page: number\r\n  pageSize: number\r\n  total: number\r\n  totalPages: number\r\n}\r\n\r\nexport interface AuditLogEntry {\r\n  id: string\r\n  userId: string\r\n  entidade: string\r\n  entidadeId: string\r\n  acao: string\r\n  diff: any\r\n  createdAt: string\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\types\\nodemailer.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\types\\prisma-temp.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3645,3648],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3645,3648],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":166,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3701,3704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3701,3704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":167,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3756,3759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3756,3759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3804,3807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3804,3807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3850,3853],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3850,3853],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3900,3903],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3900,3903],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3916,3919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3916,3919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3941,3944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3941,3944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":172,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3987,3990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3987,3990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":175,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4054,4057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4054,4057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4105,4108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4105,4108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":179,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4181,4184],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4181,4184],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4236,4239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4236,4239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4252,4255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4252,4255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4279,4282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4279,4282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":184,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4360,4363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4360,4363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4418,4421],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4418,4421],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4434,4437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4434,4437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":186,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4461,4464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4461,4464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4540,4543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4540,4543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4594,4597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4594,4597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4641,4644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4641,4644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":192,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4686,4689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4686,4689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":193,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4731,4734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4731,4734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":194,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4776,4779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4776,4779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4843,4846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4843,4846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":198,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4897,4900],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4897,4900],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4944,4947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4944,4947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4989,4992],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4989,4992],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5034,5037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5034,5037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":202,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5079,5082],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5079,5082],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'options' is defined but never used. Allowed unused args must match /^_/u.","line":214,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":214,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5534,5537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5534,5537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5568,5571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5568,5571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":218,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5604,5607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5604,5607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":219,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5643,5646],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5643,5646],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":220,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5673,5676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5673,5676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":221,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5703,5706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5703,5706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5950,5953],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5950,5953],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Tipos temporários do Prisma até resolver o problema de geração\r\n// Este arquivo substitui as importações do @prisma/client temporariamente\r\n\r\nexport interface Proposta {\r\n  id: number\r\n  numeroProposta: string\r\n  titulo?: string | null\r\n  descricao?: string | null\r\n  status: StatusProposta\r\n  valorEstimado: number\r\n  dataVencimento?: Date | null\r\n  tokenAcesso?: string | null\r\n  tokenPublico?: string | null\r\n  tokenExpiresAt?: Date | null\r\n  assinadoEm?: Date | null\r\n  assinaturaTipo?: string | null\r\n  assinaturaNome?: string | null\r\n  assinaturaImagem?: string | null\r\n  criadoEm: Date\r\n  createdAt: Date\r\n  atualizadoEm: Date\r\n  clienteId: number\r\n  usuarioId?: number | null\r\n  // relacionamentos\r\n  cliente?: Cliente\r\n  usuario?: Usuario\r\n  etapas?: PropostaEtapa[]\r\n  materiais?: PropostaMaterial[]\r\n  anexos?: AnexoProposta[]\r\n  logs?: PropostaLog[]\r\n}\r\n\r\nexport interface PropostaEtapa {\r\n  id: number\r\n  propostaId: number\r\n  servico: string\r\n  descricao: string\r\n  status: StatusEtapaProposta\r\n  ordem: number\r\n  quantidade?: number | null\r\n  unidade?: string | null\r\n  duracaoEstimadaHoras?: number | null\r\n  custoMaoObraEstimado?: number | null\r\n  dependencias?: string | null\r\n  criadoEm: Date\r\n  atualizadoEm: Date\r\n}\r\n\r\nexport interface PropostaMaterial {\r\n  id: number\r\n  propostaId: number\r\n  nome: string\r\n  codigo?: string | null\r\n  quantidade: number\r\n  unidade?: string | null\r\n  valorUnitario?: number | null\r\n  precoUnitario?: number | null\r\n  status: StatusMaterialProposta\r\n  moeda: string\r\n  observacao?: string | null\r\n  fornecedorPreferencial?: string | null\r\n  criadoEm: Date\r\n  atualizadoEm: Date\r\n}\r\n\r\nexport interface AnexoProposta {\r\n  id: number\r\n  propostaId: number\r\n  nome: string\r\n  caminho: string\r\n  tamanho: number\r\n  tipo: string\r\n  criadoEm: Date\r\n}\r\n\r\nexport interface PropostaLog {\r\n  id: number\r\n  propostaId: number\r\n  acao: string\r\n  detalhes?: string | null\r\n  criadoEm: Date\r\n  usuarioId?: number | null\r\n  usuario?: Usuario\r\n}\r\n\r\nexport interface Cliente {\r\n  id: number\r\n  nomeCompleto?: string | null\r\n  razaoSocial?: string | null\r\n  email: string\r\n  telefone?: string | null\r\n  nomeFantasia?: string | null\r\n  tipo: string\r\n  endereco1?: string | null\r\n  endereco2?: string | null\r\n  cidade?: string | null\r\n  estado?: string | null\r\n  zipcode?: string | null\r\n  status: string\r\n  criadoEm: Date\r\n  atualizadoEm: Date\r\n}\r\n\r\nexport interface Usuario {\r\n  id: number\r\n  email: string\r\n  nomeCompleto?: string | null\r\n  status: string\r\n  criadoEm: Date\r\n  atualizadoEm: Date\r\n}\r\n\r\nexport interface Projeto {\r\n  id: number\r\n  nome: string\r\n  descricao?: string | null\r\n  clienteId: number\r\n  status: string\r\n  criadoEm: Date\r\n  atualizadoEm: Date\r\n}\r\n\r\nexport enum StatusProposta {\r\n  RASCUNHO = 'RASCUNHO',\r\n  PENDENTE_APROVACAO = 'PENDENTE_APROVACAO', \r\n  APROVADA = 'APROVADA',\r\n  REJEITADA = 'REJEITADA',\r\n  CANCELADA = 'CANCELADA',\r\n  ENVIADA = 'ENVIADA',\r\n  ASSINADA = 'ASSINADA'\r\n}\r\n\r\nexport enum StatusPermite {\r\n  NECESSARIO = 'NECESSARIO',\r\n  NAO_NECESSARIO = 'NAO_NECESSARIO',\r\n  OBTIDO = 'OBTIDO'\r\n}\r\n\r\nexport enum StatusEtapaProposta {\r\n  PLANEJADA = 'PLANEJADA',\r\n  EM_ANDAMENTO = 'EM_ANDAMENTO', \r\n  CONCLUIDA = 'CONCLUIDA',\r\n  CANCELADA = 'CANCELADA'\r\n}\r\n\r\nexport enum StatusMaterialProposta {\r\n  PLANEJADO = 'PLANEJADO',\r\n  PEDIDO = 'PEDIDO',\r\n  ENTREGUE = 'ENTREGUE',\r\n  SUBSTITUIDO = 'SUBSTITUIDO',\r\n  REMOVIDO = 'REMOVIDO'\r\n}\r\n\r\n// Tipos do Prisma Client\r\nexport interface PrismaClientOptions {\r\n  // configurações do cliente\r\n}\r\n\r\nexport interface DefaultArgs {\r\n  // argumentos padrão\r\n}\r\n\r\nexport type TransactionClient = {\r\n  proposta: {\r\n    findUnique: (args: any) => Promise<Proposta | null>\r\n    findFirst: (args: any) => Promise<Proposta | null>\r\n    findMany: (args: any) => Promise<Proposta[]>\r\n    create: (args: any) => Promise<Proposta>\r\n    update: (args: any) => Promise<Proposta>\r\n    updateMany: (args: any) => Promise<any>\r\n    delete: (args: any) => Promise<Proposta>\r\n    count: (args?: any) => Promise<number>\r\n  }\r\n  propostaLog: {\r\n    create: (args: any) => Promise<PropostaLog>\r\n    findMany: (args: any) => Promise<PropostaLog[]>\r\n  }\r\n  propostaEtapa: {\r\n    create: (args: any) => Promise<PropostaEtapa>\r\n    createMany: (args: any) => Promise<any>\r\n    findMany: (args: any) => Promise<PropostaEtapa[]>\r\n  }\r\n  propostaMaterial: {\r\n    create: (args: any) => Promise<PropostaMaterial>\r\n    createMany: (args: any) => Promise<any>\r\n    findMany: (args: any) => Promise<PropostaMaterial[]>\r\n  }\r\n  cliente: {\r\n    findUnique: (args: any) => Promise<Cliente | null>\r\n    findMany: (args: any) => Promise<Cliente[]>\r\n    create: (args: any) => Promise<Cliente>\r\n    update: (args: any) => Promise<Cliente>\r\n    delete: (args: any) => Promise<Cliente>\r\n    count: (args?: any) => Promise<number>\r\n  }\r\n  usuario: {\r\n    findUnique: (args: any) => Promise<Usuario | null>\r\n    findMany: (args: any) => Promise<Usuario[]>\r\n    create: (args: any) => Promise<Usuario>\r\n    update: (args: any) => Promise<Usuario>\r\n    delete: (args: any) => Promise<Usuario>\r\n    count: (args?: any) => Promise<number>\r\n  }\r\n}\r\n\r\nexport class PrismaClient {\r\n  proposta: TransactionClient['proposta']\r\n  propostaLog: TransactionClient['propostaLog'] \r\n  propostaEtapa: TransactionClient['propostaEtapa']\r\n  propostaMaterial: TransactionClient['propostaMaterial']\r\n  cliente: TransactionClient['cliente']\r\n  usuario: TransactionClient['usuario']\r\n\r\n  constructor(options?: PrismaClientOptions) {\r\n    // stub implementation\r\n    this.proposta = {} as any\r\n    this.propostaLog = {} as any\r\n    this.propostaEtapa = {} as any\r\n    this.propostaMaterial = {} as any\r\n    this.cliente = {} as any\r\n    this.usuario = {} as any\r\n  }\r\n\r\n  $connect(): Promise<void> {\r\n    return Promise.resolve()\r\n  }\r\n\r\n  $disconnect(): Promise<void> {\r\n    return Promise.resolve()\r\n  }\r\n\r\n  $transaction<T>(fn: (tx: TransactionClient) => Promise<T>): Promise<T> {\r\n    return fn({} as any)\r\n  }\r\n\r\n  // Método adicional para geração de número\r\n  generatePropostaNumber(): Promise<string> {\r\n    const now = new Date()\r\n    const year = now.getFullYear()\r\n    const month = String(now.getMonth() + 1).padStart(2, '0')\r\n    const day = String(now.getDate()).padStart(2, '0')\r\n    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0')\r\n    \r\n    return Promise.resolve(`PROP-${year}${month}${day}-${random}`)\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\types\\proposta-clean.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\types\\proposta.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StatusProposta' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StatusPermite' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StatusEtapaProposta' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StatusMaterialProposta' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1951,1954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1951,1954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1960,1963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1960,1963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/types/proposta.ts\r\nimport type { \r\n  Proposta, \r\n  PropostaEtapa, \r\n  PropostaMaterial, \r\n  AnexoProposta, \r\n  PropostaLog, \r\n  Cliente,\r\n  Usuario,\r\n  Projeto,\r\n  StatusProposta,\r\n  StatusPermite,\r\n  StatusEtapaProposta,\r\n  StatusMaterialProposta\r\n} from \"./prisma-temp\";\r\n\r\nexport type PropostaWithDetails = Proposta & {\r\n  cliente: Pick<Cliente, 'id' | 'nomeCompleto' | 'razaoSocial' | 'email'>;\r\n  etapas: PropostaEtapa[];\r\n  materiais: PropostaMaterial[];\r\n  anexos: AnexoProposta[];\r\n  logs?: PropostaLog[];\r\n};\r\n\r\nexport type PropostaListItem = Proposta & {\r\n  cliente: Pick<Cliente, 'id' | 'nomeCompleto' | 'razaoSocial' | 'email'>;\r\n  _count?: {\r\n    etapas: number;\r\n    materiais: number;\r\n    anexos: number;\r\n  };\r\n};\r\n\r\nexport type PropostaFilters = {\r\n  status?: string;\r\n  clienteId?: number;\r\n  search?: string;\r\n  dateFrom?: string;\r\n  dateTo?: string;\r\n  page?: number;\r\n  pageSize?: number;\r\n  cursor?: string;\r\n  sortKey?: 'dataCriacao' | 'numeroProposta' | 'status' | 'valorEstimado';\r\n  sortDir?: 'asc' | 'desc';\r\n};\r\n\r\nexport type PropostaStats = {\r\n  total: number;\r\n  rascunho: number;\r\n  enviada: number;\r\n  assinada: number;\r\n  aprovada: number;\r\n  cancelada: number;\r\n  valorTotalEstimado: number;\r\n};\r\n\r\nexport type ExportJob = {\r\n  id: string;\r\n  status: 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED';\r\n  format: 'csv' | 'xlsx' | 'pdf';\r\n  filters: PropostaFilters;\r\n  progress: number;\r\n  downloadUrl?: string;\r\n  error?: string;\r\n  createdAt: Date;\r\n  completedAt?: Date;\r\n};\r\n\r\n// Tipos para mascaramento de valores\r\nexport type PropostaForClient = Omit<PropostaWithDetails, 'valorEstimado'> & {\r\n  valorEstimado?: string; // Mascarado como \"xxxx.xx\" após assinatura\r\n  canViewValue?: boolean; // Se o cliente pode ver o valor não mascarado\r\n};\r\n\r\n// Tipos para auditoria e logs\r\nexport type PropostaLogEntry = {\r\n  action: string;\r\n  actor: string;\r\n  timestamp: Date;\r\n  changes?: Record<string, { from: any; to: any }>;\r\n  ip?: string;\r\n  userAgent?: string;\r\n};\r\n\r\n// Constantes do módulo\r\nexport const PROPOSTA_STATUS = {\r\n  RASCUNHO: 'RASCUNHO',\r\n  ENVIADA: 'ENVIADA', \r\n  ASSINADA: 'ASSINADA',\r\n  APROVADA: 'APROVADA',\r\n  CANCELADA: 'CANCELADA'\r\n} as const;\r\n\r\nexport const PERMITE_OPTIONS = {\r\n  SIM: 'SIM',\r\n  NAO: 'NAO'\r\n} as const;\r\n\r\nexport const ETAPA_STATUS = {\r\n  PLANEJADA: 'PLANEJADA',\r\n  EM_ANDAMENTO: 'EM_ANDAMENTO',\r\n  CONCLUIDA: 'CONCLUIDA'\r\n} as const;\r\n\r\nexport const MATERIAL_STATUS = {\r\n  PLANEJADO: 'PLANEJADO',\r\n  SUBSTITUIDO: 'SUBSTITUIDO',\r\n  REMOVIDO: 'REMOVIDO'\r\n} as const;\r\n\r\n// Configurações de paginação e exportação\r\nexport const PAGINATION_CONFIG = {\r\n  DEFAULT_PAGE_SIZE: parseInt(process.env.PAGE_SIZE_DEFAULT || '25'),\r\n  MAX_PAGE_SIZE: parseInt(process.env.PAGE_SIZE_MAX || '100'),\r\n  EXPORT_SYNC_MAX_ROWS: parseInt(process.env.EXPORT_SYNC_MAX_ROWS || '5000'),\r\n  EXPORT_ASYNC_MAX_ROWS: parseInt(process.env.EXPORT_ASYNC_MAX_ROWS || '50000'),\r\n  EXPORT_TIMEOUT_MS: parseInt(process.env.EXPORT_TIMEOUT_MS || '120000')\r\n} as const;\r\n\r\n// Tipos para RBAC e permissões\r\nexport type PropostaPermissions = {\r\n  canView: boolean;\r\n  canEdit: boolean;\r\n  canDelete: boolean;\r\n  canSend: boolean;\r\n  canApprove: boolean;\r\n  canViewValue: boolean; // Permissão para ver valorEstimado\r\n  canSignAsResponsible: boolean;\r\n};\r\n\r\n// Configurações de storage\r\nexport const STORAGE_CONFIG = {\r\n  UPLOAD_DIR: process.env.UPLOAD_DIR || 'uploads/propostas',\r\n  EXPORT_DIR: process.env.EXPORT_DIR || 'exports',\r\n  MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB\r\n  ALLOWED_MIME_TYPES: [\r\n    'application/pdf',\r\n    'image/jpeg',\r\n    'image/png',\r\n    'text/plain',\r\n    'application/msword',\r\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n  ]\r\n} as const;\r\n\r\n// Alias for components compatibility\r\nexport type PropostaWithRelations = PropostaWithDetails\r\n\r\nexport interface PropostaEtapaWithDetails extends PropostaEtapa {\r\n  materiais: PropostaMaterialWithDetails[]\r\n}\r\n\r\nexport interface PropostaMaterialWithDetails extends PropostaMaterial {\r\n  // Add any additional fields needed for detailed views\r\n}\r\n\r\nexport interface AnexoPropostaWithDetails extends AnexoProposta {\r\n  // Add any additional fields needed for detailed views\r\n}\r\n\r\nexport interface PropostaLogWithDetails extends PropostaLog {\r\n  usuario: Usuario\r\n}\r\n\r\nexport interface ProjetoWithDetails extends Projeto {\r\n  cliente: Cliente\r\n  proposta: Proposta\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\gladi\\Documents\\gladpros-nextjs\\src\\types\\propostas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]